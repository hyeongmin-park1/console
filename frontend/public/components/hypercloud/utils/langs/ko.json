{
  "COMMON": {
    "MSG_COMMON_FILTER_1": "리소스",
    "MSG_COMMON_FILTER_2": "리소스 선택",
    "MSG_COMMON_SEARCH_FILTER_1": "이름 ",
    "MSG_COMMON_SEARCH_FILTER_2": "레이블",
    "MSG_COMMON_SEARCH_PLACEHOLDER_1": "이름으로 검색",
    "MSG_COMMON_STATUS_1": "Running",
    "MSG_COMMON_STATUS_2": "Pending",
    "MSG_COMMON_STATUS_3": "Terminating",
    "MSG_COMMON_STATUS_4": "CrashLoopBackOff",
    "MSG_COMMON_STATUS_5": "Completed",
    "MSG_COMMON_STATUS_6": "Unknown",
    "MSG_COMMON_STATUS_7": "Bound",
    "MSG_COMMON_STATUS_8": "Lost",
    "MSG_COMMON_STATUS_9": "Awaiting",
    "MSG_COMMON_STATUS_10": "Approved",
    "MSG_COMMON_STATUS_11": "Rejected",
    "MSG_COMMON_TIMESTAMP_1": "1월",
    "MSG_COMMON_TIMESTAMP_2": "2월",
    "MSG_COMMON_TIMESTAMP_3": "3월",
    "MSG_COMMON_TIMESTAMP_4": "4월",
    "MSG_COMMON_TIMESTAMP_5": "5월",
    "MSG_COMMON_TIMESTAMP_6": "6월",
    "MSG_COMMON_TIMESTAMP_7": "7월",
    "MSG_COMMON_TIMESTAMP_8": "8월",
    "MSG_COMMON_TIMESTAMP_9": "9월",
    "MSG_COMMON_TIMESTAMP_10": "10월",
    "MSG_COMMON_TIMESTAMP_11": "11월",
    "MSG_COMMON_TIMESTAMP_12": "12월",
    "MSG_COMMON_ERROR_MESSAGE_1": "시스템에 인증 오류가 있었습니다. 다시 시도하거나 지원 부서에 문의하십시오.",
    "MSG_COMMON_ERROR_MESSAGE_2": "404: 페이지를 찾을 수 없음",
    "MSG_COMMON_ERROR_MESSAGE_3": "쿼리 매개 변수에 인증 코드가 없습니다.",
    "MSG_COMMON_ERROR_MESSAGE_4": "기본",
    "MSG_COMMON_ERROR_MESSAGE_5": "오류",
    "MSG_COMMON_ERROR_MESSAGE_6": "오 이런! 오류가 발생했습니다.",
    "MSG_COMMON_ERROR_MESSAGE_7": "페이지 찾을 수 없음 (404)",
    "MSG_COMMON_ERROR_MESSAGE_8": "로그인 상태를 생성하는 중에 오류가 발생했습니다.",
    "MSG_COMMON_ERROR_MESSAGE_9": "OIDC 클라이언트에서 OAuth 클라이언트를 생성하는 중에 오류가 발생했습니다.",
    "MSG_COMMON_ERROR_MESSAGE_10": "로그인하는 동안 오류가 발생했습니다. 로그 아웃 한 후 다시 시도하십시오.",
    "MSG_COMMON_ERROR_MESSAGE_11": "로그 아웃하는 중에 오류가 발생했습니다. 다시 시도하십시오.",
    "MSG_COMMON_ERROR_MESSAGE_12": "상태 쿠키를 파싱하는 중에 오류가 발생했습니다",
    "MSG_COMMON_ERROR_MESSAGE_13": "로그인 상태 쿠키를 설정하는 중에 오류가 발생했습니다",
    "MSG_COMMON_ERROR_MESSAGE_14": "세션을 확인하는 동안 오류가 발생했습니다. 로그 아웃 한 후 다시 시도하십시오.",
    "MSG_COMMON_ERROR_MESSAGE_15": "숫자만 입력해 주세요.",
    "MSG_COMMON_ERROR_MESSAGE_16": "잘못된 입력 값입니다.",
    "MSG_COMMON_ERROR_MESSAGE_17": "인증 번호를 다시 입력해 주세요.",
    "MSG_COMMON_ERROR_MESSAGE_18": "인증번호 입력",
    "MSG_COMMON_ERROR_MESSAGE_19": "이메일로 전송된 인증번호 6자리를 입력해 주세요.",
    "MSG_COMMON_ERROR_MESSAGE_20": "죄송합니다. 사용 권한이 없어 페이지 접근이 거부되었습니다.",
    "MSG_COMMON_ERROR_MESSAGE_21": "상세 정보 보기",
    "MSG_COMMON_ERROR_MESSAGE_22": "{{something}}을(를) 찾을 수 없음",
    "MSG_COMMON_ERROR_MESSAGE_23": "찾을 수 없음",
    "MSG_COMMON_ERROR_MESSAGE_24": "제한된 접근",
    "MSG_COMMON_ERROR_MESSAGE_25": "새로운 데이터를 가져 오는 시간이 초과되었습니다. 아래 데이터는 오래되었습니다.",
    "MSG_COMMON_ERROR_MESSAGE_26": "다시 시도하십시오.",
    "MSG_COMMON_ERROR_MESSAGE_27": "클러스터 정책으로 인해 이 섹션을 접근할 수 없습니다.",
    "MSG_COMMON_ERROR_MESSAGE_28": "데이터를 찾을 수 없음",
    "MSG_COMMON_ERROR_MESSAGE_29": "데이터를 불러올 수 없습니다.",
    "MSG_COMMON_ERROR_MESSAGE_30": "이름을 입력해 주세요.",
    "MSG_COMMON_ERROR_MESSAGE_31": "비밀번호를 입력해 주세요.",
    "MSG_COMMON_ERROR_MESSAGE_32": "잘못된 입력 값 입니다.",
    "MSG_COMMON_ERROR_MESSAGE_33": "항목을 선택해 주세요.",
    "MSG_COMMON_ERROR_MESSAGE_34": "플랜을 선택해 주세요.",
    "MSG_COMMON_ERROR_MESSAGE_35": "URL을 입력해 주세요.",
    "MSG_COMMON_ERROR_MESSAGE_36": "키를 입력해 주세요.",
    "MSG_COMMON_ERROR_MESSAGE_37": "값을 입력해 주세요.",
    "MSG_COMMON_ERROR_MESSAGE_38": "한도를 입력해 주세요.",
    "MSG_COMMON_ERROR_MESSAGE_39": "크기를 입력해 주세요.",
    "MSG_COMMON_ERROR_MESSAGE_40": "버전을 입력해 주세요.",
    "MSG_COMMON_ERROR_MESSAGE_41": "서비스 카탈로그에 추가된 서비스 목록에서 새 인스턴스를 작성하십시오.",
    "MSG_COMMON_BUTTON_COMMIT_1": "생성",
    "MSG_COMMON_BUTTON_COMMIT_2": "취소",
    "MSG_COMMON_BUTTON_COMMIT_3": "저장",
    "MSG_COMMON_BUTTON_COMMIT_4": "이전",
    "MSG_COMMON_BUTTON_COMMIT_5": "다음",
    "MSG_COMMON_BUTTON_COMMIT_6": "완료",
    "MSG_COMMON_BUTTON_COMMIT_7": "리뷰 후 생성",
    "MSG_COMMON_BUTTON_COMMIT_8": "추가",
    "MSG_COMMON_BUTTON_COMMIT_9": "승인",
    "MSG_COMMON_BUTTON_COMMIT_10": "거절",
    "MSG_COMMON_BUTTON_COMMIT_11": "승인",
    "MSG_COMMON_BUTTON_COMMIT_12": "거절 ",
    "MSG_COMMON_BUTTON_ETC_1": "클립보드로 복사",
    "MSG_COMMON_BUTTON_ETC_2": "값 표시하기",
    "MSG_COMMON_BUTTON_ETC_3": "값 숨기기",
    "MSG_COMMON_BUTTON_ETC_4": "키/값 추가 ",
    "MSG_COMMON_BUTTON_ETC_5": "키/값 삭제",
    "MSG_COMMON_BUTTON_ETC_6": "자격증명 추가",
    "MSG_COMMON_BUTTON_ETC_7": "자격증명 삭제",
    "MSG_COMMON_BUTTON_ETC_8": "검색…",
    "MSG_COMMON_BUTTON_ETC_9": "생성",
    "MSG_COMMON_BUTTON_ETC_10": "단축키 보기",
    "MSG_COMMON_BUTTON_ETC_11": "사이드바 보기",
    "MSG_COMMON_BUTTON_ETC_12": "다운로드",
    "MSG_COMMON_BUTTON_ETC_13": "리로드",
    "MSG_GNB_SESSION_1": "시간 연장",
    "MSG_GNB_SESSION_2": "세션 만료 시간 변경",
    "MSG_GNB_SESSION_3": "세션 만료 시간",
    "MSG_GNB_SESSION_4": "최소 1분 이상, 최대 720분 이하의 시간 입력 가능",
    "MSG_GNB_SESSION_5": "분",
    "MSG_GNB_SESSION_6": "최소 1분 이상, 최대 720분 이하로 설정할 수 있습니다.",
    "MSG_GNB_SESSION_7": "숫자만 입력할 수 있습니다.",
    "MSG_GNB_SESSION_8": "세션 만료 시간을 입력해 주세요.",
    "MSG_GNB_SESSION_9": "세션 연장",
    "MSG_GNB_SESSION_10": "{{0}}초 뒤에 자동으로 로그아웃 될 예정입니다.\n로그인 상태를 유지하시려면 연장 버튼을 클릭해주세요.",
    "MSG_GNB_NOTIFICATIONS_1": "경고",
    "MSG_GNB_IMPORTYAML_1": "YAML 가져오기",
    "MSG_GNB_MORE_1": "매뉴얼",
    "MSG_GNB_MORE_2": "소개",
    "MSG_GNB_LANGUAGE_1": "한글",
    "MSG_GNB_LANGUAGE_2": "English",
    "MSG_GNB_ACCOUNT_1": "계정 관리",
    "MSG_GNB_ACCOUNT_2": "로그아웃",
    "MSG_LNB_MENU_1": "홈",
    "MSG_LNB_MENU_2": "대시보드",
    "MSG_LNB_MENU_3": "네임스페이스",
    "MSG_LNB_MENU_4": "검색",
    "MSG_LNB_MENU_5": "감사 로그",
    "MSG_LNB_MENU_6": "이벤트",
    "MSG_LNB_MENU_7": "오퍼레이터",
    "MSG_LNB_MENU_8": "오퍼레이터 허브",
    "MSG_LNB_MENU_9": "설치된 오퍼레이터",
    "MSG_LNB_MENU_10": "서비스 카탈로그",
    "MSG_LNB_MENU_11": "서비스 브로커",
    "MSG_LNB_MENU_12": "서비스 클래스",
    "MSG_LNB_MENU_13": "서비스 플랜",
    "MSG_LNB_MENU_14": "클러스터 서비스 브로커",
    "MSG_LNB_MENU_15": "클러스터 서비스 클래스",
    "MSG_LNB_MENU_16": "클러스터 서비스 플랜",
    "MSG_LNB_MENU_17": "서비스 인스턴스",
    "MSG_LNB_MENU_18": "서비스 바인딩",
    "MSG_LNB_MENU_19": "카탈로그 서비스 클레임",
    "MSG_LNB_MENU_20": "템플릿",
    "MSG_LNB_MENU_21": "템플릿 인스턴스",
    "MSG_LNB_MENU_22": "워크로드",
    "MSG_LNB_MENU_23": "파드",
    "MSG_LNB_MENU_24": "디플로이먼트",
    "MSG_LNB_MENU_25": "스테이트풀 셋",
    "MSG_LNB_MENU_26": "시크릿",
    "MSG_LNB_MENU_27": "컨피그 맵",
    "MSG_LNB_MENU_28": "크론 잡",
    "MSG_LNB_MENU_29": "잡",
    "MSG_LNB_MENU_30": "데몬 셋",
    "MSG_LNB_MENU_31": "레플리카 셋",
    "MSG_LNB_MENU_32": "HPAs",
    "MSG_LNB_MENU_33": "가상머신",
    "MSG_LNB_MENU_34": "가상머신 인스턴스",
    "MSG_LNB_MENU_35": "서비스 메시",
    "MSG_LNB_MENU_36": "가상 서비스",
    "MSG_LNB_MENU_37": "목적지 규칙",
    "MSG_LNB_MENU_38": "엔보이 필터",
    "MSG_LNB_MENU_39": "게이트웨이",
    "MSG_LNB_MENU_40": "사이드카",
    "MSG_LNB_MENU_41": "서비스 엔트리",
    "MSG_LNB_MENU_42": "요청 인증",
    "MSG_LNB_MENU_43": "피어 인증",
    "MSG_LNB_MENU_44": "인가 정책",
    "MSG_LNB_MENU_45": "키알리",
    "MSG_LNB_MENU_46": "네트워크",
    "MSG_LNB_MENU_47": "서비스",
    "MSG_LNB_MENU_48": "인그레스",
    "MSG_LNB_MENU_49": "네트워크 정책",
    "MSG_LNB_MENU_50": "스토리지",
    "MSG_LNB_MENU_51": "영구 볼륨",
    "MSG_LNB_MENU_52": "영구 볼륨 클레임",
    "MSG_LNB_MENU_53": "스토리지 클래스",
    "MSG_LNB_MENU_54": "데이터 볼륨",
    "MSG_LNB_MENU_55": "모니터링",
    "MSG_LNB_MENU_56": "CI/CD",
    "MSG_LNB_MENU_57": "태스크",
    "MSG_LNB_MENU_58": "태스크 런",
    "MSG_LNB_MENU_59": "파이프라인",
    "MSG_LNB_MENU_60": "파이프라인 런",
    "MSG_LNB_MENU_61": "파이프라인 승인",
    "MSG_LNB_MENU_62": "파이프라인 리소스",
    "MSG_LNB_MENU_63": "파이프라인 컨디션",
    "MSG_LNB_MENU_64": "AI DevOps",
    "MSG_LNB_MENU_65": "노트북 서버",
    "MSG_LNB_MENU_66": "카티브",
    "MSG_LNB_MENU_67": "KF 서빙",
    "MSG_LNB_MENU_68": "트레이닝 잡",
    "MSG_LNB_MENU_69": "워크플로우 템플릿",
    "MSG_LNB_MENU_70": "워크플로우",
    "MSG_LNB_MENU_71": "이미지 레지스트리",
    "MSG_LNB_MENU_72": "호스트",
    "MSG_LNB_MENU_73": "인증/인가",
    "MSG_LNB_MENU_74": "서비스 계정",
    "MSG_LNB_MENU_75": "롤",
    "MSG_LNB_MENU_76": "롤바인딩",
    "MSG_LNB_MENU_77": "사용자",
    "MSG_LNB_MENU_78": "파드 보안 정책",
    "MSG_LNB_MENU_79": "매니지먼트",
    "MSG_LNB_MENU_80": "리소스 쿼타",
    "MSG_LNB_MENU_81": "제한 범위",
    "MSG_LNB_MENU_82": "사용자 리소스 정의",
    "MSG_LNB_MENU_83": "메뉴 설정",
    "MSG_NNB__1": "네임스페이스 선택…",
    "MSG_MAIN_CREATEBUTTON_1": "{{0}} 생성",
    "MSG_MAIN_ACTIONBUTTON_1": "액션",
    "MSG_MAIN_ACTIONBUTTON_2": "태스크 실행",
    "MSG_MAIN_ACTIONBUTTON_3": "PVC 확장 ",
    "MSG_MAIN_ACTIONBUTTON_4": "레이블 수정",
    "MSG_MAIN_ACTIONBUTTON_5": "어노테이션 수정",
    "MSG_MAIN_ACTIONBUTTON_6": "파드 셀렉터 수정",
    "MSG_MAIN_ACTIONBUTTON_7": "파드 수 수정 ",
    "MSG_MAIN_ACTIONBUTTON_8": "업데이트 전략 수정",
    "MSG_MAIN_ACTIONBUTTON_9": "헬스 체크 수정 ",
    "MSG_MAIN_ACTIONBUTTON_10": "병렬성 수정",
    "MSG_MAIN_ACTIONBUTTON_11": "상태 수정",
    "MSG_MAIN_ACTIONBUTTON_12": "롤아웃 중단",
    "MSG_MAIN_ACTIONBUTTON_13": "스토리지 추가",
    "MSG_MAIN_ACTIONBUTTON_14": "헬스 체크 추가",
    "MSG_MAIN_ACTIONBUTTON_15": "{{0}} 수정",
    "MSG_MAIN_ACTIONBUTTON_16": "{{0}} 삭제",
    "MSG_MAIN_TABLEHEADER_1": "이름",
    "MSG_MAIN_TABLEHEADER_2": "네임스페이스",
    "MSG_MAIN_TABLEHEADER_3": "상태",
    "MSG_MAIN_TABLEHEADER_4": "URL",
    "MSG_MAIN_TABLEHEADER_5": "바인딩 가능한 ",
    "MSG_MAIN_TABLEHEADER_6": "외부 이름 ",
    "MSG_MAIN_TABLEHEADER_7": "서비스 브로커",
    "MSG_MAIN_TABLEHEADER_8": "서비스 클래스",
    "MSG_MAIN_TABLEHEADER_9": "준비",
    "MSG_MAIN_TABLEHEADER_10": "재시작",
    "MSG_MAIN_TABLEHEADER_11": "소유자",
    "MSG_MAIN_TABLEHEADER_12": "생성 시간",
    "MSG_MAIN_TABLEHEADER_13": "클레임",
    "MSG_MAIN_TABLEHEADER_14": "용량",
    "MSG_MAIN_TABLEHEADER_15": "레이블",
    "MSG_MAIN_TABLEHEADER_16": "파드 선택기",
    "MSG_MAIN_TABLEHEADER_17": "타입",
    "MSG_MAIN_TABLEHEADER_18": "크기",
    "MSG_MAIN_TABLEHEADER_19": "스케줄",
    "MSG_MAIN_TABLEHEADER_20": "동시 실행 정책",
    "MSG_MAIN_TABLEHEADER_21": "마감시간(초) 시작",
    "MSG_MAIN_TABLEHEADER_22": "완료",
    "MSG_MAIN_TABLEHEADER_23": "대상 스케일",
    "MSG_MAIN_TABLEHEADER_24": "최소 파드 수",
    "MSG_MAIN_TABLEHEADER_25": "최대 파드 수",
    "MSG_MAIN_TABLEHEADER_26": "외부 IP",
    "MSG_MAIN_TABLEHEADER_27": "위치",
    "MSG_MAIN_TABLEHEADER_28": "호스트",
    "MSG_MAIN_TABLEHEADER_29": "영구 볼륨",
    "MSG_MAIN_TABLEHEADER_30": "프로비저너",
    "MSG_MAIN_TABLEHEADER_31": "반환 정책",
    "MSG_MAIN_TABLEHEADER_32": "기본 클래스",
    "MSG_MAIN_TABLEHEADER_33": "서비스 인스턴스",
    "MSG_MAIN_TABLEHEADER_34": "시크릿",
    "MSG_MAIN_TABLEHEADER_35": "신청 날짜",
    "MSG_MAIN_TABLEHEADER_36": "객체 수",
    "MSG_MAIN_TABLEHEADER_37": "파라미터 수",
    "MSG_CREATEYAML_DIV1_1": "",
    "MSG_CREATEYAML_DIV1_DESCRIPTION_1": "YAML 또는 JSON 정의를 수동으로 입력하거나 편집기에 파일을 드래그 앤 드롭하여 생성하십시오.",
    "MSG_CREATEYAML_DIV3_TABSCHEMA_1": "스키마",
    "MSG_CREATEYAML_DIV3_TABSAMPLE_1": "샘플",
    "MSG_DETAILS_TABDETAILS_DETAILS_1": "{{0}} 상세",
    "MSG_DETAILS_TABDETAILS_DETAILS_2": "{{0}} 파드",
    "MSG_DETAILS_TABDETAILS_DETAILS_3": "파드 수 증가",
    "MSG_DETAILS_TABDETAILS_DETAILS_4": "파드 수 감소",
    "MSG_DETAILS_TABDETAILS_DETAILS_5": "이름",
    "MSG_DETAILS_TABDETAILS_DETAILS_6": "네임스페이스",
    "MSG_DETAILS_TABDETAILS_DETAILS_7": "타입",
    "MSG_DETAILS_TABDETAILS_DETAILS_8": "레이블",
    "MSG_DETAILS_TABDETAILS_DETAILS_9": "파드 선택기",
    "MSG_DETAILS_TABDETAILS_DETAILS_10": "노드 선택기",
    "MSG_DETAILS_TABDETAILS_DETAILS_11": "톨러레이션",
    "MSG_DETAILS_TABDETAILS_DETAILS_12": "어노테이션",
    "MSG_DETAILS_TABDETAILS_DETAILS_13": "상태",
    "MSG_DETAILS_TABDETAILS_DETAILS_14": "최신",
    "MSG_DETAILS_TABDETAILS_DETAILS_15": "URL",
    "MSG_DETAILS_TABDETAILS_DETAILS_16": "바인딩 가능한 ",
    "MSG_DETAILS_TABDETAILS_DETAILS_17": "외부 이름 ",
    "MSG_DETAILS_TABDETAILS_DETAILS_18": "서비스 브로커",
    "MSG_DETAILS_TABDETAILS_DETAILS_19": "서비스 클래스",
    "MSG_DETAILS_TABDETAILS_DETAILS_20": "상태",
    "MSG_DETAILS_TABDETAILS_DETAILS_21": "재시작 정책",
    "MSG_DETAILS_TABDETAILS_DETAILS_22": "활성화 마감시간(초)",
    "MSG_DETAILS_TABDETAILS_DETAILS_23": "파드 IP",
    "MSG_DETAILS_TABDETAILS_DETAILS_24": "노드",
    "MSG_DETAILS_TABDETAILS_DETAILS_25": "업데이트 전략",
    "MSG_DETAILS_TABDETAILS_DETAILS_26": "최대 비가용",
    "MSG_DETAILS_TABDETAILS_DETAILS_27": "최대 증가율",
    "MSG_DETAILS_TABDETAILS_DETAILS_28": "진행 마감시간(초)",
    "MSG_DETAILS_TABDETAILS_DETAILS_29": "최소 준비시간(초)",
    "MSG_DETAILS_TABDETAILS_DETAILS_30": "스케줄",
    "MSG_DETAILS_TABDETAILS_DETAILS_31": "동시 실행 정책",
    "MSG_DETAILS_TABDETAILS_DETAILS_32": "마감시간(초) 시작",
    "MSG_DETAILS_TABDETAILS_DETAILS_33": "설정하지 않음",
    "MSG_DETAILS_TABDETAILS_DETAILS_34": "마지막 스케줄 시간",
    "MSG_DETAILS_TABDETAILS_DETAILS_35": "의도한 완료",
    "MSG_DETAILS_TABDETAILS_DETAILS_36": "병렬성",
    "MSG_DETAILS_TABDETAILS_DETAILS_37": "활성화 마감시간(초)",
    "MSG_DETAILS_TABDETAILS_DETAILS_38": "현재 수",
    "MSG_DETAILS_TABDETAILS_DETAILS_39": "의도한 수",
    "MSG_DETAILS_TABDETAILS_DETAILS_40": "세션 어피니티",
    "MSG_DETAILS_TABDETAILS_DETAILS_41": "디플로이먼트 리비전",
    "MSG_DETAILS_TABDETAILS_DETAILS_42": "TLS 인증서",
    "MSG_DETAILS_TABDETAILS_DETAILS_43": "생성 시간",
    "MSG_DETAILS_TABDETAILS_DETAILS_44": "소유자",
    "MSG_DETAILS_TABDETAILS_DETAILS_45": "상태",
    "MSG_DETAILS_TABDETAILS_DETAILS_46": "재시작 정책",
    "MSG_DETAILS_TABDETAILS_DETAILS_47": "활성화 마감시간(초)",
    "MSG_DETAILS_TABDETAILS_DETAILS_48": "파드 IP",
    "MSG_DETAILS_TABDETAILS_DETAILS_49": "노드",
    "MSG_DETAILS_TABDETAILS_DETAILS_50": "프로비저너",
    "MSG_DETAILS_TABDETAILS_DETAILS_51": "반환 정책",
    "MSG_DETAILS_TABDETAILS_DETAILS_52": "기본 클래스",
    "MSG_DETAILS_TABDETAILS_DETAILS_53": "볼륨 바인딩 모드",
    "MSG_DETAILS_TABDETAILS_DETAILS_54": "대상 스케일",
    "MSG_DETAILS_TABDETAILS_DETAILS_55": "최소 리플리카 수",
    "MSG_DETAILS_TABDETAILS_DETAILS_56": "최대 리플리카 수",
    "MSG_DETAILS_TABDETAILS_DETAILS_57": "마지막 스케줄 시간",
    "MSG_DETAILS_TABDETAILS_DETAILS_58": "현재 리플리카 수",
    "MSG_DETAILS_TABDETAILS_DETAILS_59": "의도한 리플리카 수",
    "MSG_DETAILS_TABDETAILS_DETAILS_60": "용량",
    "MSG_DETAILS_TABDETAILS_DETAILS_61": "접근 모드",
    "MSG_DETAILS_TABDETAILS_DETAILS_62": "볼륨 모드",
    "MSG_DETAILS_TABDETAILS_DETAILS_63": "스토리지 클래스",
    "MSG_DETAILS_TABDETAILS_DETAILS_64": "퍼시스턴트 볼륨",
    "MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_1": "컨테이너",
    "MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_2": "이름",
    "MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_3": "이미지",
    "MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_4": "상태 ",
    "MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_5": "재시작",
    "MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_6": "시작",
    "MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_7": "종료",
    "MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_8": "종료 모드",
    "MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_9": "이름",
    "MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_10": "이미지",
    "MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_11": "리소스 제한",
    "MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_12": "포트",
    "MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_1": "볼륨",
    "MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_2": "이름",
    "MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_3": "마운트 경로",
    "MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_4": "하위 경로",
    "MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_5": "타입",
    "MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_6": "권한",
    "MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_7": "사용자",
    "MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_8": "볼륨 제거",
    "MSG_DETAILS_TABDETAILS_METRICS_TABLEHEADER_1": "메트릭",
    "MSG_DETAILS_TABDETAILS_METRICS_TABLEHEADER_2": "타입",
    "MSG_DETAILS_TABDETAILS_METRICS_TABLEHEADER_3": "(요청 비율)",
    "MSG_DETAILS_TABDETAILS_METRICS_TABLEHEADER_4": "현재",
    "MSG_DETAILS_TABDETAILS_METRICS_TABLEHEADER_5": "대상",
    "MSG_DETAILS_TABDETAILS_CONDITIONS_1": "조건",
    "MSG_DETAILS_TABDETAILS_CONDITIONS_2": "조건을 찾을 수 없음",
    "MSG_DETAILS_TABDETAILS_CONDITIONS_TABLEHEADER_2": "타입",
    "MSG_DETAILS_TABDETAILS_CONDITIONS_TABLEHEADER_3": "상태",
    "MSG_DETAILS_TABDETAILS_CONDITIONS_TABLEHEADER_4": "업데이트",
    "MSG_DETAILS_TABDETAILS_CONDITIONS_TABLEHEADER_5": "원인",
    "MSG_DETAILS_TABDETAILS_CONDITIONS_TABLEHEADER_6": "메시지 ",
    "MSG_DETAILS_TABDETAILS_INGRESSRULES_1": "인그레스 규칙",
    "MSG_DETAILS_TABDETAILS_INGRESSRULES_2": "라우팅 계층 (인그레스 컨트롤러)에서 해당 규칙을 처리하며, 규칙 수정에 따라 라우팅 계층도 업데이트됩니다. 인그레스 컨트롤러는 헤더 및 기타 메타 데이터가 전달되거나 조작되는 방법을 정의합니다.",
    "MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_1": "호스트",
    "MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_2": "경로",
    "MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_3": "서비스",
    "MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_4": "서비스 포트",
    "MSG_DETAILS_TABDETAILS_DATA_1": "데이터",
    "MSG_DETAILS_TABENVIRONMENT_1": "부모로부터 상속받은 환경변수",
    "MSG_DETAILS_TABENVIRONMENT_2": "리소스에 대한 환경 확인",
    "MSG_DETAILS_TABENVIRONMENT_3": "컨테이너:",
    "MSG_DETAILS_TABENVIRONMENT_4": "단일 변수(env)",
    "MSG_DETAILS_TABENVIRONMENT_5": "이름",
    "MSG_DETAILS_TABENVIRONMENT_6": "값",
    "MSG_DETAILS_TABENVIRONMENT_7": "기존  컨피그맵이나 시트릿의 모든 값(envFrom)",
    "MSG_DETAILS_TABENVIRONMENT_8": "컨피그맵/시크릿",
    "MSG_DETAILS_TABENVIRONMENT_9": "접두사 (선택사항)",
    "MSG_DETAILS_TABLOGS_1": "다운로드",
    "MSG_DETAILS_TABLOGS_2": "확장",
    "MSG_DETAILS_TABLOGS_3": "해당 {{something}}의 로그가 오래되었을 수 있습니다.",
    "MSG_DETAILS_TABLOGS_4": "요청된 로그를 검색하는 중에 오류가 발생했습니다.",
    "MSG_DETAILS_TABLOGS_5": "자동",
    "MSG_DETAILS_TABLOGS_6": "불러오는 중",
    "MSG_DETAILS_TABLOGS_7": "로그 로드 중",
    "MSG_DETAILS_TABLOGS_8": "로그",
    "MSG_DETAILS_TABLOGS_9": "로그 스트림이 종료되었습니다.",
    "MSG_DETAILS_TABLOGS_10": "로그 스트림이 일시 정지되었습니다.",
    "MSG_DETAILS_TABLOGS_11": "로그 스트리밍 중",
    "MSG_DETAILS_TABLOGS_12": "일시 정지됨",
    "MSG_DETAILS_TABLOGS_13": "새로 고침",
    "MSG_DETAILS_TABLOGS_14": "다시 시작하는 중",
    "MSG_DETAILS_TABLOGS_15": "재시도",
    "MSG_DETAILS_TABLOGS_16": "실행 중",
    "MSG_DETAILS_TABLOGS_17": "스트리밍 중",
    "MSG_DETAILS_TABLOGS_18": "종료됨",
    "MSG_DETAILS_TABLOGS_19": "대기 중",
    "MSG_DETAILS_TABEVENTS_1": "이벤트 스트림에 연결하는 중 오류 발생: 연결이 제대로 종료되지 않았습니다.",
    "MSG_DETAILS_TABEVENTS_2": "{{0}} 이벤트 표기",
    "MSG_DETAILS_TABEVENTS_3": "이벤트 로드 오류",
    "MSG_DETAILS_TABEVENTS_4": "이벤트 검색 중 오류가 발생함. 다시 연결하는 중…",
    "MSG_DETAILS_TABTERMINAL_1": "연결 ",
    "MSG_DETAILS_TABTERMINAL_2": "터미널 연결이 종료되었습니다. ",
    "MSG_DETAILS_TABREPLICASETS_1": "이름",
    "MSG_DETAILS_TABREPLICASETS_2": "네임스페이스",
    "MSG_DETAILS_TABREPLICASETS_3": "상태",
    "MSG_DETAILS_TABREPLICASETS_4": "레이블",
    "MSG_DETAILS_TABREPLICASETS_5": "소유자",
    "MSG_DETAILS_TABREPLICASETS_6": "생성",
    "MSG_DETAILS_TABTRAFFIC_1": "트래픽 ",
    "MSG_DETAILS_TABTRAFFIC_2": "보고됨",
    "MSG_DETAILS_TABTRAFFIC_3": "목적지 ",
    "MSG_DETAILS_TABTRAFFIC_4": "소스",
    "MSG_DETAILS_TABTRAFFIC_5": "서버 요청 볼륨",
    "MSG_DETAILS_TABTRAFFIC_6": "서버 요청 기간",
    "MSG_DETAILS_TABTRAFFIC_7": "요청 크기",
    "MSG_DETAILS_TABTRAFFIC_8": "응답 크기",
    "MSG_DETAILS_TABTRAFFIC_9": "TCP 수신됨",
    "MSG_DETAILS_TABTRAFFIC_10": "TCP 송신됨",
    "MSG_DETAILS_TABTRAFFIC_11": "일치하는 데이터가 없음",
    "MSG_DETAILS_TABTRACE_1": "트레이스",
    "MSG_DETAILS_TABTRACE_2": "리밋 레인지",
    "MSG_DETAILS_TABTRACE_3": "모두",
    "MSG_DETAILS_TABTRACE_4": "상태 코드",
    "MSG_DETAILS_TABTRACE_5": "표시",
    "MSG_DETAILS_TABTRACE_6": "트레이스 결과 없음. 다른 쿼리를 시도하십시오.",
    "MSG_MAIN_TABLEHEADER_38": "이미지",
    "MSG_DETAILS_TABIMAGES_IMAGES_TABLEHEADER_1": "이름",
    "MSG_DETAILS_TABIMAGES_IMAGES_TABLEHEADER_2": "네임스페이스",
    "MSG_DETAILS_TABIMAGES_IMAGES_TABLEHEADER_3": "이미지",
    "MSG_DETAILS_TABIMAGES_IMAGES_TABLEHEADER_4": "생성",
    "MSG_DETAILS_TABIMAGES_IMAGES_TABLEHEADER_5": "크기",
    "MSG_MAIN_TABLEHEADER_39": "OS 업데이트",
    "MSG_MAIN_TABLEHEADER_40": "호스트 IP",
    "MSG_DETAILS_TABDETAILS_DETAILS_65": "외부 ID",
    "MSG_DETAILS_TABDETAILS_DETAILS_66": "노드 주소",
    "MSG_DETAILS_TABDETAILS_DETAILS_67": "노드 레이블",
    "MSG_DETAILS_TABDETAILS_DETAILS_68": "프로바이더 ID",
    "MSG_DETAILS_TABDETAILS_DETAILS_69": "운영 체제",
    "MSG_DETAILS_TABDETAILS_DETAILS_70": "아키텍처",
    "MSG_DETAILS_TABDETAILS_DETAILS_71": "커널 버전",
    "MSG_DETAILS_TABDETAILS_DETAILS_72": "부트 ID",
    "MSG_DETAILS_TABDETAILS_DETAILS_73": "컨테이너 런타임",
    "MSG_DETAILS_TABDETAILS_DETAILS_74": "kubelet 버전",
    "MSG_DETAILS_TABDETAILS_DETAILS_75": "kube-proxy 버전",
    "MSG_DETAILS_TABDETAILS_DETAILS_76": "RAM",
    "MSG_DETAILS_TABDETAILS_DETAILS_77": "CPU",
    "MSG_DETAILS_TABDETAILS_DETAILS_78": "파드 수",
    "MSG_DETAILS_TABDETAILS_DETAILS_79": "네트워크 인",
    "MSG_DETAILS_TABDETAILS_DETAILS_80": "네트워크 아웃",
    "MSG_DETAILS_TABDETAILS_DETAILS_81": "파일 시스템",
    "MSG_DETAILS_TABDETAILS_NODECONDITIONS_1": "노드 상태",
    "MSG_DETAILS_TABDETAILS_NODECONDITIONS_TABLEHEADER_1": "타입",
    "MSG_DETAILS_TABDETAILS_NODECONDITIONS_TABLEHEADER_2": "상태",
    "MSG_DETAILS_TABDETAILS_NODECONDITIONS_TABLEHEADER_3": "원인",
    "MSG_DETAILS_TABDETAILS_NODECONDITIONS_TABLEHEADER_4": "업데이트",
    "MSG_DETAILS_TABDETAILS_NODECONDITIONS_TABLEHEADER_5": "변경",
    "MSG_DETAILS_TABDETAILS_SECRETS_1": "시크릿",
    "MSG_DETAILS_TABDETAILS_SECRETS_TABLEHEADER_1": "이름",
    "MSG_DETAILS_TABDETAILS_SECRETS_TABLEHEADER_2": "네임스페이스",
    "MSG_DETAILS_TABDETAILS_SECRETS_TABLEHEADER_3": "타입",
    "MSG_DETAILS_TABDETAILS_SECRETS_TABLEHEADER_4": "크기",
    "MSG_DETAILS_TABDETAILS_SECRETS_TABLEHEADER_5": "생성",
    "MSG_MAIN_ACTIONBUTTON_17": "롤바인딩 추가",
    "MSG_DETAILS_TABDETAILS_RULES_1": "규칙",
    "MSG_DETAILS_TABDETAILS_RULES_TABLEHEADER_1": "액션",
    "MSG_DETAILS_TABDETAILS_RULES_TABLEHEADER_2": "API 그룹",
    "MSG_DETAILS_TABDETAILS_RULES_TABLEHEADER_3": "리소스",
    "MSG_DETAILS_TABROLEBINDINGS_TABLEHEADER_1": "이름 ",
    "MSG_DETAILS_TABROLEBINDINGS_TABLEHEADER_2": "RoleRef",
    "MSG_DETAILS_TABROLEBINDINGS_TABLEHEADER_3": "대상 유형",
    "MSG_DETAILS_TABROLEBINDINGS_TABLEHEADER_4": "대상 이름",
    "MSG_DETAILS_TABROLEBINDINGS_TABLEHEADER_5": "네임스페이스",
    "MSG_MAIN_TABLEHEADER_41": "이름 ",
    "MSG_MAIN_TABLEHEADER_42": "RoleRef",
    "MSG_MAIN_TABLEHEADER_43": "대상 유형",
    "MSG_MAIN_TABLEHEADER_44": "대상 이름 ",
    "MSG_MAIN_TABLEHEADER_45": "테이블스페이스",
    "MSG_MAIN_ACTIONBUTTON_18": "사용자 ",
    "MSG_MAIN_ACTIONBUTTON_19": "클러스터 롤 바인딩 복사",
    "MSG_MAIN_ACTIONBUTTON_20": "롤바인딩 이름",
    "MSG_MAIN_TABLEHEADER_46": "특권 보유 여부",
    "MSG_MAIN_TABLEHEADER_47": "보안 강화 리눅스",
    "MSG_MAIN_TABLEHEADER_48": "사용자로 실행",
    "MSG_MAIN_TABLEHEADER_49": "파일 스토리지 그룹",
    "MSG_MAIN_TABLEHEADER_50": "보충 그룹",
    "MSG_DETAILS_TABDETAILS_DETAILS_82": "특권 보유 여부",
    "MSG_DETAILS_TABDETAILS_DETAILS_83": "보안 강화 리눅스",
    "MSG_DETAILS_TABDETAILS_DETAILS_84": "사용자로 실행",
    "MSG_DETAILS_TABDETAILS_DETAILS_85": "파일 스토리지 그룹",
    "MSG_DETAILS_TABDETAILS_DETAILS_86": "보충 그룹",
    "MSG_MAIN_TABLEHEADER_51": "리소스 쿼타 이름",
    "MSG_DETAILS_TABDETAILS_DETAILS_87": "CPU 요청",
    "MSG_DETAILS_TABDETAILS_DETAILS_88": "CPU 제한",
    "MSG_DETAILS_TABDETAILS_DETAILS_89": "메모리 요청",
    "MSG_DETAILS_TABDETAILS_DETAILS_90": "메모리 제한 ",
    "MSG_DETAILS_TABDETAILS_RESOURCEQUOTADETAILS_1": "리소스 쿼타 상세",
    "MSG_DETAILS_TABDETAILS_RESOURCEQUOTADETAILS_DESCRIPTION_1": "요청은 사용할 것으로 예상되는 리소스의 양입니다. 클러스터가 사용자의 요청을 충족할 수 있는지 여부를 확인할 때 이러한 항목이 사용됩니다.\n제한은 사용자가 사용할 수 있는 최대 리소스 양입니다. 제한치 이상을 소비하는 애플리케이션은 종료될 수 있습니다.\n\n클러스터 관리자는 리소스 쿼타를 사용하여 리소스 요청/제한 모두를 설정할 수 있습니다.",
    "MSG_DETAILS_TABDETAILS_RESOURCEQUOTADETAILS_TABLEHEADER_1": "리소스 타입",
    "MSG_DETAILS_TABDETAILS_RESOURCEQUOTADETAILS_TABLEHEADER_2": "용량",
    "MSG_DETAILS_TABDETAILS_RESOURCEQUOTADETAILS_TABLEHEADER_3": "사용",
    "MSG_DETAILS_TABDETAILS_RESOURCEQUOTADETAILS_TABLEHEADER_4": "최대",
    "MSG_DETAILS_TABDETAILS_LIMITS_1": "제한",
    "MSG_DETAILS_TABDETAILS_LIMITS_TABLEHEADER_1": "타입",
    "MSG_DETAILS_TABDETAILS_LIMITS_TABLEHEADER_2": "리소스",
    "MSG_DETAILS_TABDETAILS_LIMITS_TABLEHEADER_3": "최소",
    "MSG_DETAILS_TABDETAILS_LIMITS_TABLEHEADER_4": "최대",
    "MSG_DETAILS_TABDETAILS_LIMITS_TABLEHEADER_5": "기본 요청",
    "MSG_DETAILS_TABDETAILS_LIMITS_TABLEHEADER_6": "기본 제한",
    "MSG_DETAILS_TABDETAILS_LIMITS_TABLEHEADER_7": "최대 제한/요청 비율",
    "MSG_MAIN_TABLEHEADER_52": "그룹",
    "MSG_MAIN_TABLEHEADER_53": "버전",
    "MSG_MAIN_TABLEHEADER_54": "네임스페이스 설정된",
    "MSG_MAIN_TABLEHEADER_55": "연결됨",
    "MSG_MAIN_ACTIONBUTTON_21": "인스턴스 확인",
    "MSG_DETAILS_TABDETAILS_DETAILS_91": "연결됨",
    "MSG_DETAILS_TABDETAILS_DETAILS_92": "그룹",
    "MSG_DETAILS_TABDETAILS_DETAILS_93": "버전",
    "MSG_DETAILS_TABDETAILS_DETAILS_94": "범위",
    "MSG_DETAILS_TABINSTANCES_TABLEHEADER_1": "이름",
    "MSG_DETAILS_TABINSTANCES_TABLEHEADER_2": "네임스페이스",
    "MSG_DETAILS_TABINSTANCES_TABLEHEADER_3": "레이블",
    "MSG_DETAILS_TABINSTANCES_TABLEHEADER_4": "버전",
    "MSG_DETAILS_TABINSTANCES_TABLEHEADER_5": "노드 셀렉터",
    "MSG_MAIN_TABLEHEADER_56": "구독 기간",
    "MSG_MAIN_TABLEHEADER_57": "사용자 이름",
    "MSG_DETAILS_TABDETAILS_DETAILS_95": "기본 풀 (Pull) 시크릿",
    "MSG_DETAILS_TABDETAILS_DETAILS_96": "네트워크 정책",
    "MSG_LNB_MENU_84": "클러스터",
    "MSG_LNB_MENU_85": "클러스터 그룹",
    "MSG_LNB_MENU_86": "페더레이션",
    "MSG_MAIN_DIV1_1": "클러스터",
    "MSG_MAIN_BUTTON_1": "클러스터 추가",
    "MSG_MAIN_BUTTON_2": "클러스터 생성",
    "MSG_GNB_LANGUAGE_SELECTED_1": "한글",
    "MSG_GNB_LANGUAGE_SELECTED_2": "English",
    "MSG_MAIN_BUTTON_3": "클러스터 등록",
    "MSG_MAIN_FILTER_1": "생성 중",
    "MSG_MAIN_FILTER_2": "준비",
    "MSG_MAIN_TABLEHEADER_58": "이름",
    "MSG_MAIN_TABLEHEADER_59": "프로바이더",
    "MSG_MAIN_TABLEHEADER_60": "타입",
    "MSG_MAIN_TABLEHEADER_61": "상태",
    "MSG_MAIN_TABLEHEADER_62": "버전",
    "MSG_MAIN_TABLEHEADER_63": "노드",
    "MSG_MAIN_TABLEHEADER_64": "CPU",
    "MSG_MAIN_TABLEHEADER_65": "메모리",
    "MSG_MAIN_TABLEHEADER_66": "디스크",
    "MSG_MAIN_TABLEHEADER_67": "파드",
    "MSG_MAIN_ACTIONBUTTON_22": "클러스터 콘솔로 이동",
    "MSG_MAIN_ACTIONBUTTON_23": "클러스터 삭제",
    "MSG_MAIN_ACTIONBUTTON_24": "클러스터 등록 해제",
    "MSG_DETAILS_TABOVERVIEW_1": "개요",
    "MSG_DETAILS_TABDETAILS_1": "프로바이더",
    "MSG_DETAILS_TABDETAILS_2": "타입",
    "MSG_DETAILS_TABDETAILS_3": "생성",
    "MSG_DETAILS_TABDETAILS_4": "등록",
    "MSG_COMMON_FILTER_3": "마스터",
    "MSG_COMMON_FILTER_4": "워커",
    "MSG_DETAILS_TABNODE_1": "노드",
    "MSG_DETAILS_TABNODE_TABLEHEADER_1": "이름",
    "MSG_DETAILS_TABNODE_TABLEHEADER_2": "타입",
    "MSG_DETAILS_TABNODE_TABLEHEADER_3": "CPU",
    "MSG_DETAILS_TABNODE_TABLEHEADER_4": "메모리",
    "MSG_DETAILS_TABNODE_TABLEHEADER_5": "임시 저장소",
    "MSG_DETAILS_TABNODE_TABLECONTENTS_1": "마스터",
    "MSG_DETAILS_TABNODE_TABLECONTENTS_2": "워커",
    "MSG_DETAILS_TABFEDERATION_1": "페더레이션",
    "MSG_DETAILS_TABFEDERATION_2": "배포 현황",
    "MSG_COMMON_FILTER_5": "성공",
    "MSG_COMMON_FILTER_6": "실패",
    "MSG_DETAILS_TABFEDERATION_TABLEHEADER_1": "리소스 이름",
    "MSG_DETAILS_TABFEDERATION_TABLEHEADER_2": "타입",
    "MSG_DETAILS_TABFEDERATION_TABLEHEADER_3": "배포 시간",
    "MSG_DETAILS_TABFEDERATION_TABLECONTENTS_1": "페더레이티드 {{0}}",
    "MSG_MAIN_DIV1_2": "클러스터 그룹",
    "MSG_MAIN_TABLEHEADER_68": "배포 준비 상태",
    "MSG_MAIN_TABLEHEADER_69": "클러스터 이름",
    "MSG_DETAILS_TABOVERVIEW_2": "클러스터 수",
    "MSG_DETAILS_TABCLUSTER_1": "클러스터",
    "MSG_DETAILS_TABCLUSTER_ACTIONBUTTON_1": "클러스터 그룹에서 제거",
    "MSG_MAIN_DIV1_3": "페더레이티드 {{0}}",
    "MSG_COMMON_BUTTON_1": "페더레이티드 {{0}} 생성 및 배포",
    "MSG_MAIN_ACTIONBUTTON_25": "페더레이티드 {{0}} 수정",
    "MSG_MAIN_ACTIONBUTTON_26": "페더레이티드 {{0}} 배포",
    "MSG_MAIN_ACTIONBUTTON_27": "페더레이티드 {{0}} 삭제",
    "MSG_COMMON_BUTTON_2": "생성 및 배포",
    "MSG_DETAILS_TABOVERVIEW_3": "상세",
    "MSG_DETAILS_TABOVERVIEW_4": "페더레이티드 {{0}} 상세",
    "MSG_DETAILS_TABOVERVIEW_5": "마지막 배포 시간",
    "MSG_DETAILS_TABOVERVIEW_DIV2_1": "배포 현황",
    "MSG_DETAILS_TABOVERVIEW_TABLEHEADER_1": "리소스 이름",
    "MSG_DETAILS_TABOVERVIEW_TABLEHEADER_2": "클러스터 이름",
    "MSG_DETAILS_TABOVERVIEW_TABLEHEADER_3": "배포 시간",
    "MSG_LNB_MENU_87": "볼륨 스냅샷",
    "MSG_LNB_MENU_88": "볼륨 스냅샷 클래스",
    "MSG_LNB_MENU_89": "볼륨 스냅샷 컨텐츠",
    "MSG_LNB_MENU_90": "개요",
    "MSG_LNB_MENU_91": "이미지 서명자",
    "MSG_LNB_MENU_92": "이미지 서명 요청",
    "MSG_LNB_MENU_93": "이미지 복제",
    "MSG_MAIN_TABLEHEADER_70": "스토리지 크기",
    "MSG_MAIN_TABLEHEADER_71": "소속",
    "MSG_MAIN_TABLEHEADER_72": "이메일",
    "MSG_MAIN_TABLEHEADER_73": "연락처",
    "MSG_MAIN_TABLEHEADER_74": "서명자",
    "MSG_MAIN_TABLEHEADER_75": "소스 레지스트리 타입",
    "MSG_MAIN_TABLEHEADER_76": "타겟 레지스트리 타입",
    "MSG_DETAILS_TABDETAILS_5": "이미지",
    "MSG_DETAILS_TABDETAILS_6": "스토리지 크기",
    "MSG_DETAILS_TABDETAILS_RESOURCES_1": "리소스",
    "MSG_DETAILS_TABDETAILS_RESOURCES_TABLEHEADER_1": "리소스",
    "MSG_DETAILS_TABDETAILS_RESOURCES_TABLEHEADER_2": "리소스 이름",
    "MSG_DETAILS_TABDETAILS_RESOURCES_TABLEHEADER_3": "상태",
    "MSG_DETAILS_TABDETAILS_RESOURCES_STATUS_1": "정상",
    "MSG_DETAILS_TABDETAILS_RESOURCES_STATUS_2": "비정상",
    "MSG_DETAILS_TABREPOSITORIES_1": "리포지터리",
    "MSG_DETAILS_TABREPOSITORIES_TABLEHEADER_1": "서명자",
    "MSG_DETAILS_TABREPOSITORIES_ACTIONBUTTON_1": "태그 삭제",
    "MSG_DETAILS_TABNOTARY_1": "노터리",
    "MSG_DETAILS_TABNOTARY_2": "인증/인가 설정",
    "MSG_DETAILS_TABNOTARY_3": "서비스 타입",
    "MSG_DETAILS_TABNOTARY_4": "로드밸런서",
    "MSG_DETAILS_TABNOTARY_5": "컨디션",
    "MSG_DETAILS_TABDETAILS_7": "소속",
    "MSG_DETAILS_TABDETAILS_8": "이메일",
    "MSG_DETAILS_TABDETAILS_9": "연락처",
    "MSG_DETAILS_TABDETAILS_10": "설명",
    "MSG_DETAILS_TABSIGNERKEY_1": "서명자 키",
    "MSG_DETAILS_TABSIGNERKEY_2": "값 표시하기",
    "MSG_DETAILS_TABSIGNERKEY_3": "값 숨기기",
    "MSG_DETAILS_TABSIGNERKEY_4": "루트 아이디",
    "MSG_DETAILS_TABSIGNERKEY_5": "루트 키",
    "MSG_DETAILS_TABSIGNERKEY_6": "루트 비밀번호",
    "MSG_DETAILS_TABSIGNERKEY_7": "클립보드에 복사",
    "MSG_DETAILS_TABSIGNERKEY_8": "복사됨",
    "MSG_DETAILS_TABSIGNERKEY_TARGETS_1": "타겟",
    "MSG_DETAILS_TABSIGNERKEY_TARGETS_TABLEHEADER_1": "아이디",
    "MSG_DETAILS_TABSIGNERKEY_TARGETS_TABLEHEADER_2": "키",
    "MSG_DETAILS_TABSIGNERKEY_TARGETS_TABLEHEADER_3": "비밀번호",
    "MSG_DETAILS_TABDETAILS_11": "소스 이미지",
    "MSG_DETAILS_TABDETAILS_12": "이미지 풀 시크릿",
    "MSG_DETAILS_TABDETAILS_13": "타겟 이미지",
    "MSG_DETAILS_TABDETAILS_14": "이미지 푸시 시크릿",
    "MSG_DETAILS_TABDETAILS_15": "인증서",
    "MSG_LNB_MENU_CONSOLE_1": "콘솔",
    "MSG_LNB_MENU_CONSOLE_2": "클러스터",
    "MSG_LNB_MENU_CONSOLE_LIST_1": "싱글 클러스터",
    "MSG_LNB_MENU_CONSOLE_LIST_2": "멀티 클러스터",
    "MSG_COMMON_BUTTON_ETC_14": "되돌리기",
    "MSG_COMMON_BUTTON_ETC_15": "시작",
    "MSG_DETAILS_TABDETAILS_DETAILS_97": "소유자 없음",
    "MSG_LNB_MENU_94": "클러스터 태스크",
    "MSG_COMMON_STATUS_12": "실패",
    "MSG_COMMON_STATUS_13": "취소",
    "MSG_MAIN_TABLEHEADER_77": "마지막 실행",
    "MSG_MAIN_TABLEHEADER_78": "태스크 상태",
    "MSG_MAIN_TABLEHEADER_79": "마지막 실행 상태",
    "MSG_MAIN_TABLEHEADER_80": "마지막 실행 시작",
    "MSG_MAIN_ACTIONBUTTON_28": "시작",
    "MSG_MAIN_ACTIONBUTTON_29": "마지막 실행 시작",
    "MSG_DETAILS_TABDETAILS_DETAILS_98": "태스크",
    "MSG_DETAILS_TABPIPELINERUNS_1": "파이프라인 런",
    "MSG_DETAILS_TABPARAMETERS_1": "파라미터",
    "MSG_DETAILS_TABPARAMETERS_2": "파이프라인 파라미터가 없습니다.",
    "MSG_DETAILS_TABPARAMETERS_3": "이름",
    "MSG_DETAILS_TABPARAMETERS_4": "설명",
    "MSG_DETAILS_TABPARAMETERS_5": "타입",
    "MSG_DETAILS_TABPARAMETERS_6": "타입을 선택해주세요.",
    "MSG_DETAILS_TABPARAMETERS_7": "Array",
    "MSG_DETAILS_TABPARAMETERS_8": "String",
    "MSG_DETAILS_TABPARAMETERS_9": "디폴트 값",
    "MSG_DETAILS_TABRESOURCES_1": "리소스",
    "MSG_DETAILS_TABRESOURCES_2": "파이프라인 리소스가 없습니다.",
    "MSG_DETAILS_TABRESOURCES_3": "리소스 타입",
    "MSG_DETAILS_TABRESOURCES_4": "리스스 타입 선택",
    "MSG_DETAILS_TABRESOURCES_5": "Git",
    "MSG_DETAILS_TABRESOURCES_6": "이미지",
    "MSG_MAIN_TABLEHEADER_81": "소요 시간",
    "MSG_MAIN_ACTIONBUTTON_30": "재실행",
    "MSG_DETAILS_TABDETAILS_16": "파이프라인",
    "MSG_DETAILS_TABDETAILS_17": "파이프라인 리소스",
    "MSG_DETAILS_TABDETAILS_18": "승인/거절 시간",
    "MSG_DETAILS_TABDETAILS_19": "승인자",
    "MSG_DETAILS_TABDETAILS_20": "거절 사유",
    "MSG_MAIN_ACTIONBUTTON_31": "승인 처리",
    "MSG_MAIN_POPUP_TITLE_1": "승인 처리",
    "MSG_MAIN_POPUP_OPTION_1": "승인",
    "MSG_MAIN_POPUP_OPTION_2": "거절",
    "MSG_MAIN_POPUP_DESCRIPTION_1": "거절 사유를 입력해 주세요.",
    "MSG_LNB_MENU_95": "이미지 스캔 요청",
    "MSG_LNB_MENU_96": "서명자 정책",
    "MSG_MAIN_ACTIONBUTTON_32": "이미지 스캔 요청 수정",
    "MSG_MAIN_ACTIONBUTTON_33": "이미지 스캔 요청 삭제",
    "MSG_COMMON_STATUS_14": "Succeeded",
    "MSG_COMMON_STATUS_15": "Error",
    "MSG_COMMON_STATUS_16": "Scanning",
    "MSG_DETAILS_TABDETAILS_21": "요약",
    "MSG_DETAILS_TABDETAILS_22": "Defcon1",
    "MSG_DETAILS_TABDETAILS_23": "중요",
    "MSG_DETAILS_TABDETAILS_24": "높음",
    "MSG_DETAILS_TABDETAILS_25": "중간",
    "MSG_DETAILS_TABDETAILS_26": "낮음",
    "MSG_DETAILS_TABDETAILS_27": "미미함",
    "MSG_DETAILS_TABDETAILS_28": "알수없음",
    "MSG_MAIN_ACTIONBUTTON_34": "서명자 정책 수정",
    "MSG_MAIN_ACTIONBUTTON_35": "서명자 정책 삭제",
    "MSG_DETAILS_TABDETAILS_SIGNERS_1": "서명자",
    "MSG_DETAILS_TABDETAILS_SIGNERS_ACTIONBUTTON_1": "서명자 삭제",
    "MSG_DETAILS_TABDETAILS_SIGNERS_TABLEHEADER_1": "이름",
    "MSG_DETAILS_TABDETAILS_SIGNERS_TABLEHEADER_2": "소속",
    "MSG_DETAILS_TABDETAILS_SIGNERS_TABLEHEADER_3": "이메일",
    "MSG_DETAILS_TABDETAILS_SIGNERS_TABLEHEADER_4": "연락처",
    "MSG_DETAILS_TABDETAILS_SIGNERS_TABLEHEADER_5": "생성 시간",
    "MSG_COMMON_FILTER_7": "필터",
    "MSG_COMMON_FILTER_8": "준비",
    "MSG_COMMON_FILTER_9": "오류",
    "MSG_COMMON_TABLEHEADER_1": "이름",
    "MSG_COMMON_TABLEHEADER_2": "상태",
    "MSG_COMMON_TABLEHEADER_3": "서비스 바인딩",
    "MSG_COMMON_TABLEHEADER_4": "생성 시간",
    "MSG_COMMON_ACTIONBUTTON_1": "주석 수정",
    "MSG_DETAILS_TABDETAILS_DETAILS_99": "주석",
    "MSG_DETAILS_TABDETAILS_DETAILS_100": "주석 {{0}}개",
    "MSG_DETAILS_TABDETAILS_DETAILS_101": "서비스 플랜",
    "MSG_DETAILS_TABDETAILS_DETAILS_102": "서비스 바인딩",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_1": "ID",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_2": "네임스페이스",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_3": "레이블",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_4": "레이블 없음",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_5": "파드 선택기",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_6": "선택기 없음",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_7": "노드 선택기",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_8": "선택기 없음",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_9": "주석",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_10": "주석 {{0}}개",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_11": "마지막 업데이트",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_12": "서비스 플랜 설명",
    "MSG_COMMON_ACTIONBUTTON_2": "서비스 바인딩 삭제",
    "MSG_COMMON_BUTTON_FILTER_1": "서비스 단위",
    "MSG_COMMON_BUTTON_FILTER_CHECKBOX_1": "클러스터",
    "MSG_COMMON_BUTTON_FILTER_CHECKBOX_2": "네임스페이스",
    "MSG_COMMON_BUTTON_FILTER_2": "네임스페이스",
    "MSG_COMMON_BUTTON_FILTER_PLACEHOLDER_1": "이름으로 검색",
    "MSG_COMMON_ACTIONBUTTON_3": "템플릿 인스턴스 생성",
    "MSG_COMMON_ACTIONBUTTON_4": "템플릿 수정",
    "MSG_COMMON_ACTIONBUTTON_5": "템플릿 삭제",
    "MSG_DETAILS_TABDETAILS_DETAILS_103": "서비스 단위",
    "MSG_DETAILS_TABDETAILS_DETAILS_104": "리소스 요약",
    "MSG_COMMON_BUTTON_FILTER_3": "상태",
    "MSG_COMMON_BUTTON_FILTER_CHECKBOX_3": "Succeeded",
    "MSG_COMMON_BUTTON_FILTER_CHECKBOX_4": "Error",
    "MSG_COMMON_BUTTON_FILTER_4": "리소스 요약",
    "MSG_COMMON_ACTIONBUTTON_6": "서비스 바인딩 생성",
    "MSG_COMMON_ACTIONBUTTON_7": "템플릿 인스턴스 수정",
    "MSG_COMMON_ACTIONBUTTON_8": "템플릿 인스턴스 삭제",
    "MSG_DETAILS_TABDETAILS_DETAILS_105": "서비스 인스턴스",
    "MSG_DETAILS_TABLOGS_20": "로그가 지원되지 않는 태스크입니다.",
    "MSG_MAIN_TABLEHEADER_82": "프로바이더",
    "MSG_DETAILS_TABDETAILS_29": "URL",
    "MSG_DETAILS_TABDETAILS_30": "프로바이더",
    "MSG_MAIN_TABLEHEADER_83": "바인딩 요청",
    "MSG_MAIN_TABLEHEADER_84": "서비스 브로커",
    "MSG_MAIN_TABLEHEADER_85": "마지막 업데이트",
    "MSG_MAIN_TABLECONTENTS_1": "요청 가능",
    "MSG_MAIN_TABLECONTENTS_2": "요청 불가",
    "MSG_DETAILS_TABDETAILS_31": "마지막 업데이트",
    "MSG_DETAILS_TABDETAILS_32": "Available",
    "MSG_DETAILS_TABDETAILS_33": "Unavailable",
    "MSG_DETAILS_TABDETAILS_34": "요청 불가",
    "MSG_DETAILS_TABDETAILS_35": "서비스 브로커",
    "MSG_DETAILS_TABDETAILS_36": "ID",
    "MSG_DETAILS_TABSERVICEPLANS_1": "서비스 플랜",
    "MSG_DETAILS_TABSERVICEPLANS_TABLEHEADER_1": "이름",
    "MSG_DETAILS_TABSERVICEPLANS_TABLEHEADER_2": "네임스페이스",
    "MSG_DETAILS_TABSERVICEPLANS_TABLEHEADER_3": "바인딩 요청",
    "MSG_DETAILS_TABSERVICEPLANS_TABLECONTENTS_1": "Available",
    "MSG_DETAILS_TABSERVICEPLANS_TABLECONTENTS_2": "Unavailable",
    "MSG_DETAILS_TABSERVICEPLANS_TABLEHEADER_4": "마지막 업데이트",
    "MSG_MAIN_TABLEHEADER_86": "클러스터 서비스 브로커",
    "MSG_DETAILS_TABDETAILS_37": "모든 네임스페이스",
    "MSG_MAIN_TABLECONTENTS_3": "모든 네임스페이스",
    "MSG_DETAILS_TABSERVICEPLANS_DETAILS_SIDEPANEL_1": "이름",
    "MSG_DETAILS_TABSERVICEPLANS_DETAILS_SIDEPANEL_2": "네임스페이스",
    "MSG_DETAILS_TABSERVICEPLANS_DETAILS_SIDEPANEL_3": "레이블",
    "MSG_DETAILS_TABSERVICEPLANS_DETAILS_SIDEPANEL_4": "레이블 없음",
    "MSG_DETAILS_TABSERVICEPLANS_DETAILS_SIDEPANEL_5": "파드 선택기",
    "MSG_DETAILS_TABSERVICEPLANS_DETAILS_SIDEPANEL_6": "선택기 없음",
    "MSG_DETAILS_TABSERVICEPLANS_DETAILS_SIDEPANEL_7": "노드 선택기",
    "MSG_DETAILS_TABSERVICEPLANS_DETAILS_SIDEPANEL_8": "선택기 없음",
    "MSG_DETAILS_TABSERVICEPLANS_DETAILS_SIDEPANEL_9": "주석",
    "MSG_DETAILS_TABSERVICEPLANS_DETAILS_SIDEPANEL_10": "주석 {{0}}개",
    "MSG_DETAILS_TABSERVICEPLANS_DETAILS_SIDEPANEL_11": "마지막 업데이트",
    "MSG_DETAILS_TABSERVICEPLANS_DETAILS_SIDEPANEL_12": "서비스 플랜 설명",
    "MSG_DETAILS_TABSERVICEPLANS_DETAILS_SIDEPANEL_13": "클러스터 서비스 플랜",
    "MSG_DETAILS_TABSERVICEPLANS_DETAILS_SIDEPANEL_14": "클러스터 서비스 플랜 설명",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_13": "바인딩 요청",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_14": "Available",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_15": "Unavailable",
    "MSG_DETAILS_TABDETAILS_DETAILS_SIDEPANEL_16": "서비스 브로커",
    "MSG_COMMON_ERROR_MESSAGE_42": "이 메뉴에 사용자 리소스 정의가 없습니다.\n서비스를 이용하기 위해 사용자 리소스 정의를 생성해 주세요.",
    "MSG_COMMON_ERROR_MESSAGE_43": "사용자 리소스 정의 생성하기",
    "MSG_COMMON_ERROR_MESSAGE_44": "이 클러스터에 접근 권한이 없습니다.",
    "MSG_COMMON_ERROR_MESSAGE_45": "찾을 수 없는 페이지",
    "MSG_COMMON_ERROR_MESSAGE_46": "요청하신 URL을 찾을 수 없습니다.",
    "MSG_MAIN_TABLEHEADER_87": "리소스 요약",
    "MSG_MAIN_ACTIONBUTTON_36": "Kubeconfig file 다운로드",
    "MSG_DETAILS_TABDETAILS_38": "레이블 셀렉터",
    "MSG_COMMON_FILTER_10": "상태",
    "MSG_COMMON_FILTER_11": "모든 필터 지우기",
    "MSG_NNB__2": "네임스페이스",
    "MSG_NNB__3": "모든 네임스페이스",
    "MSG_DETAILS_TABRESOURCEQUOTAS_1": "리소스 쿼타",
    "MSG_COMMON_ACTIONBUTTON_9": "리소스 쿼타 생성",
    "MSG_COMMON_ACTIONBUTTON_10": "리소스 쿼타 수정",
    "MSG_COMMON_ACTIONBUTTON_11": "리소스 쿼타 삭제",
    "MSG_DETAILS_TABRESOURCEQUOTACLAIMS_1": "리소스 쿼타 클레임",
    "MSG_COMMON_ACTIONBUTTON_12": "리소스 쿼타 클레임 생성",
    "MSG_COMMON_BUTTON_3": "모든 필터 지우기",
    "MSG_MAIN_TABLEHEADER_88": "리소스 쿼타",
    "MSG_COMMON_ACTIONBUTTON_13": "리소스 쿼타 클레임 수정",
    "MSG_COMMON_ACTIONBUTTON_14": "리소스 쿼타 클레임 삭제",
    "MSG_DETAILS_TABDETAILS_DETAILS_106": "생성한 사람",
    "MSG_DETAILS_TABDETAILS_DETAILS_107": "리소스 쿼타 이름",
    "MSG_COMMON_FILTER_12": "미 준비 ",
    "MSG_COMMON_ACTIONBUTTON_15": "인테그레이션 컨피그 수정",
    "MSG_COMMON_ACTIONBUTTON_16": "인테그레이션 컨피그 삭제",
    "MSG_DETAILS_TABDETAILS_DETAILS_108": "톨러레이션 {{0}}개",
    "MSG_DETAILS_TABDETAILS_DETAILS_109": "마지막 전환 시간",
    "MSG_DETAILS_TABDETAILS_DETAILS_110": "레이블 없음",
    "MSG_DETAILS_TABDETAILS_DETAILS_111": "선택기 없음",
    "MSG_COMMON_ERROR_MESSAGE_47": "시작하기\nHyperCloud를 사용하면 애플리케이션을 빠르게 개발, 호스팅 및 확장할 수 있습니다. 시작하려면 네임스페이스가 필요합니다. 현재는 네임스페이스를 만들거나 액세스할 수 없습니다. 도움이 필요하면 클러스터 관리자에게 문의해야합니다.\n자세한 내용은 HyperCloud 설명서를 참조하세요. ",
    "MSG_DETAILS_TABDETAILS_39": "멤버",
    "MSG_DETAILS_TABDETAILS_40": "그룹",
    "MSG_DETAILS_TABDETAILS_41": "엑세스 권한자 없음",
    "MSG_DETAILS_TABACCESSPERMISSIONS_1": "엑세스 권한",
    "MSG_COMMON_SEARCH_FILTER_3": "이메일 주소",
    "MSG_COMMON_SEARCH_FILTER_4": "역할",
    "MSG_COMMON_SEARCH_FILTER_PLACEHOLDER_1": "이메일 주소로 검색",
    "MSG_COMMON_SEARCH_FILTER_PLACEHOLDER_2": "역할로 검색",
    "MSG_DETAILS_TABACCESSPERMISSIONS_TABLEHEADER_1": "이메일 주소",
    "MSG_DETAILS_TABACCESSPERMISSIONS_TABLEHEADER_2": "이름",
    "MSG_DETAILS_TABACCESSPERMISSIONS_TABLEHEADER_3": "역할",
    "MSG_DETAILS_TABACCESSPERMISSIONS_ACTIONBUTTON_1": "역할 변경",
    "MSG_DETAILS_TABACCESSPERMISSIONS_ACTIONBUTTON_2": "엑세스 권한 삭제",
    "MSG_DETAILS_TABACCESSPERMISSIONS_RADIOBUTTON_1": "어드민",
    "MSG_DETAILS_TABACCESSPERMISSIONS_RADIOBUTTON_2": "개발자",
    "MSG_DETAILS_TABACCESSPERMISSIONS_RADIOBUTTON_3": "게스트",
    "MSG_COMMON_ERROR_MESSAGE_48": "먼저 네임스페이스를 선택해 주세요",
    "MSG_COMMON_ACTIONBUTTON_17": "클러스터 태스크 생성",
    "MSG_COMMON_ACTIONBUTTON_18": "클러스터 태스크 수정",
    "MSG_COMMON_ACTIONBUTTON_19": "클러스터 태스크 삭제",
    "MSG_COMMON_BUTTON_ETC_16": "YAML 수정",
    "MSG_DETAILS_TABDETAILS_42": "스캔 결과",
    "MSG_DETAILS_TABDETAILS_43": "취약성 최대 허용",
    "MSG_DETAILS_TABDETAILS_44": "보고서",
    "MSG_DETAILS_TABDETAILS_45": "확인함",
    "MSG_DETAILS_TABDETAILS_46": "확인하지 않음",
    "MSG_DETAILS_TABDETAILS_47": "전송함",
    "MSG_DETAILS_TABDETAILS_48": "전송하지 않음",
    "MSG_LNB_MENU_97": "외부 레지스트리",
    "MSG_MAIN_TABLEHEADER_89": "소스 레지스트리 (네임스페이스)",
    "MSG_MAIN_TABLEHEADER_90": "타겟 레지스트리 (네임스페이스)",
    "MSG_DETAILS_TABDETAILS_49": "소스 레지스트리 타입",
    "MSG_DETAILS_TABDETAILS_50": "소스 레지스트리 (네임스페이스/이름)",
    "MSG_DETAILS_TABDETAILS_51": "타겟 레지스트리 타입",
    "MSG_DETAILS_TABDETAILS_52": "타겟 레지스트리 (네임스페이스/이름)",
    "MSG_MAIN_TABLEHEADER_91": "타입",
    "MSG_DETAILS_TABDETAILS_53": "URL",
    "MSG_DETAILS_TABDETAILS_54": "타입",
    "MSG_COMMON_ACTIONBUTTON_20": "이미지 스캔 요청 생성",
    "MSG_DETAILS_TABREPOSITORIES_2": "이미지 스캔 요청 생성",
    "MSG_LNB_MENU_98": "그라파나",
    "MSG_LNB_MENU_99": "키바나",
    "MSG_LNB_MENU_100": "노드",
    "MSG_LNB_MENU_101": "롤바인딩 클레임",
    "MSG_LNB_MENU_102": "리소스 쿼타 클레임",
    "MSG_LNB_MENU_103": "네임스페이스 클레임",
    "MSG_COMMON_ACTIONBUTTON_21": "템플릿 편집",
    "MSG_COMMON_ACTIONBUTTON_22": "템플릿 수정",
    "MSG_COMMON_ACTIONBUTTON_23": "클러스터 템플릿 수정",
    "MSG_COMMON_ACTIONBUTTON_24": "클러스터 템플릿 삭제",
    "MSG_COMMON_ACTIONBUTTON_25": "가상 서비스 수정",
    "MSG_COMMON_ACTIONBUTTON_26": "가상 서비스 삭제",
    "MSG_COMMON_ACTIONBUTTON_27": "목적지 규칙 수정",
    "MSG_COMMON_ACTIONBUTTON_28": "목적지 규칙 삭제",
    "MSG_COMMON_ACTIONBUTTON_29": "엔보이 필터 수정",
    "MSG_COMMON_ACTIONBUTTON_30": "엔보이 필터 삭제",
    "MSG_COMMON_ACTIONBUTTON_31": "게이트웨이 수정",
    "MSG_COMMON_ACTIONBUTTON_32": "게이트웨이 삭제",
    "MSG_COMMON_ACTIONBUTTON_33": "사이드카 수정",
    "MSG_COMMON_ACTIONBUTTON_34": "사이드카 삭제",
    "MSG_COMMON_ACTIONBUTTON_35": "서비스 엔트리 수정",
    "MSG_COMMON_ACTIONBUTTON_36": "서비스 엔트리 삭제",
    "MSG_COMMON_ACTIONBUTTON_37": "요청 인증 수정",
    "MSG_COMMON_ACTIONBUTTON_38": "요청 인증 삭제",
    "MSG_COMMON_ACTIONBUTTON_39": "피어 인증 수정",
    "MSG_COMMON_ACTIONBUTTON_40": "피어 인증 삭제",
    "MSG_COMMON_ACTIONBUTTON_41": "인가 정책 수정",
    "MSG_COMMON_ACTIONBUTTON_42": "인가 정책 삭제",
    "MSG_COMMON_ACTIONBUTTON_43": "스토리지 클래스 수정",
    "MSG_COMMON_ACTIONBUTTON_44": "스토리지 클래스 삭제",
    "MSG_COMMON_ACTIONBUTTON_45": "영구 볼륨 클레임 수정",
    "MSG_COMMON_ACTIONBUTTON_46": "영구 볼륨 클레임 삭제",
    "MSG_COMMON_ACTIONBUTTON_47": "영구 볼륨 수정",
    "MSG_COMMON_ACTIONBUTTON_48": "영구 볼륨 삭제",
    "MSG_MAIN_TABLEHEADER_92": "머신",
    "MSG_MAIN_TABLEHEADER_93": "매니지먼트 주소",
    "MSG_COMMON_ACTIONBUTTON_49": "예약 불가능으로 표시 ",
    "MSG_COMMON_ACTIONBUTTON_50": "노드 수정",
    "MSG_COMMON_ACTIONBUTTON_51": "노드 삭제",
    "MSG_DETAILS_TABDETAILS_DETAILS_112": "노드 이름",
    "MSG_DETAILS_TABDETAILS_DETAILS_113": "테인트",
    "MSG_DETAILS_TABDETAILS_DETAILS_114": "OS 이미지",
    "MSG_COMMON_ACTIONBUTTON_52": "롤 바인딩 추가",
    "MSG_COMMON_ACTIONBUTTON_53": "클러스터 롤 수정",
    "MSG_COMMON_ACTIONBUTTON_54": "클러스터 롤 삭제",
    "MSG_DETAILS_TABDETAILS_DETAILS_115": "롤 이름",
    "MSG_COMMON_ACTIONBUTTON_55": "클러스터 롤 바인딩 대상 수정",
    "MSG_COMMON_ACTIONBUTTON_56": "클러스터 롤 바인딩 삭제",
    "MSG_COMMON_ACTIONBUTTON_57": "서비스 계정 수정",
    "MSG_COMMON_ACTIONBUTTON_58": "서비스 계정 삭제",
    "MSG_COMMON_ACTIONBUTTON_59": "파드 보안 정책 수정",
    "MSG_COMMON_ACTIONBUTTON_60": "파드 보안 정책 삭제",
    "MSG_COMMON_ACTIONBUTTON_61": "롤 바인딩 클레임 수정",
    "MSG_COMMON_ACTIONBUTTON_62": "롤 바인딩 클레임 삭제",
    "MSG_COMMON_ACTIONBUTTON_63": "인테그레이션 잡 수정",
    "MSG_COMMON_ACTIONBUTTON_64": "인테그레이션 잡 삭제",
    "MSG_COMMON_TABLEHEADER_5": "서비스 플랜",
    "MSG_MAIN_FILTER_3": "오류",
    "MSG_DETAILS_TABDETAILS_DETAILS_116": "서비스 바인딩",
    "MSG_DETAILS_TABDETAILS_DETAILS_117": "시크릿",
    "MSG_DETAILS_TABDETAILS_DETAILS_118": "리소스 이름",
    "MSG_LNB_MENU_104": "클러스터 템플릿",
    "MSG_COMMON_STATUS_17": "Failed",
    "MSG_COMMON_STATUS_18": "Error",
    "MSG_COMMON_STATUS_19": "Cluster_wide Roles",
    "MSG_COMMON_STATUS_20": "Namespace Roles",
    "MSG_COMMON_STATUS_21": "System Roles",
    "MSG_DETAILS_CONTAINER_DETAILS_1": "상태",
    "MSG_DETAILS_CONTAINER_DETAILS_2": "ID",
    "MSG_DETAILS_CONTAINER_DETAILS_3": "재시작",
    "MSG_DETAILS_CONTAINER_DETAILS_4": "리소스 요청량 ",
    "MSG_DETAILS_CONTAINER_DETAILS_5": "리소스 제한량",
    "MSG_DETAILS_CONTAINER_DETAILS_6": "라이프사이클 훅",
    "MSG_DETAILS_CONTAINER_DETAILS_7": "준비성 프로브",
    "MSG_DETAILS_CONTAINER_DETAILS_8": "활성 프로브",
    "MSG_DETAILS_CONTAINER_DETAILS_9": "시작",
    "MSG_DETAILS_CONTAINER_DETAILS_10": "종료",
    "MSG_DETAILS_CONTAINER_DETAILS_11": "파드",
    "MSG_DETAILS_CONTAINER_IMAGEDETAILS_1": "이미지",
    "MSG_DETAILS_CONTAINER_IMAGEDETAILS_2": "이미지 버전/태그 ",
    "MSG_DETAILS_CONTAINER_IMAGEDETAILS_3": "명령어 ",
    "MSG_DETAILS_CONTAINER_IMAGEDETAILS_4": "인수",
    "MSG_DETAILS_CONTAINER_IMAGEDETAILS_5": "풀 정책 ",
    "MSG_DETAILS_CONTAINER_NETWORK_1": "노드",
    "MSG_DETAILS_CONTAINER_NETWORK_2": "파드 IP",
    "MSG_DETAILS_CONTAINER_PORTS_1": "노출된 포트가 없습니다. ",
    "MSG_DETAILS_CONTAINER_PORTS_2": "포트에서 이 컨테이너에 대한 트래픽을 허용합니다. ",
    "MSG_DETAILS_CONTAINER_MOUNTEDVOLUMES_1": "마운트된 볼륨 ",
    "MSG_DETAILS_CONTAINER_MOUNTEDVOLUMES_2": "접근 모드",
    "MSG_DETAILS_CONTAINER_MOUNTEDVOLUMES_3": "위치",
    "MSG_DETAILS_CONTAINER_MOUNTEDVOLUMES_4": "마운트 경로",
    "MSG_DETAILS_CONTAINER_ENVIRONMENTVARIABLES_1": "환경 변수",
    "MSG_DETAILS_CONTAINER_ENVIRONMENTVARIABLES_2": "이름",
    "MSG_DETAILS_CONTAINER_ENVIRONMENTVARIABLES_3": "값",
    "MSG_DETAILS_CONTAINER_NETWORK_3": "네트워크",
    "MSG_DETAILS_CONTAINER_PORTS_3": "포트",
    "MSG_DETAILS_TABDETAILS_BINARYDATA_1": "이진 데이터",
    "MSG_DETAILS_TABDETAILS_INGRESSRULES_3": "파드는 기본적으로 모든 트래픽을 허용합니다. 하지만 수신 규칙의 화이트리스트를 지정하는 네트워크 정책을 통해 격리 할 수 있습니다. 파드를 선택하는 네트워크 정책이 있는 경우 해당 파드는 네트워크 정책에서 허용하지 않는 모든 트래픽을 거부합니다. ",
    "MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_5": "대상 파드",
    "MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_6": "에서",
    "MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_7": "포트로 ",
    "MSG_MAIN_ACTIONBUTTON_37": "롤아웃 재개",
    "MSG_DETAILS_TABENVIRONMENT_10": "초기화 컨테이너:",
    "MSG_DETAILS_TABENVIRONMENT_11": "값 추가",
    "MSG_DETAILS_TABENVIRONMENT_12": "컨피그 맵이나 시크릿에서 값 추가",
    "MSG_DETAILS_TABENVIRONMENT_13": "컨피그 맵이나 시크릿에서 모두 추가",
    "MSG_MAIN_TABLEHEADER_94": "마스터 노드",
    "MSG_MAIN_TABLEHEADER_95": "워커 노드",
    "MSG_DETAILS_TABDETAILS_55": "버전",
    "MSG_DETAILS_TABDETAILS_56": "지역",
    "MSG_DETAILS_TABDETAILS_57": "마스터 노드",
    "MSG_DETAILS_TABDETAILS_58": "워커 노드",
    "MSG_DETAILS_TABDETAILS_59": "마스터 노드 타입",
    "MSG_DETAILS_TABDETAILS_60": "워커 노드 타입",
    "MSG_DETAILS_TABDETAILS_61": "SSH 키",
    "MSG_DETAILS_TABMEMBERS_1": "멤버",
    "MSG_DETAILS_TABMEMBERS_2": "사용자",
    "MSG_DETAILS_TABMEMBERS_3": "사용자 그룹",
    "MSG_DETAILS_TABDETAILS_62": "마스터 노드 수",
    "MSG_DETAILS_TABDETAILS_63": "워커 노드 수",
    "MSG_DETAILS_TABDETAILS_64": "클러스터 이름",
    "MSG_DETAILS_TABDETAILS_VERSIONS_1": "버전",
    "MSG_DETAILS_TABDETAILS_VERSIONS_TABLEHEADER_1": "수행함 ",
    "MSG_DETAILS_TABDETAILS_VERSIONS_TABLEHEADER_2": "스토리지",
    "MSG_LNB_MENU_105": "클러스터 클레임",
    "MSG_LNB_MENU_106": "네임스페이스",
    "MSG_LNB_MENU_107": "서비스 브로커",
    "MSG_LNB_MENU_108": "서비스 클래스",
    "MSG_LNB_MENU_109": "클러스터 서비스 브로커",
    "MSG_LNB_MENU_110": "클러스터 서비스 클래스",
    "MSG_LNB_MENU_111": "서비스 인스턴스",
    "MSG_LNB_MENU_112": "서비스 바인딩",
    "MSG_LNB_MENU_113": "카탈로그 서비스 클레임",
    "MSG_LNB_MENU_114": "템플릿",
    "MSG_LNB_MENU_115": "템플릿 인스턴스",
    "MSG_LNB_MENU_116": "파드",
    "MSG_LNB_MENU_117": "디플로이먼트",
    "MSG_LNB_MENU_118": "스테이트풀 셋",
    "MSG_LNB_MENU_119": "시크릿",
    "MSG_LNB_MENU_120": "컨피그 맵",
    "MSG_LNB_MENU_121": "크론 잡",
    "MSG_LNB_MENU_122": "잡",
    "MSG_LNB_MENU_123": "데몬 셋",
    "MSG_LNB_MENU_124": "레플리카 셋",
    "MSG_LNB_MENU_125": "HPA",
    "MSG_LNB_MENU_126": "가상머신",
    "MSG_LNB_MENU_127": "가상머신 인스턴스",
    "MSG_LNB_MENU_128": "가상 서비스",
    "MSG_LNB_MENU_129": "목적지 규칙",
    "MSG_LNB_MENU_130": "엔보이 필터",
    "MSG_LNB_MENU_131": "게이트웨이",
    "MSG_LNB_MENU_132": "사이드카",
    "MSG_LNB_MENU_133": "서비스 엔트리",
    "MSG_LNB_MENU_134": "요청 인증",
    "MSG_LNB_MENU_135": "피어 인증",
    "MSG_LNB_MENU_136": "인가 정책",
    "MSG_LNB_MENU_137": "서비스",
    "MSG_LNB_MENU_138": "인그레스",
    "MSG_LNB_MENU_139": "네트워크 정책",
    "MSG_LNB_MENU_140": "영구 볼륨",
    "MSG_LNB_MENU_141": "영구 볼륨 클레임",
    "MSG_LNB_MENU_142": "스토리지 클래스",
    "MSG_LNB_MENU_143": "데이터 볼륨",
    "MSG_LNB_MENU_144": "태스크",
    "MSG_LNB_MENU_145": "태스크 런",
    "MSG_LNB_MENU_146": "파이프라인",
    "MSG_LNB_MENU_147": "파이프라인 런",
    "MSG_LNB_MENU_148": "파이프라인 승인",
    "MSG_LNB_MENU_149": "파이프라인 리소스",
    "MSG_LNB_MENU_150": "파이프라인 컨디션",
    "MSG_LNB_MENU_151": "노트북 서버",
    "MSG_LNB_MENU_152": "트레이닝 잡",
    "MSG_LNB_MENU_153": "워크플로우 템플릿",
    "MSG_LNB_MENU_154": "워크플로우",
    "MSG_LNB_MENU_155": "이미지 레지스트리",
    "MSG_LNB_MENU_156": "서비스 계정",
    "MSG_LNB_MENU_157": "롤",
    "MSG_LNB_MENU_158": "롤 바인딩",
    "MSG_LNB_MENU_159": "사용자",
    "MSG_LNB_MENU_160": "파드 보안 정책",
    "MSG_LNB_MENU_161": "리소스 쿼타",
    "MSG_LNB_MENU_162": "제한 범위",
    "MSG_LNB_MENU_163": "사용자 리소스 정의",
    "MSG_LNB_MENU_164": "메뉴 설정",
    "MSG_LNB_MENU_165": "클러스터",
    "MSG_LNB_MENU_166": "클러스터 그룹",
    "MSG_LNB_MENU_167": "볼륨 스냅샷",
    "MSG_LNB_MENU_168": "볼륨 스냅샷 클래스",
    "MSG_LNB_MENU_169": "볼륨 스냅샷 컨텐츠",
    "MSG_LNB_MENU_170": "이미지 서명자",
    "MSG_LNB_MENU_171": "이미지 서명 요청",
    "MSG_LNB_MENU_172": "이미지 복제",
    "MSG_LNB_MENU_173": "클러스터 태스크",
    "MSG_LNB_MENU_174": "이미지 스캔 요청",
    "MSG_LNB_MENU_175": "서명자 정책",
    "MSG_LNB_MENU_176": "외부 레지스트리",
    "MSG_LNB_MENU_177": "노드",
    "MSG_LNB_MENU_178": "롤 바인딩 클레임",
    "MSG_LNB_MENU_179": "리소스 쿼타 클레임",
    "MSG_LNB_MENU_180": "네임스페이스 클레임",
    "MSG_LNB_MENU_181": "클러스터 템플릿",
    "MSG_LNB_MENU_182": "클러스터 클레임",
    "MSG_LNB_MENU_CONSOLE_LIST_3": "마스터 클러스터",
    "MSG_LNB_MENU_183": "인테그레이션 컨피그",
    "MSG_LNB_MENU_184": "인테그레이션 컨피그",
    "MSG_LNB_MENU_185": "인테그레이션 잡",
    "MSG_LNB_MENU_186": "인테그레이션 잡",
    "MSG_DETAILS_TAB_1": "상세",
    "MSG_DETAILS_TAB_2": "YAML",
    "MSG_DETAILS_TAB_3": "서비스 플랜",
    "MSG_DETAILS_TAB_4": "클러스터 서비스 플랜",
    "MSG_DETAILS_TAB_5": "환경",
    "MSG_DETAILS_TAB_6": "로그",
    "MSG_DETAILS_TAB_7": "이벤트",
    "MSG_DETAILS_TAB_8": "터미널",
    "MSG_DETAILS_TAB_9": "레플리카 셋",
    "MSG_DETAILS_TAB_10": "파드",
    "MSG_DETAILS_TAB_11": "파이프라인 런",
    "MSG_DETAILS_TAB_12": "파라미터",
    "MSG_DETAILS_TAB_13": "리소스",
    "MSG_DETAILS_TAB_14": "롤 바인딩",
    "MSG_DETAILS_TAB_15": "인스턴스",
    "MSG_DETAILS_TAB_16": "개요",
    "MSG_MAIN_TABLEHEADER_96": "롤",
    "MSG_DETAILS_TABDETAILS_DETAILS_119": "노드 주소",
    "MSG_DETAILS_TABDETAILS_DETAILS_120": "노드 레이블",
    "MSG_DETAILS_TABDETAILS_DETAILS_121": "머신",
    "MSG_DETAILS_TABDETAILS_DETAILS_122": "베어메탈 호스트",
    "MSG_DETAILS_TABDETAILS_IMAGES_1": "이미지",
    "MSG_DETAILS_TABDETAILS_IMAGES_2": "이름",
    "MSG_DETAILS_TABDETAILS_IMAGES_3": "크기",
    "MSG_COMMON_ACTIONBUTTON_65": "규칙 삭제 ",
    "MSG_COMMON_SEARCH_PLACEHOLDER_2": "액션 또는 리소스 별 규칙 ",
    "MSG_DETAILS_TABDETAILS_ROLEBINDINGS_1": "롤 바인딩을 찾을 수 없음",
    "MSG_DETAILS_TABDETAILS_ROLEBINDINGS_2": "롤은 클러스터내에서 객체 유형별 접근 권한을 부여합니다. 롤은 롤바인딩을 통해 그룹이나\n사용자에게 적용됩니다.",
    "MSG_DETAILS_TABDETAILS_ROLEBINDINGS_3": "바인딩",
    "MSG_COMMON_TIMESTAMP_13": "약 {숫자} 시간",
    "MSG_COMMON_TIMESTAMP_14": "약 1 시간",
    "MSG_COMMON_TIMESTAMP_15": "약 {숫자} 분",
    "MSG_COMMON_TIMESTAMP_16": "약 1 분",
    "MSG_COMMON_TIMESTAMP_17": "몇 초",
    "MSG_MAIN_TABLEHEADER_97": "사용자 이름 ",
    "MSG_MAIN_TABLEHEADER_98": "리소스 이름",
    "MSG_COMMON_STATUS_22": "준비",
    "MSG_COMMON_STATUS_23": "미 준비 ",
    "MSG_COMMON_STATUS_24": "헬스 체크",
    "MSG_DETAILS_TABDETAILS_DETAILS_123": "클러스터 롤 바인딩",
    "MSG_DETAILS_TABDETAILS_DETAILS_124": "클러스터 롤",
    "MSG_DETAILS_TABDETAILS_65": "이미지를 스캔 중입니다.",
    "MSG_DETAILS_TABDETAILS_66": "이미지 스캔대기 중입니다.",
    "MSG_MAIN_ACTIONBUTTON_38": "View Instances",
    "MSG_MAIN_ACTIONBUTTON_39": "{{0}} 대상 수정",
    "MSG_MAIN_ACTIONBUTTON_40": "{{0}} 대상 삭제",
    "MSG_MAIN_POPUP_DESCRIPTION_2": "",
    "MSG_MAIN_ACTIONBUTTON_41": "대상 삭제",
    "MSG_MAIN_ACTIONBUTTON_42": "",
    "MSG_MAIN_POPUP_TITLE_2": "예약 불가능으로 표시 ",
    "MSG_MAIN_POPUP_DESCRIPTION_3": "",
    "MSG_MAIN_POPUP_COMMIT_1": "",
    "MSG_COMMON_ACTIONBUTTON_66": "노드 삭제",
    "MSG_MAIN_POPUP_TITLE_3": "노드 삭제",
    "MSG_MAIN_POPUP_DESCRIPTION_4": "",
    "MSG_LNB_MENU_187": "컨테이너 레지스트리",
    "MSG_LNB_MENU_188": "컨테이너 레지스트리",
    "MSG_LNB_MENU_189": "레지스트리 연동",
    "MSG_LNB_MENU_190": "레지스트리 연동",
    "MSG_GNB_LANGUAGE_3": "",
    "MSG_COMMON_ACTIONBUTTON_67": "클러스터 롤 바인딩 추가",
    "MSG_MAIN_TABLEHEADER_99": "",
    "MSG_LNB_MENU_191": "토폴로지",
    "MSG_LNB_MENU_DESCRIPTION_1": "Select a namespace to view the topology",
    "MSG_COMMON_ERROR_MESSAGE_49": "선택된 네임스페이스가 없음",
    "MSG_COMMON_ERROR_MESSAGE_50": "리소스를 추가하기 위해 좌측 상단에서 네임스페이스를 선택해 주세요.",
    "MSG_COMMON_BUTTON_4": "리소스 이름 표시",
    "MSG_LNB_MENU_MESSAGE_1": "Public URL",
    "MSG_LNB_MENU_192": "추론 서비스",
    "MSG_LNB_MENU_193": "추론 서비스",
    "MSG_MAIN_TABLEHEADER_100": "프레임워크",
    "MSG_MAIN_TABLEHEADER_101": "추론 URL",
    "MSG_MAIN_TABLEHEADER_102": "멀티 모델 여부",
    "MSG_DETAILS_TABDETAILS_DETAILS_125": "추론 서버",
    "MSG_DETAILS_TABDETAILS_DETAILS_126": "프레임워크",
    "MSG_DETAILS_TABDETAILS_DETAILS_127": "이미지",
    "MSG_DETAILS_TABDETAILS_DETAILS_128": "런타임 버전",
    "MSG_DETAILS_TABDETAILS_DETAILS_129": "최소 레플리카 수",
    "MSG_DETAILS_TABDETAILS_DETAILS_130": "최대 레플리카 수",
    "MSG_DETAILS_TABDETAILS_DETAILS_131": "추론요청 동시처리 수",
    "MSG_DETAILS_TABDETAILS_DETAILS_132": "데이터 전처리 서버",
    "MSG_DETAILS_TABDETAILS_DETAILS_133": "있음",
    "MSG_DETAILS_TABDETAILS_DETAILS_134": "없음",
    "MSG_DETAILS_TABDETAILS_DETAILS_135": "추론 설명 서버",
    "MSG_DETAILS_TABDETAILS_DETAILS_136": "모델",
    "MSG_DETAILS_TABDETAILS_DETAILS_137": "이름",
    "MSG_DETAILS_TABDETAILS_DETAILS_138": "스토리지 URI",
    "MSG_DETAILS_TABDETAILS_DETAILS_139": "프레임워크",
    "MSG_DETAILS_TABDETAILS_DETAILS_140": "메모리",
    "MSG_DETAILS_TABTERMINAL_3": "터미널",
    "MSG_DETAILS_TABTERMINAL_4": "이름",
    "MSG_DETAILS_TABTERMINAL_5": "값",
    "MSG_DETAILS_TABTERMINAL_6": "컨피그 맵/시크릿",
    "MSG_DETAILS_TABTERMINAL_7": "접두사 (선택사항)",
    "MSG_DETAILS_TABTERMINAL_8": "다운로드",
    "MSG_DETAILS_TABTERMINAL_9": "확장",
    "MSG_DETAILS_TABTERMINAL_10": "",
    "MSG_DETAILS_TABTERMINAL_11": "",
    "GitLab": "깃랩",
    "MSG_DETAILS_TABSERVICEPLANS_TABLEHEADER_5": "외부 이름",
    "MSG_DETAILS_TABDETAILS_67": "외부 이름"
  },
  "SINGLE": {
    "MSG_SEARCH_MAIN_NORESOURCES_1": "선택한 리소스 없음",
    "MSG_SEARCH_MAIN_NORESOURCES_2": "드롭다운에서 하나 이상의 리소스를 선택하십시오.",
    "MSG_AUDITLOGS_MAIN_RESOURCEFILTER_1": "전체 리소스 타입",
    "MSG_AUDITLOGS_MAIN_ACTIONFILTER_1": "전체 액션",
    "MSG_AUDITLOGS_MAIN_ACTIONFILTER_2": "생성",
    "MSG_AUDITLOGS_MAIN_ACTIONFILTER_3": "삭제",
    "MSG_AUDITLOGS_MAIN_ACTIONFILTER_4": "로그인",
    "MSG_AUDITLOGS_MAIN_ACTIONFILTER_5": "로그아웃",
    "MSG_AUDITLOGS_MAIN_ACTIONFILTER_6": "패치",
    "MSG_AUDITLOGS_MAIN_ACTIONFILTER_7": "업데이트 ",
    "MSG_AUDITLOGS_MAIN_STATUSFILTER_1": "전체 상태",
    "MSG_AUDITLOGS_MAIN_STATUSFILTER_2": "성공 ",
    "MSG_AUDITLOGS_MAIN_STATUSFILTER_3": "실패 ",
    "MSG_AUDITLOGS_MAIN_CODEFILTER_1": "전체 코드",
    "MSG_AUDITLOGS_MAIN_CODEFILTER_2": "100 (정보제공)",
    "MSG_AUDITLOGS_MAIN_CODEFILTER_3": "200 (성공)",
    "MSG_AUDITLOGS_MAIN_CODEFILTER_4": "300 (추가작업)",
    "MSG_AUDITLOGS_MAIN_CODEFILTER_5": "400 (클라이언트측 오류)",
    "MSG_AUDITLOGS_MAIN_CODEFILTER_6": "500 (서버측 오류)",
    "MSG_AUDITLOGS_MAIN_SEARCHPERIOD_1": "조회 기간",
    "MSG_AUDITLOGS_MAIN_SEARCHPERIOD_2": "~",
    "MSG_EVENTS_MAIN_TYPES_1": "모든 타입",
    "MSG_EVENTS_MAIN_TYPES_2": "정상",
    "MSG_EVENTS_MAIN_TYPES_3": "경고",
    "MSG_EVENTS_MAIN_PLACEHOLDER_1": "이름이나 메시지로 이벤트 조회 ",
    "MSG_EVENTS_MAIN_STATUS_1": "이벤트 로드 중",
    "MSG_EVENTS_MAIN_STATUS_2": "이벤트 스트림이 일시 정지되었습니다.",
    "MSG_EVENTS_MAIN_STATUS_3": "이벤트 스트리밍 중",
    "MSG_EVENTS_MAIN_COUNT_1": "{{something}} 이벤트를 표시 중",
    "MSG_EVENTS_MAIN_RESULT_1": "이벤트가 존재하지 않습니다. {{0}}",
    "MSG_EVENTS_MAIN_RESULT_2": "일치하는 이벤트가 없습니다.",
    "MSG_EVENTS_MAIN_RESULT_3": "{{0}} 이벤트가 존재하지만 현재 필터와 일치하는 것이 없습니다",
    "MSG_EVENTS_MAIN_ERROR_1": "이벤트 스트림 연결 오류 {{0}}",
    "MSG_EVENTS_MAIN_ERROR_2": "연결이 정상적으로 종료되지 않았습니다.",
    "MSG_EVENTS_MAIN_ERROR_3": "이벤트 로드 오류",
    "MSG_EVENTS_MAIN_ERROR_4": "이벤트 검색 중 오류가 발생했습니다. 다시 연결하는 중 …",
    "MSG_SERVICEBROKERS_MAIN_DESCRIPTION_1": "서버 연결의 세부 사항을 캡슐화하여 특정 네임스페이스에 대한 서비스 브로커 표현. 해당 브로커 서버를 사용하여 네임스페이스 내에서 새로운 타입의 관리 서비스를 사용하고자 하는 운영자가 생성하고 관리합니다.",
    "MSG_SERVICEBROKERS_CREATEYAML_DIV1_1": "서비스 제공자가 네임스페이스에서 사용가능하도록 생성한 서비스 브로커를 추가십시오.",
    "MSG_SERVICECLASSES_MAIN_DESCRIPTION_1": "특정 서비스 브로커가 제공하는 관리 서비스. 새로운 ServiceBroker 리소스가 네임스페이스에 추가되면 서비스 카탈로그 컨트롤러는 서비스 브로커에 연결하여 사용 가능한 관리 서비스 목록을 가져옵니다. 그런 다음 각 관리 서비스에 해당하는 새로운 ServiceClass 리소스를 생성합니다.",
    "MSG_SERVICEPLANS_MAIN_DESCRIPTION_1": "관리 서비스의 특정 오퍼링. 예를 들어, 관리 서비스는 프리 티어 및 유료 티어등의 여러 요금제가 사용 가능하며, SSD 스토리지 사용이나 추가 리소스 확보 등 다양한 설정 옵션을 제공합니다. ServiceClass와 마찬가지로, 새 ServiceBroker가 클러스터에 추가되면, Service Catalog는 각 관리 서비스에서 사용 가능한 각 ServicePlan에 해당하는 새 ServicePlan 리소스를 생성한다.",
    "MSG_CLUSTERSERVICEBROKERS_MAIN_DESCRIPTION_1": "서버 연결의 세부 사항을 캡슐화하여 서비스 브로커의 클러스터 내부 표현. 해당 브로커 서버를 사용하여 클러스터 내에서 새로운 타입의 관리 서비스를 사용하고자 하는 클러스터 운영자가 작성하고 관리합니다.",
    "MSG_CLUSTERSERVICEBROKERS_CREATEYAML_DIV1_1": "서비스 제공자가 클러스터 전체에서 사용가능하도록 생성한 서비스 브로커를 추가십시오.",
    "MSG_CLUSTERSERVICEBROKERS_CREATEYAML_DIV3_TABSAMPLE_1": "1. 클러스터 서비스 브로커 생성",
    "MSG_CLUSTERSERVICEBROKERS_CREATEYAML_DIV3_TABSAMPLE_2": "서비스 카탈로그 템플릿을 사용자가 사용할 수 있도록 클러스터 서비스 브로커를 등록합니다.\n서비스 브로커를 클러스터 전체에서 사용하려면 클러스터 서비스 브로커를 사용해야 합니다.",
    "MSG_CLUSTERSERVICECLASSES_MAIN_DESCRIPTION_1": "특정 서비스 브로커가 제공하는 관리 서비스. 새로운 ClusterServiceBroker 리소스가 네임스페이스에 추가되면 서비스 카탈로그 컨트롤러는 서비스 브로커에 연결하여 사용 가능한 관리 서비스 목록을 가져옵니다. 그런 다음 각 관리 서비스에 해당하는 새로운 ClusterServiceClass 리소스를 생성합니다.",
    "MSG_CLUSTERSERVICEPLANS_MAIN_DESCRIPTION_1": "관리 서비스의 특정 오퍼링. 예를 들어, 관리 서비스는 프리 티어 및 유료 티어등의 여러 요금제가 사용가능하며, SSD 스토리지 사용이나 추가 리소스 확보 등 다양한 설정 옵션을 제공한다. ClusterServiceClass와 마찬가지로, 새 ClusterServiceBroker가 클러스터에 추가되면, 서비스 카탈로그는 각 관리 서비스에서 사용 가능한 각 ServicePlan에 해당하는 새 ClusterServicePlan 리소스를 생성한다.",
    "MSG_SERVICEINSTANCES_MAIN_DESCRIPTION_1": "ServiceClass 또는 ClusterServiceClass의 프로비저닝된 인스턴스. 클러스터 운영자가 관리 서비스의 특정 인스턴스를 하나 이상의 클러스터 애플리케이션에서 사용할 수 있도록 하기 위해 ServiceInstance를 생성한다. 새로운 ServiceInstance 리소스가 생성되면 서비스 카탈로그 컨트롤러는 해당 서비스 브로커에 연결하여 서비스 인스턴스를 프로비저닝하도록합니다.",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP1_DIV1_1": "서비스 클래스 선택",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP1_DIV2_1": "서비스 클래스 타입",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP1_DIV2_2": "클러스터 서비스 클래스",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP1_DIV2_3": "네임스페이스 서비스 클래스",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP1_DIV2_4": "서비스 클래스 목록",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP1_DIV2_5": "서비스 클래스를 찾을 수 없음",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP1_DIV2_6": "네임스페이스",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP1_DIV2_7": "네임스페이스 선택",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP1_DIV2_8": "접근 권한이 있는 네임스페이스가 없습니다.",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP1_DIV2_9": "접근 권한이 있는 네임스페이스에서 서비스 클래스를 선택합니다.",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP2_DIV1_1": "서비스 플랜 선택",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP2_DIV2_1": "서비스 플랜을 찾을 수 없음",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP2_DIV2_2": "제공 기능",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP2_DIV2_3": "파라미터",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP2_DIV2_4": "플랜 요금",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP3_DIV1_1": "서비스 인스턴스 설정",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP3_DIV2_1": "네임스페이스",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP3_DIV2_2": "네임스페이스 선택",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP3_DIV2_3": "레이블",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP3_DIV2_4": "예: App=frontend",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP3_DIV2_5": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP3_DIV2_6": "이미지 버전",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP3_DIV2_7": "이미지 버전 선택",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP3_DIV2_8": "어플리케이션 이름",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP3_DIV2_9": "최소 2자 이상, 최대 32 이하의 영문 소문자, 숫자, 특수문자(“-”)",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP3_DIV2_10": "Git 리파지토리 URL",
    "MSG_SERVICEINSTANCES_CREATEFORM_STEP3_DIV2_11": "샘플 리파지토리 적용 ↑",
    "MSG_SERVICEINSTANCES_CREATEYAML_DIV3_TABSAMPLE_1": "1. 서비스 인스턴스 생성",
    "MSG_SERVICEINSTANCES_CREATEYAML_DIV3_TABSAMPLE_2": "클러스터 서비스 클래스의 프로비저닝된 인스턴스를 생성할 수 있습니다.",
    "MSG_SERVICEBINDINGS_MAIN_DESCRIPTION_1": "ServiceInstance 자격 증명에 접근. 클러스터 운영자는 어플리케이션으로 하여금 ServiceInstance를 사용가능하게 하기 위해 ServiceInstance를 생성한다. ServiceInstance가 생성되면, 서비스 카탈로그 컨트롤러는 서비스 인스턴스에 대한 연결 세부 정보 및 자격 증명이 포함된 Kubernetes®Secret®을 생성합니다. 해당 인스턴스는 파드에 마운트 할 수 있습니다.",
    "MSG_SERVICEBINDINGS_CREATEYAML_DIV3_TABSAMPLE_1": "1. 서비스 바인딩 샘플",
    "MSG_SERVICEBINDINGS_CREATEYAML_DIV3_TABSAMPLE_2": "서비스 바인딩은 서비스 인스턴스와 응용프로그램 사이의 링크를 제공하는 역할을 한다.",
    "MSG_SERVICEBINDINGS_CREATEYAML_DIV3_TABSAMPLE_3": "2. 서비스 바인딩 secret key 추가 설정 샘플",
    "MSG_SERVICEBINDINGS_CREATEYAML_DIV3_TABSAMPLE_4": "서비스 바인딩은 서비스 인스턴스와 응용프로그램 사이의 링크를 제공하는 역할을 한다. 브로커가 응답하면 서비스 카탈로그는 spec.secretName에서 지정한 secret에 응답하는 자격 증명을 기록한다.",
    "MSG_CATALOGSERVICECLAIMS_MAIN_DESCRIPTION_1": "카탈로그 서비스 클레임을 사용해 사용자는 클러스터 관리자에게 새 카탈로그 서비스 템플릿을 요청할 수 있습니다.",
    "MSG_CATALOGSERVICECLAIMS_CREATEYAML_DIV1_1": "서비스 템플릿을 지정하여 새 카탈로그 서비스를 요청하십시오.",
    "MSG_TEMPLATES_MAIN_DESCRIPTION_1": "템플릿을 사용하면 응용 프로그램에 대한 모든 객체와 파라미터를 지정할 수 있으므로 추후 앱을 쉽게 배치할 수 있습니다.",
    "MSG_TEMPLATES_CREATEYAML_DIV1_1": "템플릿을 작성하기 위해 애플리케이션의 객체와 파라미터를 지정하십시오.",
    "MSG_TEMPLATES_CREATEYAML_DIV3_TABSAMPLE_1": "1. 템플릿 샘플",
    "MSG_TEMPLATES_CREATEYAML_DIV3_TABSAMPLE_2": "응용 프로그램의 모든 객체를 쉽게 다시 만들 수 있도록 템플릿을 정의한다. 템플릿은 생성된 객체와 메타 데이터를 정의하고 있다.",
    "MSG_TEMPLATES_CREATEYAML_DIV3_TABSAMPLE_3": "2. Web server 샘플",
    "MSG_TEMPLATES_CREATEYAML_DIV3_TABSAMPLE_4": "Web server 카탈로그 템플릿이다.",
    "MSG_TEMPLATES_CREATEYAML_DIV3_TABSAMPLE_5": "3. DB(mysql) 샘플",
    "MSG_TEMPLATES_CREATEYAML_DIV3_TABSAMPLE_6": "DB(ex:mysql) 카탈로그 템플릿이다.",
    "MSG_TEMPLATES_CREATEYAML_DIV3_TABSAMPLE_7": "4. WAS & DB 샘플",
    "MSG_TEMPLATES_CREATEYAML_DIV3_TABSAMPLE_8": "WAS(nodejs) &DB(mysql) 템플릿",
    "MSG_TEMPLATEINSTANCES_MAIN_DESCRIPTION_1": "템플릿 인스턴스를 사용하면 선택한 서비스 템플릿에 포함 된 사양을 기반으로 새 응용 프로그램 인스턴스를 배치할 수 있습니다.",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV1_1": "애플리케이션을 배치하기 위해 템플릿에 필요한 파라미터를 입력하십시오.",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_1": "이름",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_2": "템플릿",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_3": "템플릿 선택",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_4": "파라미터",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_5": "어플리케이션 이름",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_6": "Git URL",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_7": "Git 저장소 URL",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_8": "Git 개정 ",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_9": "이미지 URL",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_10": "출력 이미지 URL",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_11": "레지스트리 시크릿 ",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_12": "이미지 레지스트리 액세스 시크릿",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_13": "서비스 계정 이름 ",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_14": "WAS 포트 ",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_15": "서비스 타입",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_16": "클러스터 IP ",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_17": "노트 포트 ",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_18": "로드밸런서 ",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_19": "패키지 서버 URL",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_20": "개인 패키지 서버(예: devpi, pypi, verdaccio, ...)의 URL(프로토콜, IP, 포트 및 경로 포함)",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_21": "JSON으로 배포",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_22": "JSON 형식의 배포 환경 변수",
    "MSG_TEMPLATEINSTANCES_CREATEYAML_DIV3_TABSAMPLE_1": "1. gitlab-template을 이용하여 템플릿 인스턴스 생성",
    "MSG_TEMPLATEINSTANCES_CREATEYAML_DIV3_TABSAMPLE_2": "등록된 템플릿(gitlab-template)를 이용하여 템플릿 인스턴스를 생성 할 수 있으며, 서비스 인스턴스에서 선택하여 사용할 수 있습니다.",
    "MSG_TEMPLATEINSTANCES_CREATEYAML_DIV3_TABSAMPLE_3": "2. apache-cicd-template을 이용하여 템플릿 인스턴스 생성",
    "MSG_TEMPLATEINSTANCES_CREATEYAML_DIV3_TABSAMPLE_4": "템플릿(apache-cicd-template)을 이용하여 apache 와 git-lab을 연동하여 ci/cd 배포까지 할 수 있습니다.\n서비스 인스턴스에서 선택하여 사용할 수 있습니다.",
    "MSG_PODS_MAIN_DESCRIPTION_1": "",
    "MSG_PODS_CREATEFORM_DIV1_1": "파드 생성",
    "MSG_PODS_CREATEFORM_DIV1_DESCRIPTION_1": "아래 표시된 파라미터와 컨테이너 이미지를 지정하여 파드를 생성합니다.",
    "MSG_PODS_CREATEYAML_DIV1_1": "파드 생성",
    "MSG_PODS_CREATEYAML_DIV3_1": "파드",
    "MSG_PODS_CREATEYAML_DIV3_TABSCHEMA_1": "파드는 호스트에서 실행 중인 컨테이너 모음입니다. 이 리소스는 클라이언트에 의해 생성되고 호스트에서 스케줄링됩니다.",
    "MSG_PODS_CREATEYAML_DIV3_TABSAMPLE_1": "1. 기본 파드 생성",
    "MSG_PODS_CREATEYAML_DIV3_TABSAMPLE_2": "Hello HyperCloud!",
    "MSG_PODS_CREATEYAML_DIV3_TABSAMPLE_3": "2. 특정 노드에 파드 생성",
    "MSG_PODS_CREATEYAML_DIV3_TABSAMPLE_4": "특정 노드에 ",
    "MSG_DEPLOYMENTS_MAIN_DESCRIPTION_1": "디플로이먼트는 파드와 레플리카셋에 대한 선언적 업데이트를 제공합니다.\n\n디플로이먼트에서 의도하는 상태를 설명하고, 디플로이먼트 컨트롤러(Controller)는 현재 상태에서 의도하는 상태로 비율을 조정하며 변경합니다. 새 레플리카셋을 생성하는 디플로이먼트를 정의하거나 기존 디플로이먼트를 제거하고, 모든 리소스를 새 디플로이먼트에 적용할 수 있습니다.",
    "MSG_DEPLOYMENTS_CREATEFORM_DIV1_1": "디플로이먼트 생성",
    "MSG_DEPLOYMENTS_CREATEFORM_DIV1_DESCRIPTION_1": "아래 표시된 파라미터와 컨테이너 이미지를 지정하여 디플로이먼트를 생성합니다.",
    "MSG_DEPLOYMENTS_CREATEFORM_DIV2_1": "이름",
    "MSG_DEPLOYMENTS_CREATEFORM_DIV2_2": "컨테이너 이미지",
    "MSG_DEPLOYMENTS_CREATEFORM_DIV2_3": "이미지 풀(Pull) 정책",
    "MSG_DEPLOYMENTS_CREATEFORM_DIV2_4": "레플리카",
    "MSG_DEPLOYMENTS_CREATEFORM_DIV2_5": "레이블",
    "MSG_DEPLOYMENTS_CREATEFORM_DIV2_6": "예: App=frontend",
    "MSG_DEPLOYMENTS_CREATEFORM_DIV2_7": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_DEPLOYMENTS_CREATEFORM_DIV2_8": "커맨드 실행",
    "MSG_DEPLOYMENTS_CREATEFORM_DIV2_9": "해당 값 정의 시, 도커 이미지의 기본 엔트리 포인트와 기본 cmd가 덮어 씌워집니다.",
    "MSG_DEPLOYMENTS_CREATEFORM_DIV2_10": "커맨드 인수 실행",
    "MSG_DEPLOYMENTS_CREATEFORM_DIV2_11": "해당 값 정의 시, 도커 이미지의 기본 엔트리 포인트가 덮어 씌워집니다.",
    "MSG_DEPLOYMENTS_CREATEFORM_DIV2_12": "환경 변수",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV1_1": "디플로이먼트 생성 ",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV3_1": "디플로이먼트",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV3_TABSCHEMA_1": "디플로이먼트를 사용하여 파드 및 리플리카셋에 대한 선언적 업데이트를 실행할 수 있습니다. ",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV3_TABSCHEMA_2": "사양",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV3_TABSCHEMA_3": "디플로이먼트에서 의도한 동작의 사양",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV3_TABSCHEMA_4": "상태 ",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV3_TABSCHEMA_5": "가장 최신의 디플로이먼트 상태",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV3_TABSAMPLE_1": "샘플",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV3_TABSAMPLE_2": "1. 기본 디플로이먼트 생성",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV3_TABSAMPLE_3": "image(nginx)를 이용하여 파드 1개로 구성된 디플로이먼트를 생성할 수 있습니다.",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV3_TABSAMPLE_4": "2. 파드 3개의 디플로이먼트 생성",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV3_TABSAMPLE_5": "image(nginx)를 이용하여 3개의 파드로 구성한 디플로이먼트를 생성할 수 있습니다.\n생성된 파드가 10초(minReadySeconds 옵션)안에 Ready 상태가 되도록 임계치 설정이 가능합니다.",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV3_TABSAMPLE_6": "3. 롤링 업데이트를 설정하여 디플로이먼트 생성",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV3_TABSAMPLE_7": "롤링 업데이트 시 신버전 파드를 30%씩 추가하고 구버전 파드를 30%씩 삭제를 반복하여 이미지를 업그레이드 하는 정책으로 디플로이먼트를 생성할 수 있습니다.\n정책을 명시하지 않으면 maxSurge, maxUnavailable 는 기본적으로 25% 씩 설정됩니다.",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV3_TABSAMPLE_8": "4. 볼륨 마운트하여 디플로이먼트 생성",
    "MSG_DEPLOYMENTS_CREATEYAML_DIV3_TABSAMPLE_9": "디플로이먼트 생성 시에 hostPath 퍼시스턴트 볼륨을 생성할 수 있습니다.\n노드의 디렉토리의 real path를 이용하여 hostpath로 설정하여 사용할 수 있습니다.",
    "MSG_STATEFULSETS_MAIN_DESCRIPTION_1": "스테이트풀셋은 다음 중 하나 이상이 필요한 애플리케이션에 유용합니다.\n\n안정된, 고유 네트워크 식별자\n안정된 영구 스토리지\n순차적인, 정상 디플로이먼트와 스케일링\n순차적인, 자동화된 롤링 업데이트\n\n상기 안정성은 파드 리스케줄링과 같은 속성입니다. 애플리케이션이 안정적인 식별자, 순차적인 디플로이먼트이나 삭제, 또는 스케일링이 필요하지 않은 경우 상태 비 저장 리플리카셋을 제공하는 워크로드 객체를 사용하여 애플리케이션을 배포하십시오. 디플로이먼트나 리플리카셋은 사용자의 상태 비 저장 요청에 더 적합할 수 이습니다. ",
    "MSG_STATEFULSETS_CREATEFORM_DIV1_1": "스테이트풀셋 생성",
    "MSG_STATEFULSETS_CREATEFORM_DIV1_DESCRIPTION_1": "파드 집합의 디플로이먼트와 파드, 스케일링을 관리합니다.",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_1": "이름",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_2": "네임스페이스",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_3": "레이블",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_4": "예: App=frontend",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_5": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_6": "서비스 이름",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_7": "레플리카",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_8": "스테이트풀셋에서 관리하는 파드의 개수를 정의해 주세요,",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_9": "볼륨 클레임 템플릿",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_10": "사용",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_11": "사용 안 함",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_12": "스테이트풀셋에 볼륨 클레임을 생성합니다.",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_13": "볼륨 클레임 템플릿 이름",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_14": "이름을 입력해 주세요.",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_15": "액세스 모드",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_16": "한번 읽고 쓰기",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_17": "여러번 읽고 쓰기 ",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_18": "스토리지 클래스",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_19": "스토리지 클래스 선택",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_20": "예: 1Gi",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_21": "스토리지 크기 할당 ",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_22": "퍼시스턴트 볼륨 클레임",
    "MSG_STATEFULSETS_CREATEFORM_DIV2_23": "퍼시스턴트 볼륨 클레임 선택",
    "MSG_STATEFULSETS_CREATEYAML_DIV1_1": "스테이트풀셋 생성",
    "MSG_STATEFULSETS_CREATEYAML_DIV3_1": "스테이트풀셋",
    "MSG_STATEFULSETS_CREATEYAML_DIV3_TABSAMPLE_1": "샘플",
    "MSG_STATEFULSETS_CREATEYAML_DIV3_TABSAMPLE_2": "1. 기본 스테이트풀셋에서 기본 3개의 파드를 생성",
    "MSG_STATEFULSETS_CREATEYAML_DIV3_TABSAMPLE_3": "고유한 상태를 가지는 3개의 스테이트풀을 생성하고자 할때 사용할 수 있습니다.\n파드 개수는 레플리카 값을 입력하여 설정할 수 있습니다.(replicas default : 1)",
    "MSG_STATEFULSETS_CREATEYAML_DIV3_TABSAMPLE_4": "2. 스테이트풀셋 실행시 병렬로 파드 생성",
    "MSG_STATEFULSETS_CREATEYAML_DIV3_TABSAMPLE_5": "파드 매니지먼트 정책을 사용하여 파드를 생성시 병렬로 생성 후 기동하게 할 수 있습니다.\nOrderedReady(default)는 파드가 순차적으로 생성후 기동합니다.",
    "MSG_STATEFULSETS_CREATEYAML_DIV3_TABSAMPLE_6": "3. Statefulset 생성 시 변경 내역이 유지될 개수를 지정 후 생성",
    "MSG_STATEFULSETS_CREATEYAML_DIV3_TABSAMPLE_7": "현재 적용된 내역 이외의 변경 내역에 대해 유지 될 최대 개정 수를 설정할 수 있습니다.\n(revisionHistoryLimit default : 10 )",
    "MSG_STATEFULSETS_CREATEYAML_DIV3_TABSAMPLE_8": "4. 업데이트 전략 설정",
    "MSG_STATEFULSETS_CREATEYAML_DIV3_TABSAMPLE_9": "각 파드를 한 번에 하나씩 업데이트하여 파드 종료와 생성을 실행합니다. 이전 버전을 업데이트하기 전에 업데이트 된 파드가 실행 중이고 준비 될 때까지 대기합니다.",
    "MSG_SECRETS_MAIN_DESCRIPTION_1": "시크릿은 비밀번호, OAuth 토큰, SSH 키와 같은 민감한 데이터를 저장하고 관리합니다. 민감한 데이터를 시크릿에 저장하는 것은 verbatim, 파드, 컨테이너 이미지에 저장하는 것보다 안전합니다.",
    "MSG_SECRETS_MAIN_BUTTON_1": "키/값 시크릿",
    "MSG_SECRETS_MAIN_BUTTON_2": "이미지 풀 시크릿",
    "MSG_SECRETS_MAIN_BUTTON_3": "소스 시크릿",
    "MSG_SECRETS_MAIN_BUTTON_4": "웹훅 시크릿",
    "MSG_SECRETS_MAIN_BUTTON_5": "YAML 사용",
    "MSG_SECRETS_CREATEKEYVALUESECRET_DIV1_1": "키/값 시크릿 생성",
    "MSG_SECRETS_CREATEKEYVALUESECRET_DIV1_2": "키/값 시크릿을 사용하여 중요한 데이터를 애플리케이션에 파일 또는 환경변수로 입력할 수 있습니다. ",
    "MSG_SECRETS_CREATEKEYVALUESECRET_DIV2_1": "시크릿 이름 ",
    "MSG_SECRETS_CREATEKEYVALUESECRET_DIV2_2": "새로운 시크릿의 고유한 이름 ",
    "MSG_SECRETS_CREATEKEYVALUESECRET_DIV2_3": "키",
    "MSG_SECRETS_CREATEKEYVALUESECRET_DIV2_4": "값",
    "MSG_SECRETS_CREATEKEYVALUESECRET_DIV2_5": "검색...",
    "MSG_SECRETS_CREATEKEYVALUESECRET_DIV2_6": "값을 지정한 파일을 여기에 드래그 앤 드롭하거나 업로드할 수 있는지 검색해보십시오. ",
    "MSG_SECRETS_CREATEIMAGEPULLSCRET_DIV1_1": "이미지 풀 시크릿 생성",
    "MSG_SECRETS_CREATEIMAGEPULLSCRET_DIV1_2": "이미지 풀 시크릿을 사용하여 프라이빗 이미지 레지스트리에 대해 인증할 수 있습니다. ",
    "MSG_SECRETS_CREATEIMAGEPULLSCRET_DIV2_1": "시크릿 이름 ",
    "MSG_SECRETS_CREATEIMAGEPULLSCRET_DIV2_2": "새로운 시크릿의 고유한 이름 ",
    "MSG_SECRETS_CREATEIMAGEPULLSCRET_DIV2_3": "인증 타입",
    "MSG_SECRETS_CREATEIMAGEPULLSCRET_DIV2_4": "이미지 레지스트리 자격 증명 ",
    "MSG_SECRETS_CREATEIMAGEPULLSCRET_DIV2_5": "설정 파일 업로드 ",
    "MSG_SECRETS_CREATEIMAGEPULLSCRET_DIV2_6": "레지스트리 서버 주소 ",
    "MSG_SECRETS_CREATEIMAGEPULLSCRET_DIV2_7": "사용자 이름 ",
    "MSG_SECRETS_CREATEIMAGEPULLSCRET_DIV2_8": "비밀번호",
    "MSG_SECRETS_CREATEIMAGEPULLSCRET_DIV2_9": "이메일",
    "MSG_SECRETS_CREATEIMAGEPULLSCRET_DIV2_BUTTON_1": "자격 증명 추가",
    "MSG_SECRETS_CREATEIMAGEPULLSCRET_DIV2_BUTTON_2": "자격 증명 삭제 ",
    "MSG_SECRETS_CREATESOURCESECRET_DIV1_1": "소스 시크릿 생성",
    "MSG_SECRETS_CREATESOURCESECRET_DIV1_2": "소스 시크릿을 사용하여 Git 서버에 대해 인증할 수 있습니다. ",
    "MSG_SECRETS_CREATESOURCESECRET_DIV2_1": "시크릿 이름 ",
    "MSG_SECRETS_CREATESOURCESECRET_DIV2_2": "새로운 시크릿의 고유한 이름 ",
    "MSG_SECRETS_CREATESOURCESECRET_DIV2_3": "인증 타입",
    "MSG_SECRETS_CREATESOURCESECRET_DIV2_4": "기본 인증",
    "MSG_SECRETS_CREATESOURCESECRET_DIV2_5": "SSH 키",
    "MSG_SECRETS_CREATESOURCESECRET_DIV2_6": "사용자 이름 ",
    "MSG_SECRETS_CREATESOURCESECRET_DIV2_7": "Git 인증을 위한 선택적 사용자 이름  ",
    "MSG_SECRETS_CREATESOURCESECRET_DIV2_8": "비밀번호 또는 토큰",
    "MSG_SECRETS_CREATESOURCESECRET_DIV2_9": "Git 인증을 위한 암호 또는 토큰. ca.crt 또는 .gitconfig 파일이 지정되지 않은 경우 필요.",
    "MSG_SECRETS_CREATEWEBHOOKSECRET_DIV1_1": "웹훅 시크릿 생성",
    "MSG_SECRETS_CREATEWEBHOOKSECRET_DIV1_2": "웹훅 시크릿을 사용하여 웹훅 트리거를 인증할 수 있습니다.  ",
    "MSG_SECRETS_CREATEWEBHOOKSECRET_DIV2_1": "시크릿 이름 ",
    "MSG_SECRETS_CREATEWEBHOOKSECRET_DIV2_2": "새로운 시크릿의 고유한 이름 ",
    "MSG_SECRETS_CREATEWEBHOOKSECRET_DIV2_3": "웹훅 시크릿 키",
    "MSG_SECRETS_CREATEWEBHOOKSECRET_DIV2_4": "생성",
    "MSG_SECRETS_CREATEWEBHOOKSECRET_DIV2_5": "웹훅을 호출할 때 시크릿 값이 제공됩니다. ",
    "MSG_SECRETS_CREATEYAML_DIV1_1": "시크릿 생성",
    "MSG_SECRETS_CREATEYAML_DIV3_1": "시크릿",
    "MSG_SECRETS_CREATEYAML_DIV3_TABSAMPLE_1": "1. 기본인증 시크릿 생성",
    "MSG_SECRETS_CREATEYAML_DIV3_TABSAMPLE_2": "계정과 비밀번호의 조합으로 SCM 서버에 대한 인증을 위한 시크릿을 생성할 수 있습니다.",
    "MSG_SECRETS_CREATEYAML_DIV3_TABSAMPLE_3": "2. 사용자 정의 데이터 형태의 시크릿 생성",
    "MSG_SECRETS_CREATEYAML_DIV3_TABSAMPLE_4": "키/값으로 이루어진 데이터 값에 Base64형태로 인코딩 합니다.\n디플로이먼트시 secretKeyRef을 명시해서 사용할 수 있습니다.",
    "MSG_SECRETS_SECRETDETAILS_DIV1_BUTTON_1": "시크릿을 워크로드로 추가",
    "MSG_CONFIGMAPS_MAIN_DESCRIPTION_1": "대부분의 Kubernetes 시크릿 타입은 민감한 정보를 저장하지만 컨피그맵은 구성 파일 그룹과 같은 일반 구성 정보를 저장합니다. 컨피그맵은 민감한 정보를 저장하지 않기 때문에 자동으로 업데이트 할 수 있으므로 수동 업데이트 및 컨테이너 재시작을 적용해야하는 대부분의 시크릿 타입과 달리 컨테이너를 업데이트 후 다시 시작할 필요가 없습니다.\n\n컨피그맵은 구성 파일 또는 JSON Blob과 같은 공통 문자열 형식의 키 값 쌍을 허용합니다. 컨피그맵을 업로드한 후에는 모든 워크로드가 환경변수 또는 볼륨 마운트로 참조할 수 있습니다.",
    "MSG_CONFIGMAPS_CREATEFORM_DIV1_1": "컨피그맵 생성",
    "MSG_CONFIGMAPS_CREATEFORM_DIV1_DESCRIPTION_1": "컨테이너에서 필요한 설정 값을 입력하여 환경별로 구성 요소를 분리할 수 있습니다.",
    "MSG_CONFIGMAPS_CREATEFORM_DIV2_1": "이름",
    "MSG_CONFIGMAPS_CREATEFORM_DIV2_2": "네임스페이스",
    "MSG_CONFIGMAPS_CREATEFORM_DIV2_3": "네임스페이스 선택",
    "MSG_CONFIGMAPS_CREATEFORM_DIV2_4": "컨피그맵 값",
    "MSG_CONFIGMAPS_CREATEFORM_DIV2_5": "키",
    "MSG_CONFIGMAPS_CREATEFORM_DIV2_6": "값",
    "MSG_CONFIGMAPS_CREATEYAML_DIV1_1": "컨피그맵 생성",
    "MSG_CONFIGMAPS_CREATEYAML_DIV3_1": "컨피그맵",
    "MSG_CONFIGMAPS_CREATEYAML_DIV3_TABSCHEMA_1": "컨피그맵은 파드가 사용할 구성 데이터를 보관합니다. ",
    "MSG_CONFIGMAPS_CREATEYAML_DIV3_TABSAMPLE_1": "1. 기본 컨피그맵 생성",
    "MSG_CONFIGMAPS_CREATEYAML_DIV3_TABSAMPLE_2": "비암호된 데이터를 키/데이터 형태로 작성할 수 있습니다. 컨테이너에서 데이터를 읽어서 구성을 할 수 있습니다.",
    "MSG_CONFIGMAPS_CREATEYAML_DIV3_TABSAMPLE_3": "2. 파일형태의 컨피그맵 생성",
    "MSG_CONFIGMAPS_CREATEYAML_DIV3_TABSAMPLE_4": "파일형태로 비암호된 데이터를 키/데이터 형태로 작성할 수 있습니다.",
    "MSG_CONFIGMAPS_CONFIGMAPDETAILS_TABDETAILS_BINARYDATA_1": "이진 데이터",
    "MSG_CONFIGMAPS_CONFIGMAPDETAILS_TABDETAILS_BINARYDATA_2": "이진 데이터를 찾을 수 없음",
    "MSG_CRONJOBS_MAIN_DESCRIPTION_1": "크론잡은 반복 일정에 따라 잡을 만듭니다. 하나의 크론잡 오브젝트는 크론탭 (크론 테이블) 파일의 한 줄과 같습니다. 크론잡은 잡을 크론 형식으로 쓰여진 주어진 일정에 따라 주기적으로 동작시킵니다.\n\n크론잡 리소스에 대한 매니페스트를 생성할 때에는 제공하는 이름이 유효한 DNS 서브도메인 이름이어야 합니다. 이름은 52자 이하여야 합니다. 크론잡 컨트롤러는 제공된 잡 이름에 11자를 자동으로 추가하고, 작업 이름의 최대 길이는 63자라는 제약 조건이 있기 때문입니다.",
    "MSG_CRONJOBS_CREATEFORM_DIV1_1": "크론잡 생성",
    "MSG_CRONJOBS_CREATEFORM_STEP1_1": "스케줄",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV1_1": "고정된 시간, 날짜, 간격에 주기적으로 크론잡이 실행됩니다.",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_1": "이름",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_2": "스케줄",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_3": "설정 방식",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_4": "기본",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_5": "크론 탭",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_6": "스케줄링",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_7": "스케줄 입력 방식\n- 별표(*)는 전체\n- 쉼표(,)는 목록의 항목을 구분하는 데 사용됩니다.\n- 대시(-)는 범위를 구분하는데 사용됩니다.",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_8": "분",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_9": "0-59",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_10": "시",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_11": "0-23",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_12": "일",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_13": "1-31",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_14": "월",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_15": "1-12 또는 JAN-DEC",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_16": "요일",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_17": "0-6 또는 SUN-SAT",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_18": "설정 방식에 따라 스케줄링 정보를 입력해 주세요.",
    "MSG_CRONJOBS_CREATEFORM_STEP1_DIV2_19": "Unix 표준 crontab 형식을 사용하여 크론잡 실행 시기 및 빈도를 정의합니다.",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV1_1": "잡 템플릿",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV1_2": "컨테이너 이미지 ,컨테이너가 실행하는 명령,  크론잡 재시작 정책 등 크론잡의 상세 기능을 설정합니다.",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_1": "이름",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_2": "레이블",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_3": "예: App=frontend",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_4": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_5": "컨테이너 이미지",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_6": "이미지 레지스트리",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_7": "이미지 레지스트리 선택",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_8": "이미지",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_9": "이미지 선택",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_10": "작업을 실행할 이미지 환경을 선택해 주세요.",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_11": "이미지 풀(Pull) 정책",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_12": "항상",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_13": "존재하지 않을 경우",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_14": "사용하지 않음",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_15": "이미지를 가져 오기 위한 풀(pull) 정책을 선택해 주세요.",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_16": "병렬성",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_17": "커맨드 실행",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_18": "크론잡 커맨드를 입력해 주세요.",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_19": "커맨드 인수 실행",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_20": "커맨드에 대한 파라미터 값을 입력해 주세요.",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_21": "재시작 정책",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_22": "항상 ",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_23": "실패 시 ",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_24": "사용하지 않음 ",
    "MSG_CRONJOBS_CREATEFORM_STEP2_DIV2_25": "컨테이너 실행이 정지되었을 경우 재시작 정책 옵션을 선택해 주세요.",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV1_1": "동시 실행 정책",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV1_2": "크론잡 컨트롤러에서 생성된 작업이 동시에 실행될 경우 이를 처리하는 방법을 지정합니다. 값을 설정하지 않을 경우 여러 개의 동시 작업이 허용됩니다.",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV2_1": "동시 실행 정책",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV2_2": "허용",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV2_3": "금지",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV2_4": "대체",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV2_5": "크론잡 작업의 동시 실행 정책을 선택해 주세요.",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV2_6": "고급",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV2_7": "마감시간 지정",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV2_8": "예약된 시간을 놓칠 경우 크론잡을 시작하는 데 걸리는 최대 시간(초)를 입력해 주세요.",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV2_9": "후속 실행 일시 중단",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV2_10": "중단",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV2_11": "중단 안 함",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV2_12": "실행 성공 횟수",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV2_13": "저장될 크론잡 실행 성공 횟수를 입력해 주세요.",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV2_14": "실행 실패 횟수",
    "MSG_CRONJOBS_CREATEFORM_STEP3_DIV2_15": "저장될 크론잡 실행 실패 횟수를 입력해 주세요.",
    "MSG_CRONJOBS_CREATEYAML_DIV1_1": "크론잡 생성",
    "MSG_CRONJOBS_CREATEYAML_DIV3_1": "크론잡",
    "MSG_CRONJOBS_CREATEYAML_DIV3_TABSCHEMA_1": "크론잡은 단일 크론잡의 구성을 나타냅니다. ",
    "MSG_CRONJOBS_CREATEYAML_DIV3_TABSAMPLE_1": "1. 10분주기로 크론잡 실행",
    "MSG_CRONJOBS_CREATEYAML_DIV3_TABSAMPLE_2": "특정 주기(10분)에 작업을 수행하고자 할 때 사용할 수 있습니다.",
    "MSG_CRONJOBS_CREATEYAML_DIV3_TABSAMPLE_3": "2. 일 주기로 크론잡 실행",
    "MSG_CRONJOBS_CREATEYAML_DIV3_TABSAMPLE_4": "일 단위(자정)에 작업을 수행하고자 할 때 사용할 수 있습니다.",
    "MSG_CRONJOBS_CREATEYAML_DIV3_TABSAMPLE_5": "3. 매일 특정 시점에 크론잡 실행",
    "MSG_CRONJOBS_CREATEYAML_DIV3_TABSAMPLE_6": "매일 특정 시점(4시 5분 / 5시 5분)에 작업을 수행하고자 할 때 사용할 수 있습니다.",
    "MSG_CRONJOBS_CREATEYAML_DIV3_TABSAMPLE_7": "4. 크론잡 동시 실행하지 않기",
    "MSG_CRONJOBS_CREATEYAML_DIV3_TABSAMPLE_8": "특정 주기마다 반복적인 상황에서 이전 실행이 완료되지 않는 시점에 다음 실행 주기가 도달해도 실행되지 않도록 동시 실행을 금지합니다.",
    "MSG_CRONJOBS_CRONJOBDETAILS_TABDETAILS_JOBDETAILS_": "잡 상세",
    "MSG_CRONJOBS_CRONJOBDETAILS_TABDETAILS_JOBDETAILS_1": "의도한 완료시간",
    "MSG_CRONJOBS_CRONJOBDETAILS_TABDETAILS_JOBDETAILS_2": "병렬성",
    "MSG_CRONJOBS_CRONJOBDETAILS_TABDETAILS_JOBDETAILS_3": "마감시간 활성화(초)",
    "MSG_JOBS_MAIN_DESCRIPTION_1": "잡은 하나 이상의 파드를 작성하고 지정된 수의 파드를 성공적으로 종료하도록 합니다.\n파드가 성공적으로 완료되면 작업이 성공적인 완료를 추적합니다. 지정된 수의 성공적인 완료에 도달하면 잡이 완료됩니다. 잡을 삭제하면 생성된 파드가 정리됩니다.\n\n예시로, 하나의 파드를 안정적으로 실행하기 위해 하나의 잡 객체를 만듭니다. 첫 번째 파드에 장애가 발생하거나 삭제된 경우 (예 : 노드 하드웨어 장애 또는 노드 재부팅으로 인해) 잡 객체는 새 파드를 시작합니다.\n\n잡을 사용하여 여러 파드를 병렬로 실행할 수도 있습니다.",
    "MSG_JOBS_CREATEFORM_DIV1_1": "잡 생성",
    "MSG_JOBS_CREATEFORM_DIV1_DESCRIPTION_1": "하나 이상의 파드를 작성하고 지정된 수의 파드를 성공적으로 종료하도록 합니다.",
    "MSG_JOBS_CREATEFORM_DIV2_1": "이름",
    "MSG_JOBS_CREATEFORM_DIV2_2": "네임스페이스",
    "MSG_JOBS_CREATEFORM_DIV2_3": "매뉴얼 셀렉터 사용",
    "MSG_JOBS_CREATEFORM_DIV2_4": "사용",
    "MSG_JOBS_CREATEFORM_DIV2_5": "만약 해당 잡의 파드에 고유하지 않고 연관이 없는 파드와 일치하는 레이블 셀렉터를 지정하면, 연관이 없는 잡의 파드가 삭제되거나, 해당 잡이 다른 파드가 완료한 것으로 수를 세거나, 하나 또는 양쪽 잡 모두 파드 생성이나 실행 완료를 거부할 수 있습니다. 만약 고유하지 않은 셀렉터가 선택된 경우, 다른 컨트롤러(예: 레플리케이션 컨트롤러)와 해당 파드는 예측할 수 없는 방식으로 작동할 수 있습니다.",
    "MSG_JOBS_CREATEFORM_DIV2_6": "레이블",
    "MSG_JOBS_CREATEFORM_DIV2_7": "예: App=frontend",
    "MSG_JOBS_CREATEFORM_DIV2_8": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_JOBS_CREATEFORM_DIV2_9": "사용 안 함",
    "MSG_JOBS_CREATEFORM_DIV2_10": "고급 옵션",
    "MSG_JOBS_CREATEFORM_DIV2_11": "백 오프 제한",
    "MSG_JOBS_CREATEFORM_DIV2_12": "잡이 실패하였을 때 재시도 횟수를 정의합니다.",
    "MSG_JOBS_CREATEFORM_DIV2_13": "마감 유효 시간",
    "MSG_JOBS_CREATEFORM_DIV2_14": "잡 실행의 마감시간을 정의합니다. (지정된 시간 초과 시, 잡이 강제 종료되고 실패 상태로 변경됩니다.)",
    "MSG_JOBS_CREATEFORM_DIV2_15": "완료 후 TTL 정의 (초)",
    "MSG_JOBS_CREATEFORM_DIV2_16": "성공적으로 완료된 잡의 삭제 시점을 정의합니다. (미설정 시, 잡은 삭제되지 않습니다.)",
    "MSG_JOBS_CREATEYAML_DIV1_1": "잡 생성",
    "MSG_JOBS_CREATEYAML_DIV3_1": "잡",
    "MSG_JOBS_CREATEYAML_DIV3_2": "잡은 단일 잡의 구성을 나타냅니다. ",
    "MSG_JOBS_CREATEYAML_DIV3_TABSAMPLE_1": "1. perl image를 이용하여 잡 실행",
    "MSG_JOBS_CREATEYAML_DIV3_TABSAMPLE_2": "1. perl image를 이용하여 잡 실행\nperl image를 이용하여 잡을 실행하여 커맨드의 명령어를 실행할 수 있습니다. (pi의 2000자리까지출력)",
    "MSG_JOBS_CREATEYAML_DIV3_TABSAMPLE_3": "2. 잡의 재시도 횟수를 지정하여 실행",
    "MSG_JOBS_CREATEYAML_DIV3_TABSAMPLE_4": "잡을 실행시 backoffLimit을 통해 재시도 횟수(4회)를 지정할 수 있습니다.\n(Default : 6회)",
    "MSG_JOBS_CREATEYAML_DIV3_TABSAMPLE_5": "3. 잡의 마감시간을 지정하여 실행",
    "MSG_JOBS_CREATEYAML_DIV3_TABSAMPLE_6": "잡을 실행시 activeDeadlineSeconds를 통해 잡의 마감시간(10초)를 지정하여 수행할 수 있습니다. 값은 양수로 지정하여야 합니다.",
    "MSG_JOBS_CREATEYAML_DIV3_TABSAMPLE_7": "4. 3개 잡의 병렬 작업을 실행",
    "MSG_JOBS_CREATEYAML_DIV3_TABSAMPLE_8": "잡을 병렬로 수행하고자 할때 completions(성공한 파드 수), parallelism(실행할 파드 수)을 지정하여 수행할 수 있습니다.",
    "MSG_JOBS_JOBDETAILS_TABDETAILS_JOBSTATUS_1": "잡 상태",
    "MSG_JOBS_JOBDETAILS_TABDETAILS_JOBSTATUS_2": "상태 ",
    "MSG_JOBS_JOBDETAILS_TABDETAILS_JOBSTATUS_3": "시작 시간",
    "MSG_JOBS_JOBDETAILS_TABDETAILS_JOBSTATUS_4": "완료 시간",
    "MSG_JOBS_JOBDETAILS_TABDETAILS_JOBSTATUS_5": "성공한 파드",
    "MSG_JOBS_JOBDETAILS_TABDETAILS_JOBSTATUS_6": "활성 파드",
    "MSG_JOBS_JOBDETAILS_TABDETAILS_JOBSTATUS_7": "실패한 파드",
    "MSG_DAEMONSETS_MAIN_DESCRIPTION_1": "데몬셋을 사용하는 경우 파드 사본이 항상 모든 또는 특정 호스트에서 실행되어야하는 경우와 다른 파드보다 먼저 시작해야하는 경우 데몬셋을 사용합니다.\n\n데몬셋은 파드를 생성한다는 점에서 디플로이먼트와 유사하며, 해당 파드에는 종료되지 않을 프로세스(예 : 웹 서버, 스토리지 서버)가 있습니다. 파드가 실행되는 호스트를 정확하게 제어하는 것보다 복제본 수를 늘리고 업데이트하는 것이 더 중요한 프론트엔드와 같은 상태 비저장 서비스에 디플로이먼트를 적용해 주세요.",
    "MSG_DAEMONSETS_CREATEFORM_DIV1_1": "데몬셋 생성",
    "MSG_DAEMONSETS_CREATEFORM_DIV1_DESCRIPTION_1": "클러스터의 모든 노드나 일부 노드에서 실행될 특정 파드를 생성합니다.",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_1": "이름",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_2": "네임스페이스",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_3": "레이블",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_4": "예: App=frontend",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_5": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_6": "파드 템플릿",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_7": "이미지",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_8": "이미지 레지스트리",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_9": "이미지 레지스트리",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_10": "이미지 레지스트리 선택",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_11": "이미지 선택",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_12": "이미지 태그",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_13": "직접 입력",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_14": "IP 또는 URL",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_15": "예: 192.168.6.110.nip.io",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_16": "레이블",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_17": "예: App=frontend",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_18": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_19": "커맨드 실행",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_20": "커맨드 인수 실행",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_21": "이미지 풀 (Pull) 정책",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_22": "If Not Present",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_23": "Always",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_24": "Never",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_25": "환경 변수",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_26": "키",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_27": "값",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_28": "포트",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_29": "포트 이름",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_30": "포트",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_31": "프로토콜",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_32": "1~65535",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_33": "볼륨",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_34": "이름",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_35": "마운트 경로",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_36": "퍼시스턴트 볼륨 클레임",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_37": "퍼시스턴트 볼륨 클레임 선택",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_38": "읽기 권한",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_39": "허용",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_40": "허용 안 함",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_41": "리소스 요청",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_42": "리소스 제한",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_43": "리소스",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_44": "수량",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_45": "재시작 정책",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_46": "항상",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_47": "노드 어피니티",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_48": "설정하지 않음",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_49": "노드 선택",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_50": "노드 레이블 선택",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_51": "업데이트 전략",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_52": "업데이트 타입",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_53": "롤링 업데이트",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_54": "수동 삭제",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_55": "사용 불가 파드 최대 개수",
    "MSG_DAEMONSETS_CREATEFORM_DIV2_56": "데몬셋 템플릿에서 업데이트를 진행 시 새로운 파드 생성 방식을 선택해 주세요.",
    "MSG_DAEMONSETS_DAMONSETDETAILS_TABDETAILS_MONITORING_1": "모니터링 데이터",
    "MSG_DAEMONSETS_DAMONSETDETAILS_TABDETAILS_MONITORING_2": "CPU",
    "MSG_DAEMONSETS_DAMONSETDETAILS_TABDETAILS_MONITORING_3": "메모리",
    "MSG_DAEMONSETS_DAMONSETDETAILS_TABDETAILS_MONITORING_4": "파일시스템",
    "MSG_DAEMONSETS_DAMONSETDETAILS_TABDETAILS_MONITORING_5": "네트워크 트래픽",
    "MSG_REPLICASETS_MAIN_DESCRIPTION_1": "레플리카셋은 지정된 수의 파드 레플리카가 시간내에 실행되도록 보장합니다.\n\n그러나 디플로이먼트는 레플리카셋을 관리하고 다른 유용한 기능과 함께 파드에 대한 선언적 업데이트를 제공하는 상위 개념입니다. 따라서 사용자 정의 오케스트레이션이 필요하거나 업데이트가 전혀 필요하지 않은 경우라면 레플리카셋을 직접 사용하는 대신 디플로이먼트를 사용하는 것이 좋습니다.",
    "MSG_REPLICASETS_CREATEYAML_DIV1_1": "디플로이먼트 생성",
    "MSG_REPLICASETS_CREATEYAML_DIV3_1": "디플로이먼트",
    "MSG_REPLICASETS_CREATEYAML_DIV3_TABSCHEMA_1": "리플리카셋은 지정된 수의 파드 복제본이 지정된 시간에 실행되도록 보장합니다. ",
    "MSG_REPLICASETS_CREATEYAML_DIV3_TABSAMPLE_1": "샘플",
    "MSG_REPLICASETS_CREATEYAML_DIV3_TABSAMPLE_2": "1. 기본 레플리카셋에서 레플리카 미설정 실행",
    "MSG_REPLICASETS_CREATEYAML_DIV3_TABSAMPLE_3": "특정 파드의 기본 레플리카 개수(1개)를 수행 하고자 할때 사용할 수 있습니다.\n별도 명시하지 않으면 기본값(1)로 1개의 파드가 실행됩니다.",
    "MSG_REPLICASETS_CREATEYAML_DIV3_TABSAMPLE_4": "2. 기본 3개의 레플리카셋 실행",
    "MSG_REPLICASETS_CREATEYAML_DIV3_TABSAMPLE_5": "특정 파드의 레플리카 3개를 수행하고자 할때 사용할 수 있습니다.",
    "MSG_REPLICASETS_CREATEYAML_DIV3_TABSAMPLE_6": "3. 레플리카셋의 파드를 실행시 초 단위 딜레이 이후 실행하기",
    "MSG_REPLICASETS_CREATEYAML_DIV3_TABSAMPLE_7": "특정 파드의 개수(3개) 레플리카를 수행하며, 레플리카 파드 생성 시 컨테이너 간 충돌을 피하기 위해 10초(minReadySeconds 옵션)후 실행하도록 설정할 수 있습니다. (minReadySeconds default : 0)",
    "MSG_REPLICASETS_CREATEYAML_DIV3_TABSAMPLE_8": "4. 파드 셀렉터 요건의 2개의 레플리카셋 실행",
    "MSG_REPLICASETS_CREATEYAML_DIV3_TABSAMPLE_9": "matchLabels외에 matchExpressions를 이용하여 파드 셀렉터 요건 목록을 통한 선택된 파드를 수행하고자 할 때 사용 할 수 있습니다.",
    "MSG_REPLICASETS_REPLICASETDETAILS_TABDETAILS_MONITORING_1": "모니터링 데이터",
    "MSG_REPLICASETS_REPLICASETDETAILS_TABDETAILS_MONITORING_2": "CPU",
    "MSG_REPLICASETS_REPLICASETDETAILS_TABDETAILS_MONITORING_3": "메모리",
    "MSG_REPLICASETS_REPLICASETDETAILS_TABDETAILS_MONITORING_4": "파일시스템",
    "MSG_REPLICASETS_REPLICASETDETAILS_TABDETAILS_MONITORING_5": "네트워크 트래픽",
    "MSG_HORIZONTALPODAUTOSCALERS_MAIN_DESCRIPTION_1": "Horizontal Pod Autoscaler(HPA)는 CPU, memory 및 사용자 정의 메트릭을 관찰하여 레플리케이션 컨트롤러, 디플로이먼트, 레플리카셋 또는 스테이트풀셋의 파드 개수를 자동으로 스케일합니다.\n\nHPA는 관찰된 평균 CPU 사용률이 사용자가 지정한 대상에 일치하도록 디플로이먼트의 레플리카의 수를 주기적으로 조정합니다.",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV1_1": "HPA 생성",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV1_DESCRIPTION_1": "CPU 사용량을 관찰하여 레플리케이션 컨트롤러, 디플로이먼트, 레플리카셋 또는 스테이트풀셋의 파드 개수를 자동으로 스케일링 합니다.",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_1": "이름",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_2": "네임스페이스",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_3": "대상 스케일링",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_4": "타입 선택",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_5": "디플로이먼트",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_6": "리플리카셋",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_7": "지정된 메트릭을 기반으로 배포 및 복제 세트의 자동 스케일링을 지원합니다.",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_8": "레플리카",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_9": "최소 값",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_10": "최대 값",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_11": "메트릭 구성",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_12": "메트릭 타입",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_13": "리소스",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_14": "커스텀 스크립트",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_15": "메트릭 항목",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_16": "CPU",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_17": "메모리",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_18": "대상 유형",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_19": "평균 사용량",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_20": "수량",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_21": "자동 확장을 활성화하는 데 사용하려는 지표를 지정하십시오.",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEFORM_DIV2_22": "다운 스케일 유지",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEYAML_DIV1_1": "HPA 생성",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEYAML_DIV3_1": "HPA",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEYAML_DIV3_TABSCHEMA_1": "HPA는 수평 파드 오토스칼러를 위한 구성으로, 지정된 메트릭스를 기반으로 스케일 하위 리소스를 구현하는 모든 리소스의 복제본 수를 자동으로 관리한다.",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEYAML_DIV3_TABSAMPLE_1": "샘플",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEYAML_DIV3_TABSAMPLE_2": "1. CPU 기준으로 HPA (Horizontal파드Autoscaler) 생성",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEYAML_DIV3_TABSAMPLE_3": "파드의 CPU 사용율이 50%가 넘어갈 경우 AutoScaling이 발생합니다.\n최소 파드의 개수는 1개이며, 최대 파드 개수는 3개입니다.\nAutoScale 조건 (targetAverageUtilization / targetAverageValue)",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEYAML_DIV3_TABSAMPLE_4": "2. Memory 기준으로 HPA(Horizontal파드Autoscaler) 생성",
    "MSG_HORIZONTALPODAUTOSCALERS_CREATEYAML_DIV3_TABSAMPLE_5": "파드의 Memory 사용이 100Mi가 넘어갈 경우 AutoScaling이 발생합니다.\n최소 파드의 개수는 1개이며, 최대 파드 개수는 5개입니다.\nAutoScale 조건 (targetAverageUtilization / targetAverageValue)",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV1_1": "가상 머신 생성",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV1_2": "일반",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV1_3": "이 단계에서는 가상 머신을 생성하는 데 필요한 모든 기본 정보를 다룹니다. 이 단계에서 '확인 및 생성' 버튼을 클릭하여 생성 단계 이전에 검토할 모든 항목을 건너뛸 수 있습니다. ",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV2_1": "이름",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV2_2": "템플릿",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV2_3": "템플릿 선택",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV2_4": "소스",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV2_5": "URL",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV2_6": "레지스트리",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV2_7": "가상 머신 이미지 선택",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV2_8": "퍼시스턴트 볼륨 클레임",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV2_9": "퍼시스턴트 볼륨 클레임 선택",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV2_10": "오퍼레이팅 시스템",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV2_11": "오퍼레이팅 시스템 선택",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV2_12": "설명",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV2_13": "생성 시 가상 머신 시작",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP2_DIV1_1": "네트워크 인터페이스",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP2_DIV1_2": "이 단계에서는 기본 네트워크 인터페이스가 제공됩니다. 이 네트워크 인터페이스를 정의하거나, 새 인터페이스를 추가하거나 제거하도록 선택할 수 있습니다. ",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP2_POPUP_1": "네트워크 인터페이스 추가",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP2_POPUP_2": "이름",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP2_POPUP_3": "모델",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP2_POPUP_4": "네트워크",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP2_POPUP_5": "타입",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP2_POPUP_6": "MAC 주소",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_DIV1_1": "스토리지",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_DIV1_2": "이 단계에서는 예정된 VM에 포함된 디스크 목록을 보여줍니다. 첫 번째 단계에서 선택한 소스에 따라 디스크 일부 또는 없음으로 미리 구성될 수 있습니다.",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_DIV2_1": "스토리지 추가",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_DIV2_2": "이름",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_DIV2_3": "용량",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_DIV2_4": "인터페이스",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_DIV2_5": "타입",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_DIV2_6": "스토리지 클래스",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_POPUP_1": "스토리지 추가",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_POPUP_2": "소스",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_POPUP_3": "소스 선택",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_POPUP_4": "퍼시스턴트 볼륨 클레임",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_POPUP_5": "퍼시스턴트 볼륨 클레임 선택",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_POPUP_6": "용량",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_POPUP_7": "인터페이스",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_POPUP_8": "스토리지 클래스",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP3_POPUP_9": "스토리지 클래스 선택",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP4_DIV1_1": "고급 설정",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP4_DIV1_2": "호스트 이름 및 인증된 ID/암호와 같은 공통 파라미터셋을 정의하려면 양식(기본값)을 입력하십시오.",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP4_DIV2_1": "설정 방식",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP4_DIV2_2": "폼",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP4_DIV2_3": "커스텀 스크립트",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP4_DIV2_4": "호스트 이름",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP4_DIV2_5": "ID",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP4_DIV2_6": "비밀번호",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP5_DIV1_1": "리뷰",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP5_DIV1_2": "이 가상 머신을 생성하기 전에 이 구성을 검토하고 확인하십시오.",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP5_DIV2_1": "이름",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP5_DIV2_2": "템플릿",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP5_DIV2_3": "소스",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP5_DIV2_4": "오퍼레이팅 시스템",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP5_DIV2_5": "생성 시 가상 머신 시작",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP5_DIV2_6": "네트워크 인터페이스",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP5_DIV2_7": "스토리지",
    "MSG_VIRTUALMACHINES_CREATEFORM_STEP5_DIV2_8": "호스트 설정 옵션",
    "MSG_VIRTUALMACHINES_CREATEYAML_DIV3_1": "",
    "MSG_VIRTUALMACHINES_CREATEYAML_DIV3_TABSAMPLE_1": "1. Windows 가상머신 샘플",
    "MSG_VIRTUALMACHINES_CREATEYAML_DIV3_TABSAMPLE_2": "2. Ubuntu 가상머신 샘플",
    "MSG_VIRTUALMACHINES_CREATEYAML_DIV3_TABSAMPLE_3": "3. CentOS 6 가상머신 샘플 ",
    "MSG_VIRTUALMACHINES_CREATEYAML_DIV3_TABSAMPLE_4": "CentOS 6 가상머신에 대한 VM 오브젝트를 생성하는데 사용할 수 있습니다.\n.spec.template.spec - device 및 리소스 설정",
    "MSG_VIRTUALMACHINES_CREATEYAML_DIV3_TABSAMPLE_5": "HyperCloud를 통해 사용자는 웹 콘솔에서 직접 가상 머신을 생성, 추가 및 관리 할 수 있습니다.\nHyperCloud는 KubeVirt 기술을 기반으로 개발자가 공유 환경에서 애플리케이션 컨테이너와 가상 머신에 있는 애플리케이션을 빌드, 수정 및 배포할 수 있도록 하는 통합 개발 플랫폼입니다. ",
    "MSG_VIRTUALMACHINES_CREATEYAML_DIV3_TABSAMPLE_6": "다음 지침에 따라 가상 머신을 생성합니다.",
    "MSG_SERVICES_MAIN_DESCRIPTION_1": "서비스는 익숙하지 않은 서비스 검색 메커니즘을 사용하도록 애플리케이션을 수정하지 않고도, Pod 집합에서 실행중인 애플리케이션을 네트워크 서비스로 노출하는 추상적인 방법입니다. 쿠버네티스는 파드에 고유한 IP 주소와 Pod 집합에 대한 단일 DNS 이름을 제공하고 Pod간에 부하를 분산할 수 있습니다.\n서비스에는 세 가지 유형이 있습니다.\n-ClusterIP : 클러스터 내부 IP에 대해 서비스를 노출합니다. 이 값을 선택하면 클러스터 내에서만 서비스에 연결할 수 있습니다. 기본 ServiceType.\n-NodePort : 정적 포트 (NodePort)에서 각 노드의 IP에 서비스를 노출합니다. NodePort 서비스가 라우팅하는 ClusterIP 서비스는 자동으로 생성됩니다. <NodeIP>:<NodePort>를 이용하여 클러스터 외부로부터 NodePort 서비스에 연결할 수 있습니다.\n-LoadBalancer : 클라우드 제공자의 로드 밸런서를 이용하여 서비스를 외부에 노출합니다. 외부 로드 밸런서가 라우팅하는 NodePort 및 ClusterIP 서비스는 자동으로 생성됩니다.",
    "MSG_SERVICES_CREATEFORM_DIV1_1": "서비스 생성",
    "MSG_SERVICES_CREATEFORM_DIV1_DESCRIPTION_1": "서비스를 생성하려면 포트와 서비스 유형을 지정하십시오.",
    "MSG_SERVICES_CREATEFORM_DIV2_1": "이름",
    "MSG_SERVICES_CREATEFORM_DIV2_2": "포트",
    "MSG_SERVICES_CREATEFORM_DIV2_3": "프로토콜",
    "MSG_SERVICES_CREATEFORM_DIV2_4": "대상 포트",
    "MSG_SERVICES_CREATEFORM_DIV2_5": "추가",
    "MSG_SERVICES_CREATEFORM_DIV2_6": "타입",
    "MSG_SERVICES_CREATEFORM_DIV2_7": "로드 밸런서",
    "MSG_SERVICES_CREATEFORM_DIV2_8": "선택기",
    "MSG_SERVICES_CREATEFORM_DIV2_9": "키",
    "MSG_SERVICES_CREATEFORM_DIV2_10": "값",
    "MSG_SERVICES_CREATEFORM_DIV2_11": "레이블",
    "MSG_SERVICES_CREATEFORM_DIV2_12": "예: App=frontend",
    "MSG_SERVICES_CREATEYAML_DIV3_1": "서비스",
    "MSG_SERVICES_CREATEYAML_DIV3_TABSAMPLE_1": "1. 클러스터 IP(기본값) 타입으로 서비스 생성",
    "MSG_SERVICES_CREATEYAML_DIV3_TABSAMPLE_2": "관리하고자 하는 파드를 셀렉터로 정의하며, 노출될 서비스 포트와 대상 포트를 지정하여 생성할 수 있습니다.\n\n클러스터 IP(내부 IP)가 할당됩니다.",
    "MSG_SERVICES_CREATEYAML_DIV3_TABSAMPLE_3": "2. 로드 밸런서 타입으로 서비스 생성",
    "MSG_SERVICES_CREATEYAML_DIV3_TABSAMPLE_4": "관리하고자 하는 파드를 셀렉터로 정의하며, 노출될 서비스 포트(80, 443)와 대상 포트(9000, 9443)를 지정하여 생성할 수 있습니다. \n\n외부 IP를 가지고 있는 로드 밸런서를 할당합니다.",
    "MSG_SERVICES_CREATEYAML_DIV3_TABSAMPLE_5": "3. 노드 포트 타입으로 서비스 생성",
    "MSG_SERVICES_CREATEYAML_DIV3_TABSAMPLE_6": "관리하고자 하는 파드를 셀렉터로 정의하며, 노출될 서비스 포트와 대상 포트를 지정하여 생성할 수 있습니다.\n\n노드 포트는 30000~32767 범위에서 고유한 노드 포트 값을 지정할 수 있지만 서비스 간 충돌을 방지하기 위해 자동 할당받는 것을 권장합니다.",
    "MSG_SERVICES_CREATEYAML_DIV3_TABSAMPLE_7": "4. ExternalName 타입으로 서비스 생성",
    "MSG_SERVICES_CREATEYAML_DIV3_TABSAMPLE_8": "일반적인 셀렉터 서비스가 아닌, DNS 이름에 대한 서비스에 매핑합니다.\nExample-service.default.svc.cluster.local 호스트를 검색하면, 클러스터 DNS 서비스는 example-service.com 값의 CNAME 레코드를 반환합니다.",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_1": "서비스 라우팅",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_2": "서비스 주소",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_3": "타입",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_4": "위치",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_5": "서비스 포트 매핑",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_6": "이름",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_7": "포트",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_8": "프로토콜",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_9": "파드 포트 또는 이름",
    "MSG_INGRESSES_MAIN_DESCRIPTION_1": "인그레스는 클러스터 외부에서 클러스터내의 서비스로 HTTP 및 HTTPS 경로를 노출합니다. 트래픽 라우팅은 인그레스 리소스에 정의된 규칙에 의해 제어됩니다. 인그레스는 외부에서 서비스로 연결할 수 있는 URL을 제공하고, 트래픽 부하를 분산하고, SSL/TLS를 종료하고, 이름 기반 가상 호스팅을 제공하도록 구성할 수 있습니다.",
    "MSG_INGRESSES_CREATEFORM_DIV1_1": "인그레스 생성",
    "MSG_INGRESSES_CREATEFORM_DIV1_DESCRIPTION_1": "인그레스 리소스를 만들려면 아래의 호스트와 파라미터를 지정하세요.",
    "MSG_INGRESSES_CREATEFORM_1": "이름",
    "MSG_INGRESSES_CREATEFORM_2": "호스트",
    "MSG_INGRESSES_CREATEFORM_3": "호스트 이름",
    "MSG_INGRESSES_CREATEFORM_4": "경로",
    "MSG_INGRESSES_CREATEFORM_5": "서비스 이름",
    "MSG_INGRESSES_CREATEFORM_6": "서비스 포트",
    "MSG_INGRESSES_CREATEFORM_7": "추가",
    "MSG_INGRESSES_CREATEYAML_DIV3_1": "인그레스",
    "MSG_INGRESSES_CREATEYAML_DIV3_TABSAMPLE_1": "1. 클러스터 내부 서비스로 매핑해주는 인그레스 서비스 생성",
    "MSG_INGRESSES_CREATEYAML_DIV3_TABSAMPLE_2": "인바운드 HTTP 요청에 대해서 특정 도메인 및 PreFix 정보와 매핑된 요청을 백엔드 서비스를 지정하여 수행할 수 있습니다.",
    "MSG_INGRESSES_CREATEYAML_DIV3_TABSAMPLE_3": "2. 단일 서비스 인그레스 생성",
    "MSG_INGRESSES_CREATEYAML_DIV3_TABSAMPLE_4": "기본적인 규칙 없이 백엔드 서비스를 지정하여 수행할 수 있습니다.",
    "MSG_NETWORKPOLICIES_MAIN_DESCRIPTION_1": "네트워크 정책은 파드 그룹이 서로 간에 또는 다른 네트워크 엔드포인트와 통신할 수 있도록 허용합니다. 네트워크 정책 리소스는 레이블을 사용해서 파드를 선택하고 선택한 파드에 허용되는 트래픽을 지정하는 규칙을 정의 합니다. 네트워크 정책은 네트워크 플러그인으로 구현되며, 네트워크 정책을 사용하려면 네트워크 정책을 지원하는 네트워킹 솔루션을 사용해야 합니다.",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV1_1": "파드 그룹이 상호 통신, 혹은 다른 네트워크 엔드포인트와 통신할 수 있도록 허용합니다.",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_1": "이름",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_2": "네임스페이스",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_3": "네임스페이스 선택",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_4": "레이블",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_5": "예: App=frontend",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_6": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_7": "인그레스",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_8": "네임스페이스 외부에서 들어오는 요청에 대한 네트워크 규칙을 정의할 수 있습니다.",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_9": "이그레스",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_10": "네임스페이스에서 외부로 나가려는 요청에 대한 네트워크 규칙을 정의할 수 있습니다.",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_11": "트래픽 허용",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_12": "선택",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_13": "파드",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_14": "네임스페이스",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_15": "네임스페이스 + 파드",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_16": "IP 허용블록",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_17": "모두 허용",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_18": "모두 차단",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_19": "네임스페이스 셀렉터",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_20": "파드 셀렉터",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_21": "포트",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_22": "모두 허용",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_23": "TCP",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_24": "UDP",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_25": "SCTP",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_26": "CIDR",
    "MSG_NETWORKPOLICIES_CREATEFORM_DIV2_27": "CIDR 제외",
    "MSG_NETWORKPOLICIES_CREATEYAML_DIV3_TABSCHEMA_1": "네트워크폴리시는 파드셋에 허용되는 네트워크 트래픽을 설명합니다. ",
    "MSG_PERSISTENTVOLUMES_MAIN_DESCRIPTION_1": "퍼시스턴트볼륨 (PV)은 관리자가 프로비저닝하거나 스토리지 클래스를 사용하여 동적으로 프로비저닝한 클러스터의 스토리지이다. \nPV는 NFS, iSCSI 또는 클라우드 공급자별 스토리지 시스템 등 스토리지 구현에 대한 세부 정보를 담아낸다.",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV1_DESCRIPTION_1": "다른 매개 변수와 함께 스토리지 클래스를 지정하여 퍼시스턴트 볼륨 (PV)을 생성합니다. PV는 다른 클러스터 사용자가 사용할 수 있습니다.",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_1": "이름",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_2": "네임스페이스",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_3": "네임스페이스 선택",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_4": "볼륨 플러그인",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_5": "볼륨 플러그인 선택",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_6": "rbd",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_7": "cephfs",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_8": "local",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_9": "hostpath",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_10": "nfs",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_11": "iscsi",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_12": "볼륨을 생성할 플러그인을 지정해주세요.",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_13": "스토리지 크기",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_14": "볼륨 모드",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_15": "Filesystem",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_16": "Block",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_17": "Raw Block Device가 필요할 경우 Block으로 설정할 수 있습니다.",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_18": "접근 모드",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_19": "ReadWriteOnce",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_20": "ReadOnlyMany",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_21": "ReadWriteMany",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_22": "해당 볼륨에 접근할 파드의 접근 권한을 설정합니다.",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_23": "스토리지 클래스",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_24": "타입 선택",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_25": "표준 (기본)",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_26": "rook-ceph-block",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_27": "없음",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_28": "스토리지 클래스를 지정하여 퍼시스턴트 볼륨에 대한 정책을 설정할 수 있습니다.",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_29": "퍼시스턴트 볼륨 리클레임 정책",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_30": "보존",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_31": "재활용",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_32": "삭제 ",
    "MSG_PERSISTENTVOLUMES_CREATEFORM_DIV2_33": "필요하지 않은 퍼시스턴트 볼륨 클레임을 삭제한 경우 남겨진 퍼시스턴트 볼륨 처리에 관한 정책을 선택해 주세요.",
    "MSG_PERSISTENTVOLUMES_CREATEYAML_DIV3_1": "퍼시스턴트 볼륨",
    "MSG_PERSISTENTVOLUMES_CREATEYAML_DIV3_TABSCHEMA_1": "",
    "MSG_PERSISTENTVOLUMES_CREATEYAML_DIV3_TABSAMPLE_1": "1. ReadWriteOnce Mode로 퍼시스턴트 볼륨 생성",
    "MSG_PERSISTENTVOLUMES_CREATEYAML_DIV3_TABSAMPLE_2": "하나의 노드에서 볼륨을 읽기, 쓰기로 마운트하며, 사용이 끝난 퍼시스턴트볼륨을 삭제하도록 생성할 수 있습니다.",
    "MSG_PERSISTENTVOLUMES_CREATEYAML_DIV3_TABSAMPLE_3": "2. ReadOnlyMany Mode로 퍼시스턴트 볼륨 생성",
    "MSG_PERSISTENTVOLUMES_CREATEYAML_DIV3_TABSAMPLE_4": "여러 노드에서 볼륨을 읽기 전용으로 마운트하며, 사용이 끝난 퍼시스턴트볼륨을 삭제하지 않고 데이터를 보존정책으로 생성할 수 있습니다.",
    "MSG_PERSISTENTVOLUMES_CREATEYAML_DIV3_TABSAMPLE_5": "3. ReadWriteMany Mode로 퍼시스턴트 볼륨 생성",
    "MSG_PERSISTENTVOLUMES_CREATEYAML_DIV3_TABSAMPLE_6": "하나의 노드에서 볼륨을 읽기, 쓰기로 마운트하며, 사용이 끝난 퍼시스턴트 볼륨을 삭제하도록 생성할 수 있습니다.\n블록 스토리지 클래스를 사용하고 volumeMode가 Block인 경우에만 ReadWriteMany 적용이 가능합니다.",
    "MSG_PERSISTENTVOLUMES_CREATEYAML_DIV3_TABSAMPLE_7": "4. 플러그인 유형 스토리지 프로비저닝",
    "MSG_PERSISTENTVOLUMES_CREATEYAML_DIV3_TABSAMPLE_8": "플러그인 유형의 스토리지를 사용시에는 상세 명세(nfs, mountOptions) 가 필요합니다. 사용이 끝난 퍼시스턴트볼륨은 데이터를 삭제하고, 새로운 퍼시스턴트볼륨 클레임에서 재사용이 가능합니다.\nRecycle은 플러그인 유형이 nfs, hostpath인 경우만 사용 가능합니다.",
    "MSG_PERSISTENTVOLUMESCLAIMS_MAIN_DESCRIPTION_1": "PersistentVolumeClaim (PVC)은 사용자의 저장소에 대한 요청입니다. PVC는 특정 크기와 액세스 모드를 요청할 수 있습니다.\nPV가 사용자의 퍼시스턴트볼륨클레임과 일치하지 않으면 클러스터는 PVC를 위해 특별히 볼륨을 동적으로 프로비저닝 하려고 시도할 수 있습니다. 이 프로비저닝은 스토리지클래스를 기반으로 합니다. PVC는 스토리지 클래스를 요청해야 하며 관리자는 동적 프로비저닝이 발생하도록 해당 클래스를 생성하고 구성해야 합니다.",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV1_DESCRIPTION_1": "스토리지 구성을 지정하여 PV에 대한 요청을 작성합니다. ",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_1": "이름",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_2": "네임스페이스",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_3": "네임스페이스 선택",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_4": "접근 모드",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_5": "해당 볼륨에 접근할 파드의 접근 권한을 설정합니다.",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_6": "볼륨 모드",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_7": "Raw Block Device가 필요할 경우 Block으로 설정할 수 있습니다.",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_8": "스토리지 클래스",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_9": "표준 (기본)",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_10": "rook-ceph-block",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_11": "없음",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_12": "요청한 클래스와 동일한 클래스인 퍼시스턴트 볼륨만 바인딩 됩니다.",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_13": "스토리지 크기",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_14": "요청할 스토리지의 크기를 입력합니다.",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_15": "셀렉터",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_16": "레이블",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_17": "예: App=frontend",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_18": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_19": "익스프레션",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_20": "키",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_21": "오퍼레이터 선택",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_22": "값",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEFORM_DIV2_23": "키, 값의 목록, 그리고 키와 값에 관련된 연산자를 지정합니다.",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEYAML_DIV3_TABSCHEMA_1": "PersistentVolumeClaim은 퍼시스턴트 볼륨에 대한 사용자의 요청이자 클레임입니다.",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEYAML_DIV3_TABSAMPLE_1": "1. 1Gi Filestorage를 RWX 모드로 생성",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEYAML_DIV3_TABSAMPLE_2": "스토리지 클래스를 이용하여 1Gi FileStorage를 생성하고, 다수의 파드들이 연결 및 읽기/쓰기가 가능합니다.\nReadWriteOnce : 하나의 파드만 마운트 가능하며 읽기/쓰기 허용\nReadOnlyMany : 다수의 파드에 마운트 가능하며 읽기 허용\nReadWriteMany : 다수의 파드에 마운트 가능하며 읽기/쓰기 허용",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEYAML_DIV3_TABSAMPLE_3": "2. 1Gi Blockstorage를 ROX 모드로 생성",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEYAML_DIV3_TABSAMPLE_4": "스토리지 클래스를 이용하여 1Gi Blockstorage를 생성하고 다수의 파드들이 마운트 및 읽기가 가능합니다.\n(volumeMode : Filesystem(default) / Block )",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEYAML_DIV3_TABSAMPLE_5": "3. 생성된 퍼시스턴트 볼륨을 이용하여 RWX모드로 퍼시스턴트 볼륨 클레임 생성",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEYAML_DIV3_TABSAMPLE_6": "생성된 퍼시스턴트 볼륨 (volumeName)를 이용하여 퍼시스턴트 볼륨 클레임을 RWX모드로 생성할 수 있습니다.\naccessModes 및 리소스 항목은 퍼시스턴트 볼륨과 동일해야 합니다.",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEYAML_DIV3_TABSAMPLE_7": "4. 셀렉터 조건에 맞는 퍼시스턴트 볼륨 클레임을 RWX 모드로 생성",
    "MSG_PERSISTENTVOLUMESCLAIMS_CREATEYAML_DIV3_TABSAMPLE_8": "생성된 스토리지 클래스를 사용하여 라벨 조건에 만족하는 퍼시스턴트 볼륨과 연결하여 RWX 모드로 퍼시스턴트 볼륨 클레임을 생성할 수 있습니다.",
    "MSG_STORAGECLASSES_MAIN_DESCRIPTION_1": "스토리지클래스는 관리자가 제공하는 스토리지의 ",
    "MSG_STORAGECLASSES_CREATEFORM_DIV1_DESCRIPTION_1": "Provisioner, parameters 및 reclaimPolicy 필드를 지정하여 스토리지 클래스를 생성합니다.",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_1": "이름",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_2": "프로비저너",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_3": "퍼시스턴트 볼륨의 프로비저닝에 사용되는 볼륨 플러그인을 결정합니다. 선택한 프로비저너 항목에 따라 다른 파라미터 옵션을 설정할 수 있습니다.",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_4": "파라미터",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_5": "유형",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_6": "iopsPerGB",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_7": "fsType",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_8": "암호화",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_9": "kmsKeyId",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_10": "리클레임 정책",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_11": "Delete",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_12": "Retain",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_13": "생성된 퍼시스턴트 볼륨에 대한 관리 정책을 설정합니다.",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_14": "볼륨 확장 허용",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_15": "예",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_16": "아니오",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_17": "볼륨 바인딩 모드",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_18": "지금 바로 ",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_19": "첫번째 소비자 대기 ",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_20": "볼륨 바인딩과 동적 프로비저닝의 시작 시기를 제어합니다.",
    "MSG_STORAGECLASSES_CREATEFORM_DIV2_21": "마운트 옵션",
    "MSG_STORAGECLASSES_CREATEYAML_DIV3_1": "스토리지 클래스",
    "MSG_STORAGECLASSES_CREATEYAML_DIV3_TABSCHEMA_1": "스토리지 클래스는 퍼시스턴트 볼륨을 동적으로 프로비저닝할 수 있는 스토리지 클래스 파라미터를 설명한다.",
    "MSG_STORAGECLASSES_CREATEYAML_DIV3_TABSAMPLE_1": "1. 동적 바인딩 스토리지 생성",
    "MSG_STORAGECLASSES_CREATEYAML_DIV3_TABSAMPLE_2": "파드가 생성 시 동적으로 스토리지 클래스를 생성하여 볼륨 바인딩를 하도록 WaitForFirstConsumer 모드를 지정할 수 있습니다.",
    "MSG_STORAGECLASSES_CREATEYAML_DIV3_TABSAMPLE_3": "2. rook-ceph를 이용하여 블록 스토리지 클래스 생성",
    "MSG_STORAGECLASSES_CREATEYAML_DIV3_TABSAMPLE_4": "rook-ceph를 이용하여 블록 스토리지 클래스를 생성할 수 있습니다.",
    "MSG_STORAGECLASSES_CREATEYAML_DIV3_TABSAMPLE_5": "3. Ceph-fs를 이용하여 스토리지 클래스 생성",
    "MSG_STORAGECLASSES_CREATEYAML_DIV3_TABSAMPLE_6": "Ceph-fs를 이용하여 스토리지 클래스를 CephFS 방식으로 생성할 수 있습니다.",
    "MSG_DATAVOLUMES_MAIN_DESCRIPTION_1": "데이터 볼륨은 VM 데이터로 PVC의 생성을 자동화해주는 기능입니다. 데이터 볼륨은 전체 기능, 안정적인 API 및 VM 기능과의 더 나은 통합을 제공하므로 표준 PVC 보다 VM 워크로드에 더 적합합니다.",
    "MSG_DATAVOLUMES_CREATEFORM_DIV1_DESCRIPTION_1": "VM 이미지 소스 및 PVC 구성의 세부 사항을 지정하여 데이터 볼륨을 생성합니다.",
    "MSG_DATAVOLUMES_CREATEYAML_DIV3_1": "데이터 볼륨",
    "MSG_DATAVOLUMES_CREATEYAML_DIV3_TABSAMPLE_1": "1. HTTP URL 이용하여 데이터 볼륨 생성",
    "MSG_DATAVOLUMES_CREATEYAML_DIV3_TABSAMPLE_2": "http url를 이용하여 가상 머신 이미지를 가져와서 데이터 볼륨을 생성할 수 있습니다.\n컨텐츠 유형 (kubevirt (default), archive ) / volumeMode (Filesystem(default) / block))",
    "MSG_DATAVOLUMES_CREATEYAML_DIV3_TABSAMPLE_3": "2. s3를 이용하여 데이터 볼륨 생성",
    "MSG_DATAVOLUMES_CREATEYAML_DIV3_TABSAMPLE_4": "s3를 이용하여 가상 머신 이미지를 가져와서 데이터 볼륨을 생성할 수 있습니다.\nvolumeMode가 block이기 때문에 accessModes(ReadWriteMany)를 사용할 수 있습니다.",
    "MSG_DATAVOLUMES_CREATEYAML_DIV3_TABSAMPLE_5": "3. 레지스트리를 이용하여 데이터 볼륨 생성",
    "MSG_DATAVOLUMES_CREATEYAML_DIV3_TABSAMPLE_6": "구축된 레지스트리를 이용하여 가상 머신 이미지를 가져와서 데이터 볼륨을 생성할 수 있습니다.",
    "MSG_TASKS_MAIN_DESCRIPTION_1": "태스크는 연속 통합 플로우의 일부로 어떤 순서로 실행할지 정의하고 정렬하는 스텝(Steps)의 모음입니다. 태스크 A는 쿠버네티스 클러스터에서 파드로 실행됩니다.",
    "MSG_TASKS_CREATFORM_DIV1_DESCRIPTION_1": "입력을 처리하고 출력을 생성하는 특정 빌드 또는 배치 도구의 시작을 위한 일련의 스텝(Step)을 정의하십시오.",
    "MSG_TASKS_CREATFORM_DIV2_1": "타입",
    "MSG_TASKS_CREATFORM_DIV2_2": "직접 추가",
    "MSG_TASKS_CREATFORM_DIV2_3": "프리셋",
    "MSG_TASKS_CREATFORM_DIV2_4": "프리셋 선택",
    "MSG_TASKS_CREATFORM_DIV2_5": "(S2I) Source to image",
    "MSG_TASKS_CREATFORM_DIV2_6": "배포",
    "MSG_TASKS_CREATFORM_DIV2_7": "분석 및 스캔 ",
    "MSG_TASKS_CREATFORM_DIV2_8": "이름",
    "MSG_TASKS_CREATFORM_DIV2_9": "네임스페이스",
    "MSG_TASKS_CREATFORM_DIV2_10": "네임스페이스 선택",
    "MSG_TASKS_CREATFORM_DIV2_11": "인풋 리소스",
    "MSG_TASKS_CREATFORM_DIV2_12": "이름",
    "MSG_TASKS_CREATFORM_DIV2_13": "타입",
    "MSG_TASKS_CREATFORM_DIV2_14": "리소스 저장 경로",
    "MSG_TASKS_CREATFORM_DIV2_15": "이 리소스를 선택 항목으로 제공합니다.",
    "MSG_TASKS_CREATFORM_DIV2_16": "선택 항목으로 제공할 경우, 태스크 런 또는 파이프라인 메뉴에서 파이프라인 리소스를 필요에 따라 할당할 수 있습니다.",
    "MSG_TASKS_CREATFORM_DIV2_17": "아웃풋 리소스",
    "MSG_TASKS_CREATFORM_DIV2_18": "태스크 파라미터 구성",
    "MSG_TASKS_CREATFORM_DIV2_19": "이름",
    "MSG_TASKS_CREATFORM_DIV2_20": "설명",
    "MSG_TASKS_CREATFORM_DIV2_21": "타입",
    "MSG_TASKS_CREATFORM_DIV2_22": "String",
    "MSG_TASKS_CREATFORM_DIV2_23": "Array",
    "MSG_TASKS_CREATFORM_DIV2_24": "기본 값",
    "MSG_TASKS_CREATFORM_DIV2_25": "태스크 런 또는 파이프라인 생성 시 파라미터를 입력하지 않을 경우 기본 값으로 설정됩니다.",
    "MSG_TASKS_CREATFORM_DIV2_26": "스텝",
    "MSG_TASKS_CREATFORM_DIV2_27": "타입",
    "MSG_TASKS_CREATFORM_DIV2_28": "프리셋",
    "MSG_TASKS_CREATFORM_DIV2_29": "직접 추가",
    "MSG_TASKS_CREATFORM_DIV2_30": "프리셋 선택",
    "MSG_TASKS_CREATFORM_DIV2_31": "승인 ",
    "MSG_TASKS_CREATFORM_DIV2_32": "알림",
    "MSG_TASKS_CREATFORM_DIV2_33": "이미지",
    "MSG_TASKS_CREATFORM_DIV2_34": "이미지 레지스트리",
    "MSG_TASKS_CREATFORM_DIV2_35": "직접 입력",
    "MSG_TASKS_CREATFORM_DIV2_36": "이미지 레지스트리 선택",
    "MSG_TASKS_CREATFORM_DIV2_37": "이미지",
    "MSG_TASKS_CREATFORM_DIV2_38": "이미지 선택",
    "MSG_TASKS_CREATFORM_DIV2_39": "이미지 태그",
    "MSG_TASKS_CREATFORM_DIV2_40": "커맨드",
    "MSG_TASKS_CREATFORM_DIV2_41": "인수",
    "MSG_TASKS_CREATFORM_DIV2_42": "환경 변수",
    "MSG_TASKS_CREATFORM_DIV2_43": "키",
    "MSG_TASKS_CREATFORM_DIV2_44": "값",
    "MSG_TASKS_CREATFORM_DIV2_45": "마운트 경로",
    "MSG_TASKS_CREATFORM_DIV2_46": "마운트할 볼륨을 먼저 추가해 주세요.",
    "MSG_TASKS_CREATFORM_DIV2_47": "볼륨 선택",
    "MSG_TASKS_CREATFORM_DIV2_48": "마운트 경로를 입력해 주세요.",
    "MSG_TASKS_CREATFORM_DIV2_49": "메일 설정",
    "MSG_TASKS_CREATFORM_DIV2_50": "메일 서버",
    "MSG_TASKS_CREATFORM_DIV2_51": "발신자",
    "MSG_TASKS_CREATFORM_DIV2_52": "제목",
    "MSG_TASKS_CREATFORM_DIV2_53": "내용",
    "MSG_TASKS_CREATEYAML_DIV3_TABSAMPLE_1": "1. Python 스크립트를 실행하는 태스크 생성",
    "MSG_TASKS_CREATEYAML_DIV3_TABSAMPLE_2": "파이프라인 리소스에서 생성한 리소스를 참조하여 Python 스크립트를 실행할 수 있는 태스크를 생성할 수 있습니다.",
    "MSG_TASKS_CREATEYAML_DIV3_TABSAMPLE_3": "2. Steps에서 파라미터를 사용하도록 태스크 생성",
    "MSG_TASKS_CREATEYAML_DIV3_TABSAMPLE_4": "Flags 및 샘플 URL 항목을 파라미터 형태로 받아 태스크를 생성할 수 있습니다.",
    "MSG_TASKRUNS_MAIN_DESCRIPTION_1": "TaskRun을 사용하면 클러스터에서 태스크를 인스턴스화하고 실행할 수 있습니다. 태스크는 컨테이너 이미지를 실행하는 하나 이상의 스텝(Step)을 지정하고 각 컨테이너는 특정 빌드 작업을 수행합니다. TaskRun은 모든 단계가 성공적으로 실행되거나 실패가 발생할 때까지 태스크의 스텝(Step)을 지정된 순서대로 실행합니다.",
    "MSG_TASKRUNS_CREATEFORM_DIV1_1": "특정 입력, 출력, 실행 파라미터로 실행할 태스크를 인스턴스화합니다. 단독으로 또는 파이프라인의 일부로 호출할 수 있습니다.",
    "MSG_TASKRUNS_CREATEFORM_DIV2_1": "이름",
    "MSG_TASKRUNS_CREATEFORM_DIV2_2": "네임스페이스",
    "MSG_TASKRUNS_CREATEFORM_DIV2_3": "네임스페이스 선택",
    "MSG_TASKRUNS_CREATEFORM_DIV2_4": "태스크",
    "MSG_TASKRUNS_CREATEFORM_DIV2_5": "태스크 선택",
    "MSG_TASKRUNS_CREATEFORM_DIV2_6": "태스크 파라미터",
    "MSG_TASKRUNS_CREATEFORM_DIV2_7": "인풋 리소스",
    "MSG_TASKRUNS_CREATEFORM_DIV2_8": "파이프라인 리소스 선택",
    "MSG_TASKRUNS_CREATEFORM_DIV2_9": "아웃풋 리소스",
    "MSG_TASKRUNS_CREATEFORM_DIV2_10": "파이프라인 리소스 선택",
    "MSG_TASKRUNS_CREATEFORM_DIV2_11": "타임아웃 설정 ",
    "MSG_TASKRUNS_CREATEFORM_DIV2_12": "분",
    "MSG_TASKRUNS_CREATEFORM_DIV2_13": "태스크 런이 실행될 수 있는 최대 시간을 분 단위로 설정할 수 있습니다. 값을 설정하지 않을 경우 세계 시간 기준으로 전역 기본 타임아웃 값이 적용되며, 값을 0으로 설정할 경우 태스크 런은 타임아웃없이 계속 실행됩니다.",
    "MSG_TASKRUNS_CREATEFORM_DIV2_14": "서비스 어카운트",
    "MSG_TASKRUNS_CREATEFORM_DIV2_15": "서비스 어카운트 선택",
    "MSG_TASKRUNS_CREATEFORM_DIV2_16": "서비스 계정을 지정하면 특정 자격 증명으로 태스크 런에서 해당 태스크를 실행할 수 있습니다. 지정하지 않을 경우, 태스크 런은 configmap-defaults ConfigMap에 지정된 자격증명으로 실행됩니다. 기본값을 지정하지 않으면, 태스크 런은 대상 네임스페이스에 대해 설정된 기본 서비스 계정으로 실행됩니다.",
    "MSG_TASKRUNS_CREATEYAML_DIV3_TABSAMPLE_1": "1. 태스크를 실행하는 태스크 런 생성",
    "MSG_TASKRUNS_CREATEYAML_DIV3_TABSAMPLE_2": "파이프라인 리소스에서 생성한 리소스를 이용하여 파드가 생성되고 태스크를 실행할 수 있습니다.",
    "MSG_TASKRUNS_CREATEYAML_DIV3_TABSAMPLE_3": "2. 태스크를 실행할 때 파라미터를 설정하여 태스크 런 생성",
    "MSG_TASKRUNS_CREATEYAML_DIV3_TABSAMPLE_4": "Flags 및 샘플 URL 항목을 파라미터 형태로 받아 태스크를 실행하는 태스크 런을 생성할 수 있습니다.",
    "MSG_IMAGEREGISTRIES_MAIN_DESCRIPTION_1": "HyperCloud는 컨테이너 이미지에 대한 프라이빗 레지스트리 생성을 지원합니다. 클러스터 내에서 레지스트리를 호스팅하는 것은 이미지를 가져오고 내보낼 수 있는 가장 빠른 방법이며, 이는 CI/CD 파이프라인에서 이미지를 자동 확장 및 배포하는 것과 같은 경우에 중요합니다.",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV1_1": "아래 파라미터를 지정하여 프라이빗 레지스트리를 만듭니다.",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_1": "이름",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_2": "네임스페이스",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_3": "네임스페이스 선택",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_4": "레지스트리 생성 이미지",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_5": "이미지 주소를 입력해 주세요.",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_6": "생성할 레지스트리의 이미지 주소를 입력해 주세요.",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_7": "로그인 정보",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_8": "ID",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_9": "비밀번호",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_10": "비밀번호 확인",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_11": "생성할 레지스트리에 접근하기 위해 필요한 계정 정보를 입력해 주세요.",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_12": "서비스",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_13": "서비스 타입",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_14": "인그레스",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_15": "로드밸런서",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_16": "도메인 이름",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_17": "예: 192.168.6.110.nip.io",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_18": "포트",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_19": "1~65535",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_20": "생성할 레지스트리의 서비스 타입을 선택하여 네트워크 정책을 생성해 주세요.",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_21": "퍼시스턴트 볼륨 클레임",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_22": "생성된 퍼시스턴트 볼륨 클레임 선택",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_23": "새로운 퍼시스턴트 볼륨 클레임 생성",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_24": "퍼시스턴트 볼륨 선택",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_25": "생성할 레지스트리에서 사용할 새로운 퍼시스턴트 볼륨 클레임을 생성하거나, 기존에 생성된 퍼시스턴트 볼륨 클레임을 선택해 주세요.",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_26": "접근 모드",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_27": "ReadWriteOnce",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_28": "ReadWriteMany",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_29": "스토리지 크기",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_30": "스토리지 클래스 이름",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_31": "스토리지 클래스 선택",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_32": "생성할 레지스트리에서 사용할 새로운 퍼시스턴트 볼륨 클레임을 생성하거나, 기존에 생성된 퍼시스턴트 볼륨 클레임을 선택해 주세요.",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_33": "레이블",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_34": "예: App=frontend",
    "MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_35": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_IMAGEREGISTRIES_CREATEYAML_DIV3_TABSAMPLE_1": "1. 클러스터의 모든 노드에 데몬셋 생성",
    "MSG_IMAGEREGISTRIES_CREATEYAML_DIV3_TABSAMPLE_2": "1) DockerHub(apache)의 이미지를 이용하여 데몬셋을 생성합니다.\n2) 클러스터의 모든 노드에 CPU 0.1 Core/Memory 0.2GB로 자원이 제한된 파드가 생성됩니다.",
    "MSG_IMAGEREGISTRIES_CREATEYAML_DIV3_TABSAMPLE_3": "2. Master Node를 제외하여 데몬셋 생성",
    "MSG_IMAGEREGISTRIES_CREATEYAML_DIV3_TABSAMPLE_4": "DockerHub(apache) 이미지를 이용하여 데몬셋을 생성합니다. 마스터 노드를 제외한 모든 노드에 CPU 0.1 Core/Memory 0.2GB로 자원이 제한된 파드가 생성됩니다. (마스터 노드일 경우에도, Taint에 node-role.kubernetes.io/master 가 없으면 생성됩니다. )",
    "MSG_IMAGEREGISTRIES_CREATEYAML_DIV3_TABSAMPLE_5": "3. 업데이트 전략 방식을 이용한 데몬셋 생성",
    "MSG_IMAGEREGISTRIES_CREATEYAML_DIV3_TABSAMPLE_6": "1) DockerHub(apache) 이미지를 이용하여 데몬셋을 생성하며,  클러스터를 구성하는 모든 노드에 파드가 생성됩니다.\n2) 파드 이미지 업데이트 시 업데이트 전략 설정으로  업데이트 방식을 선택할 수 있습니다. (RollingUpdate, OnDelete(default))\n\n3) 생성된 파드의 대기 시간을 minReadySeconds 조절할 수 있습니다. (default(0초))",
    "MSG_SERVICEACCOUNTS_CREATEFORM_DIV1_1": "파드에서 실행되는 프로세스의 ID를 식별하여 나타냅니다.",
    "MSG_SERVICEACCOUNTS_CREATEFORM_DIV2_1": "이름",
    "MSG_SERVICEACCOUNTS_CREATEFORM_DIV2_2": "네임스페이스",
    "MSG_SERVICEACCOUNTS_CREATEFORM_DIV2_3": "네임스페이스 선택",
    "MSG_SERVICEACCOUNTS_CREATEYAML_DIV3_TABSCHEMA_1": "ServiceAccount는 다음과 함께 바인딩됩니다. * 이름: 사용자 및 주변 시스템이 이해하는 이름,  * ID: 인증 및 권한 부여가 가능한 주체 * 시크릿 집합 ",
    "MSG_SERVICEACCOUNTS_CREATEYAML_DIV3_TABSAMPLE_1": "1. API 호출을 위한 계정 생성",
    "MSG_SERVICEACCOUNTS_CREATEYAML_DIV3_TABSAMPLE_2": "HyperCloud API를 호출하거나, 접근 권한을 부여하고자 할 때 생성할 수 있습니다. 서비스 계정이 생성될 때 시크릿은 자동 생성됩니다.",
    "MSG_ROLES_MAIN_DESCRIPTION_1": "RBAC 롤 또는 ClusterRole은 권한 집합을 나타내는 규칙을 포함합니다. 권한은 완전히 가산적입니다 ( ",
    "MSG_ROLES_CREATEFORM_DIV1_1": "권한 및 리소스 집합을 참조하여 롤을 만듭니다.",
    "MSG_ROLES_CREATEFORM_DIV2_1": "롤 유형",
    "MSG_ROLES_CREATEFORM_DIV2_2": "Namespace Role (Role)",
    "MSG_ROLES_CREATEFORM_DIV2_3": "네임 스페이스 롤 생성 시 해당 네임 스페이스에만 적용됩니다.",
    "MSG_ROLES_CREATEFORM_DIV2_4": "Cluster Role (Cluster Role)",
    "MSG_ROLES_CREATEFORM_DIV2_5": "클러스터 롤 생성 시 모든 네임 스페이스에 적용됩니다.",
    "MSG_ROLES_CREATEFORM_DIV2_6": "이름",
    "MSG_ROLES_CREATEFORM_DIV2_7": "네임스페이스",
    "MSG_ROLES_CREATEFORM_DIV2_8": "네임스페이스 선택",
    "MSG_ROLES_CREATEFORM_DIV2_9": "리소스 부여",
    "MSG_ROLES_CREATEFORM_DIV2_10": "API 그룹",
    "MSG_ROLES_CREATEFORM_DIV2_11": "리소스",
    "MSG_ROLES_CREATEFORM_DIV2_12": "Verbs",
    "MSG_ROLES_CREATEFORM_DIV2_13": "모두",
    "MSG_ROLES_CREATEFORM_DIV2_14": "Create",
    "MSG_ROLES_CREATEFORM_DIV2_15": "Delete",
    "MSG_ROLES_CREATEFORM_DIV2_16": "Get",
    "MSG_ROLES_CREATEFORM_DIV2_17": "List",
    "MSG_ROLES_CREATEFORM_DIV2_18": "Patch",
    "MSG_ROLES_CREATEFORM_DIV2_19": "Update",
    "MSG_ROLES_CREATEFORM_DIV2_20": "Watch",
    "MSG_ROLES_CREATEFORM_DIV2_21": "롤에 부여할 권한을 선택해 주세요.",
    "MSG_ROLEBINDINGS_MAIN_DESCRIPTION_1": "롤바인딩이란 롤에 정의된 권한을 사용자 또는 사용자 집합에 부여하는 것입니다. 이는 대상의 (사용자, 그룹 또는 서비스 계정) 목록과 부여되는 롤에 대한 참조를 포함합니다. RoleBinding은 특정 네임스페이스 내에서 권한을 부여하는 반면 ClusterRoleBinding은 클러스터 전체에 대한 접근 권한을 부여합니다.\n\n\nRoleBinding은 동일한 네임스페이스의 모든 롤을 참조할 수 있습니다. RoleBinding은 또한 ClusterRole을 참조하고 해당 ClusterRole을 RoleBinding의 네임스페이스에 바인딩할 수 있습니다. ClusterRole을 클러스터의 모든 네임스페이스에 바인딩하려면 ClusterRoleBinding을 사용합니다.\n\n롤바인딩 클레임을 사용하면 사용자 또는 사용자 그룹과 연결할 새 롤을 요청할 수 있습니다.",
    "MSG_ROLEBINDINGS_ROLEBINDINGS_TABROLEBINDINGS_1": "롤바인딩",
    "MSG_ROLEBINDINGS_ROLEBINDINGS_TABROLEBINDINGCLAIMS_1": "롤바인딩 요청",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV1_1": "사용자/그룹을 선택한 역할에 연결하여 액세스 및 리소스 유형을 정의하십시오.",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_1": "바인딩 유형",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_2": "네임스페이스 롤바인딩 (롤바인딩)",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_3": "선택한 네임스페이스 내의 사용자 또는 사용자 그룹에 권한을 부여합니다.",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_4": "클러스터 롤 바인딩 (클러스터 롤 바인딩)",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_5": "클러스터 수준 및 모든 네임스페이스에서 사용자 또는 사용자 그룹에 권한을 부여합니다.",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_6": "롤바인딩",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_7": "이름",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_8": "롤바인딩 이름",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_9": "네임스페이스",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_10": "네임스페이스 선택",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_11": "롤",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_12": "롤 이름",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_13": "롤 이름 선택",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_14": "대상",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_15": "사용자",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_16": "그룹",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_17": "서비스 어카운트",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_18": "대상 이름 ",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_19": "대상 이름 ",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_20": "대상 네임스페이스",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGFORM_DIV2_21": "네임스페이스 선택",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGCLAIMFORM_DIV1_1": "롤 및 대상을 지정하여 새 롤바인딩을 요청하십시오.",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGCLAIMFORM_DIV2_1": "이름",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGCLAIMFORM_DIV2_2": "롤바인딩 이름",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGCLAIMFORM_DIV2_3": "롤 바인딩 클레임을 통해 생성할 롤 바인딩의 이름을 입력합니다.",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGCLAIMFORM_DIV2_4": "롤",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGCLAIMFORM_DIV2_5": "롤 선택",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGCLAIMFORM_DIV2_6": "대상",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGCLAIMFORM_DIV2_7": "본인",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGCLAIMFORM_DIV2_8": "사용자 그룹",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGCLAIMFORM_DIV2_9": "서비스 어카운트",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGCLAIMFORM_DIV2_10": "대상 이름",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGCLAIMFORM_DIV2_11": "네임스페이스",
    "MSG_ROLEBINDINGS_CREATEROLEBINDINGCLAIMFORM_DIV2_12": "네임스페이스 선택",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV1_1": "파드 상세 내역의 보안 컨텐츠를 제어하는 클러스터-레벨의 리소스입니다. 각 오브젝트는 관련 필드에 대한 기본 값뿐만 아니라 시스템에 적용시킬 파드 실행 조건을 정의합니다.",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_1": "이름",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_2": "기본 정책",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_3": "권한 에스컬레이션 허용",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_4": "네: 부모 개체로부터 권한 에스컬레이션을 허용하는 컨테이너 실행",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_5": "아니오",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_6": "권한 에스컬레이션 기본값",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_7": "네: 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부 제어",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_8": "호스트 IPC",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_9": "네: 호스트의 IPC 네임스페이스 사용",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_10": "호스트 네트워크",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_11": "네: 호스트 네트워킹 사용",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_12": "호스트 PID",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_13": "네: 호스트의 PID 네임스페이스 사용",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_14": "권한 부여",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_15": "권한을 가진 컨테이너의 실행 ",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_16": "읽기 전용 루트 파일 시스템 ",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_17": "네: 읽기 전용 루트 파일 사용 필요",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_18": "기본 파드 보안 정책 구성 ",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_19": "용량 정책",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_20": "허용 기능 ",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_21": "타입 선택",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_22": "허용 기능 기본값",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_23": "삭제 요청 기능",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_24": "볼륨 정책",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_25": "볼륨 유형 제어 ",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_26": "허용할 호스트 패스 정책",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_27": "허용할 호스트 경로 리스트",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_28": "FS  그룹 정책",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_29": "MustRunAs – 범위를 하나 이상 지정해야 합니다. 첫 번째 범위의 최솟값을 기본값으로 사용합니다. 첫 번째 범위의 첫 번째 ID에 대해 검증합니다.",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_30": "RunAsAny – 기본값이 제공되지 않습니다. FSGroup ID 지정이 가능합니다. ",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_31": "포드의 볼륨을 소유하는 FSCroup 할당.",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_32": "호스트 포트 정책",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_33": "최솟 값",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_34": "최대 값",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_35": "호스트 포트 사용",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_36": "사용자 정책으로 실행",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_37": "MustRunAs – 범위를 구성해야 합니다. 범위의 첫 번째 값을 기본값으로 사용합니다. 구성 범위에 대해 검증합니다. ",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_38": "MustRunAsNonRoot – 파드가 0이 아닌 runAsUser로 제출되거나 이미지에 USER 지시문이 정의되어 있어야 한다. 기본값이 제공되지 않는다.",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_39": "RunAsAny – 기본값이 제공되지 않습니다. RunAsUser 지정이 가능합니다. ",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_40": "사용자 ID",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_41": "SELinux 정책",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_42": "MustRunAs – seLinuxOptions을 기본값으로 사용합니다. seLinuxOptions을 검증합니다. ",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_43": "RunAsAny – seLinuxOptions 지정이 가능합니다. ",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_44": "컨테이너의 SELinux 컨텍스트",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_45": "보충 그룹 정책",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_46": "MustRunAs – 범위를 하나 이상 지정해야 합니다. 첫 번째 범위의 최솟값을 기본값으로 사용합니다. 모든 범위를 검증합니다. ",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_47": "RunAsAny – 기본값이 제공되지 않습니다. supplementalGroups 지정이 가능합니다. ",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_48": "허용되는 보충 그룹 설정",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_49": "레이블",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_50": "예: App=frontend",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_51": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_52": "어노테이션",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_53": "키",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_54": "값",
    "MSG_PODSECURITYPOLICIES_CREATEFORM_DIV2_55": "리소스에 레이블을 지정하고 주석을 추가하는데 사용할 수있는 키/값 쌍입니다.",
    "MSG_PODSECURITYPOLICIES_CREATEYAML_DIV3_TABSAMPLE_1": "1. ",
    "MSG_PODSECURITYPOLICIES_CREATEYAML_DIV3_TABSAMPLE_2": "Privileged 옵션을 통해 파드의 컨테이너가 특권 모드를 사용할 수 있는지를 결정합니다.\nprivileged가 false인 경우에만 파드가 생성되며, Security Context의 privileged가 false로 지정되어 있어야 합니다.",
    "MSG_PODSECURITYPOLICIES_CREATEYAML_DIV3_TABSAMPLE_3": "2. ",
    "MSG_PODSECURITYPOLICIES_CREATEYAML_DIV3_TABSAMPLE_4": "파드를 생성할 때 반드시 Root 사용자가 아닌 다른 사용자를 지정하도록 정의할 수 있습니다.\n파드의 Security Context 설정으로 RunAsUser를 Root 권한이 되지 않도록 설정해야 생성할 수 있습니다.",
    "MSG_PODSECURITYPOLICIES_CREATEYAML_DIV3_TABSAMPLE_5": "3. ",
    "MSG_PODSECURITYPOLICIES_CREATEYAML_DIV3_TABSAMPLE_6": "정책을 적용받은 사용자는 파드를 생성할 때 사용자 그룹을 지정하도록 설정할 수 있습니다.",
    "MSG_PODSECURITYPOLICIES_CREATEYAML_DIV3_TABSAMPLE_7": "4. ",
    "MSG_PODSECURITYPOLICIES_CREATEYAML_DIV3_TABSAMPLE_8": "정책을 적용 받은 사용자는 정해진 종류의 볼륨만 파드에 지정할 수 있습니다.\n볼륨 옵션을 통해 정의된 볼륨들만 사용할 수 있습니다.",
    "MSG_PODSECURITYPOLICIES_CREATEYAML_DIV3_TABSAMPLE_9": "5. ",
    "MSG_PODSECURITYPOLICIES_CREATEYAML_DIV3_TABSAMPLE_10": "정책을 적용받은 사용자는 requiredDropCapabilities 옵션을 통해 선언된 리눅스 기능을 사용할 수 없습니다.",
    "MSG_PODSECURITYPOLICIES_CREATEYAML_DIV3_TABSAMPLE_11": "6. ",
    "MSG_PODSECURITYPOLICIES_CREATEYAML_DIV3_TABSAMPLE_12": "정책을 적용받은 사용자는 파드 생성 시 flexvolume만 사용할 수 있고, allowedFlexVolumes 옵션을 통해 정의된 flexvolume 드라이버만 허용됩니다.",
    "MSG_RESOURCEQUOTAS_MAIN_DESCRIPTION_1": "리소스 쿼터는 네임스페이스별 총 리소스 사용을 제한하는 제약 조건을 제공합니다. 유형별로 네임스페이스에서 만들 수 있는 오브젝트 수와 해당 프로젝트의 리소스가 사용할 수 있는 총 컴퓨트 리소스의 양을 제한할 수 있습니다.\n\n리소스 쿼터 클레임은 리소스 할당량에 대한 요청입니다. 각 리소스 쿼터 클레임은 CPU 및 메모리와 같은 리소스 할당량을 지정합니다. 추후 네임스페이스에서 사용할 수 있습니다. 네임스페이스 관리자는 이러한 클레임을 승인하거나 거부할 수 있습니다.",
    "MSG_RESOURCEQUOTAS_MAIN_TABRESOURCEQUOTAS_1": "리소스 쿼터",
    "MSG_RESOURCEQUOTAS_MAIN_TABRESOURCEQUOTACLAIMS_1": "리소스 쿼타 클레임",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV1_1": "해당하는 네임스페이스의 리소스 총 사용량을 설정 및 제한 합니다.",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_1": "이름",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_2": "네임스페이스",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_3": "네임스페이스 선택",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_4": "레이블",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_5": "예: App=frontend",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_6": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_7": "네임스페이스 리소스 쿼타",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_8": "네임스페이스의 리소스 타입별 전체 할당량을 제한할 수 있습니다.\n“기타” 항목 선택 시, 리소스 이름을 yaml 포맷으로 입력해 주세요.",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_9": "리소스 타입",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_10": "CPU 제한",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_11": "메모리 제한 ",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_12": "CPU 요청",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_13": "메모리 요청 ",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_14": "파드 수",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_15": "기타",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_16": "리소스 타입",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAFORM_DIV2_17": "값",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAYAML_DIV3_TABSAMPLE_1": "네임스페이스는 리소스를 논리적인 단위로 구분하며, 자원 할당(CPU, Memory) 범위를 설정하여 사용할 수 있습니다. 클레임 기능을 이용하여 자원(CPU, Memory)/승인 프로세서를 사용할 수 있습니다.",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAYAML_DIV3_TABSAMPLE_2": "1. 파드에서 CPU, Memory 요청 제한",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAYAML_DIV3_TABSAMPLE_3": "터미널이 아닌 모든 상태의 모든 파드에서 사용하는 CPU와 Memory의 요청과 제한을 설정할 수 있습니다.",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAYAML_DIV3_TABSAMPLE_4": "2. 요청 스토리지 용량 제한 및 생성 개수 제어",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAYAML_DIV3_TABSAMPLE_5": "네임스페이스에서 요청할 수 있는 총 스토리지 용량을 제한하며, 해당 네임스페이스에 존재할 수 있는 개수를 설정할 수 있습니다.",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAYAML_DIV3_TABSAMPLE_6": "3. 우선순위에 따른 시스템 리소스 사용 제어",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAYAML_DIV3_TABSAMPLE_7": "우선순위에 따라 파드의 시스템 리소스 사용을 제어할 수 있습니다.\n(values: 'low(낮음)', 'medium(중간)', 'high(높음)')\n(operator: 'In', 'NotIn', 'Exist', 'DoesNotExist')",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAYAML_DIV3_TABSAMPLE_8": "4. 할당량의 연결된 범위 설정",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTAYAML_DIV3_TABSAMPLE_9": "범위가 할당량에 추가되면 해당 범위와 관련된 리소스로 지원하는 리소스의 수를 제한합니다. (scope: Terminating, NotTerminating, BestEffort, NotBestEffort)\n* 리소스 요구 사항이 설정되지 않아야 합니다.",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV1_1": "CPU 및 메모리와 같은 리소스를 지정하여 리소스 쿼터를 요청합니다. 해당 리소스 쿼터 클레임은 승인 시 해당 네임스페이스에 생성됩니다.",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_1": "이름",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_2": "네임스페이스",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_3": "네임스페이스 선택",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_4": "레이블",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_5": "예: App=frontend",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_6": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_7": "리소스 이름",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_8": "네임스페이스 리소스 할당량",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_9": "CPU 제한 ",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_10": "메모리 제한 ",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_11": "리소스 타입",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_12": "생성할 네임스페이스의 리소스 타입별 전체 할당량을 제한할 수 있습니다.\n“기타” 항목 선택 시, 리소스 이름을 yaml 포맷으로 입력해 주세요.",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_13": "CPU 요청",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_14": "메모리 요청 ",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_15": "파드 수",
    "MSG_RESOURCEQUOTAS_CREATERESOURCEQUOTACLAIMFORM_DIV2_16": "기타",
    "MSG_LIMITRANGES_MAIN_DESCRIPTION_1": "리소스 쿼터를 사용하면 클러스터 관리자는 네임스페이스 별로 리소스 사용과 생성을 제한할 수 있습니다. 네임스페이스 내에서 파드나 컨테이너는 네임스페이스의 리소스 쿼터에 정의된 만큼의 CPU와 메모리를 사용할 수 있습니다. 하나의 파드 또는 컨테이너가 사용 가능한 모든 리소스를 독점할 수 있다는 우려가 있습니다. 제한 범위는 네임스페이스에서 리소스 할당(파드 또는 컨테이너)을 제한하는 정책입니다.\n\n제한 범위는 다음과 같은 제약 조건을 제공합니다.\n- 네임스페이스에서 파드 또는 컨테이너별 최소 및 최대 컴퓨팅 리소스 사용량을 지정합니다.\n- 네임스페이스에서 스토리지클래스별 최소 및 최대 스토리지 요청을 지정합니다.\n- 네임스페이스에서 리소스에 대한 요청과 제한 사이의 비율을 지정합니다.\n- 네임스페이스에서 컴퓨팅 리소스에 대한 기본 요청/제한을 설정하고 런타임에 있는 컨테이너에 자동으로 설정합니다.",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV1_1": "네임스페이스에서 파드, 컨테이너 및 퍼시스턴트 볼륨 클레임 유형별로 리소스 사용량을 제한합니다",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_1": "이름",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_2": "네임스페이스",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_3": "네임스페이스 선택",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_4": "레이블",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_5": "예: App=frontend",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_6": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_7": "리소스 제한 범위",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_8": "파드",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_9": "컨테이너",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_10": "퍼시스턴트 볼륨 클레임",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_11": "제한 타입",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_12": "제한 타입 선택",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_13": "최대",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_14": "최소",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_15": "최대 제한 / 요청 비",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_16": "기본 제한",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_17": "기본 요청",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_18": "스토리지 크기",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_19": "CPU",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_20": "메모리",
    "MSG_LIMITRANGES_CREATELIMITRANGEFORM_DIV2_21": "네임스페이스 내에서 생성할 파드의 리소스 타입 별 제한 범위를 설정할 수 있습니다.",
    "MSG_LIMITRANGES_CREATELIMITRANGEYAML_DIV3_TABSCHEMA_1": "LimitRange는 네임 스페이스의 각 리소스 종류에 대한 리소스 사용 제한을 설정합니다.",
    "MSG_LIMITRANGES_CREATELIMITRANGEYAML_DIV3_TABSAMPLE_1": "네임스페이스는 리소스를 논리적인 단위로 구분하며, 자원 할당(CPU, Memory) 범위를 설정하여 사용할 수 있습니다. 클레임 기능을 이용하여 자원(CPU, Memory)/승인 프로세서를 사용할 수 있습니다.",
    "MSG_LIMITRANGES_CREATELIMITRANGEYAML_DIV3_TABSAMPLE_2": "1. 한계 범위 설정",
    "MSG_LIMITRANGES_CREATELIMITRANGEYAML_DIV3_TABSAMPLE_3": "네임스페이스 및 리소스에서 사용할 수 있는 리소스(CPU, Memory)의 범위를 지정할 수 있습니다.\n(defaults 기본 리소스 쿼타 제한 정보 / defaultRequest 기본 리소스 쿼타 요청 정보)",
    "MSG_CUSTOMRESOURCEDEFINITIONS_CREATECUSTOMRESOURCEDEFINITIONYAML_DIV3_TABSCHEMA_1": "CustomResourceDefinition은 API 서버에 노출되어야 하는 리소스를 나타낸다. 이름은 <.spec.name>.<.spec.group> 형식이어야 한다. v1.16에서 지원되지 않으며 v1.19에서 삭제될 예정입니다. 대신 apiextensions.k8s.io/v1 CustomResourceDefinition을 사용하십시오.",
    "MSG_CUSTOMRESOURCEDEFINITIONS_CREATECUSTOMRESOURCEDEFINITIONYAML_DIV3_TABSAMPLE_1": "1. CRD를 활용하여 Custom Controller 생성",
    "MSG_CUSTOMRESOURCEDEFINITIONS_CREATECUSTOMRESOURCEDEFINITIONYAML_DIV3_TABSAMPLE_2": "네임스페이스 범위에서 유효한 CRD (CustomerResourceDefinition)를 생성하여 CronTab에 대한 Custom Controller를 생성하고 사용할 수 있습니다.",
    "MSG_CUSTOMRESOURCEDEFINITIONS_CREATECUSTOMRESOURCEDEFINITIONYAML_DIV3_TABSAMPLE_3": "2. Custom Controller 생성 후 additionalPrinterColumns 이용",
    "MSG_CUSTOMRESOURCEDEFINITIONS_CREATECUSTOMRESOURCEDEFINITIONYAML_DIV3_TABSAMPLE_4": "네임스페이스 범위에서 유효한 CRD (CustomerResourceDefinition)를 생성하여 CronTab에 대한 Custom Controller 생성하여 사용할 수 있습니다.\nadditionalPrinterColumns 태그를 사용하여 표시 컬럼을 추가할 수 있습니다.",
    "MSG_MENUSETTINGS_MAIN_DESCRIPTION_1": "HyperCloud 콘솔의 사이드바는 플랫폼의 주요 기능에 대한 액세스를 제공합니다. 관리자는 특정 사용자의 특정 기능에 대한 액세스를 제한하기 위해 사용자 정의 사이드바 정책을 생성할 수 있습니다.",
    "MSG_MENUSETTINGS_CREATEMENUSETTINGFORM_DIV1_1": "사용자가 액세스 할 수 있는 메뉴 항목을 지정하여 사용자를 위한 사이드바를 만듭니다.",
    "MSG_NAMESPACES_MAIN_TABNAMESPACES_1": "네임스페이스",
    "MSG_NAMESPACES_MAIN_TABNAMESPACES_DESCRIPTION_1": "네임스페이스는 리소스를 논리적인 단위로 구분하며, 자원 할당(CPU, Memory)의 범위를 설정하여 사용할 수 있습니다.  또한, 클레임 기능을 이용하여 자원(CPU, Memory)할당에 대한 요청/승인 프로세서를 사용할 수 있습니다.",
    "MSG_NAMESPACES_MAIN_TABNAMESPACECLAIMS_1": "네임스페이스 클레임",
    "MSG_NAMESPACES_MAIN_TABNAMESPACECLAIMS_DESCRIPTION_1": "네임스페이스 클레임은 네임스페이스에 대한 생성 요청입니다. 각 네임스페이스 클레임은 CPU 및 메모리와 같은 리소스 할당량을 지정해야합니다. 네임스페이스 관리자는 이러한 클레임을 승인하거나 거부 할 수 있습니다.",
    "MSG_NAMESPACES_CREATENAMESPACEFORM_DIV1_1": "클러스터 내 존재하는 여러 개의 가상 클러스터 단위를 의미합니다.",
    "MSG_NAMESPACES_CREATENAMESPACEFORM_DIV2_1": "이름",
    "MSG_NAMESPACES_CREATENAMESPACEFORM_DIV2_2": "레이블",
    "MSG_NAMESPACES_CREATENAMESPACEFORM_DIV2_3": "예: App=frontend",
    "MSG_NAMESPACES_CREATENAMESPACEFORM_DIV2_4": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMFORM_DIV1_1": "CPU 및 메모리와 같은 리소스를 지정하여 네임스페이스를 요청합니다.",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMFORM_DIV2_1": "이름",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMFORM_DIV2_2": "레이블",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMFORM_DIV2_3": "예: App=frontend",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMFORM_DIV2_4": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMFORM_DIV2_5": "리소스 이름",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMFORM_DIV2_6": "네임스페이스 리소스 할당량",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMFORM_DIV2_7": "CPU 제한 ",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMFORM_DIV2_8": "Memory 제한",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMFORM_DIV2_9": "리소스 타입",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMFORM_DIV2_10": "생성할 네임스페이스의 리소스 타입별 전체 할당량을 제한할 수 있습니다.\n“기타” 항목 선택 시, 리소스 이름을 yaml 포맷으로 입력해 주세요.",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMFORM_DIV2_11": "CPU 제한",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMFORM_DIV2_12": "Memory 제한",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMFORM_DIV2_13": "파드 수",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMFORM_DIV2_14": "기타",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMYAML_DIV3_TABSAMPLE_1": "1. CPU, Memory를 설정하여 네임스페이스 요청",
    "MSG_NAMESPACES_CREATENAMESPACECLAIMYAML_DIV3_TABSAMPLE_2": "네임스페이스에서 사용할수 있는 리소스(CPU, Memory) 범위를 지정할 때 사용할 수 있습니다.\nEdit Status를 이용해서 승인할 수 있습니다.",
    "MSG_OVERVIEW_MAIN_TABCLUSTER_1": "클러스터",
    "MSG_OVERVIEW_MAIN_CARDSOFTWARE_TITLE_1": "소프트웨어",
    "MSG_OVERVIEW_MAIN_CARDSOFTWARE_INSTALLATION_1": "설치 필요",
    "MSG_OVERVIEW_MAIN_CARDSTATUS_TITLE_1": "상태",
    "MSG_OVERVIEW_MAIN_CARDSTATUS_API_1": "쿠버네티스 API",
    "MSG_OVERVIEW_MAIN_CARDSTATUS_CONTROLPLANE_1": "컨트롤 플레인",
    "MSG_OVERVIEW_MAIN_CARDSTATUS_OPERATORS_1": "오퍼레이터",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_CLUSTERUTILIZATION_1": "클러스터 사용",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_1_1": "1시간",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_6_1": "6시간",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_24_1": "24시간",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_RESOURCE_1": "리소스",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_USAGE_1": "사용량",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_CPU_1": "CPU",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_MEMORY_1": "메모리",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_DISK_1": "디스크",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_NETWORK_1": "네트워크 전송",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_POD_1": "사용자 생성 파드",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_CORES_1": "코어",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_BYTE_1": "바이트",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_EA_1": "{{0}} 개",
    "MSG_OVERVIEW_MAIN_CARDRESOURCES_TITLE_1": "주요 리소스 및 클레임",
    "MSG_OVERVIEW_MAIN_CARDRESOURCES_NODE_1": "노드",
    "MSG_OVERVIEW_MAIN_CARDRESOURCES_POD_1": "파드",
    "MSG_OVERVIEW_MAIN_CARDRESOURCES_SERVICE_1": "서비스",
    "MSG_OVERVIEW_MAIN_CARDRESOURCES_PVC_1": "영구 볼륨 클레임",
    "MSG_OVERVIEW_MAIN_CARDRESOURCES_NSC_1": "네임스페이스 클레임",
    "MSG_OVERVIEW_MAIN_CARDRESOURCES_RQC_1": "리소스 쿼타 클레임",
    "MSG_OVERVIEW_MAIN_CARDACTIVITY_TITLE_1": "활동",
    "MSG_OVERVIEW_MAIN_CARDACTIVITY_ALL_1": "이벤트 보기",
    "MSG_OVERVIEW_MAIN_CARDACTIVITY_RECENT_1": "최근 이벤트",
    "MSG_OVERVIEW_MAIN_CARDACTIVITY_PAUSE_1": "일시 정지",
    "MSG_OVERVIEW_MAIN_CARDACTIVITY_RESUME_1": "다시 시작",
    "MSG_OVERVIEW_MAIN_POPOVERSOFTWARE_TITLE_1": "설치 필요 소프트웨어",
    "MSG_OVERVIEW_MAIN_POPOVERSOFTWARE_DESCRIPTION_1": "설치되지 않은 소프트웨어 목록입니다.",
    "MSG_OVERVIEW_MAIN_POPOVERSOFTWARE_SOFTWARE_1": "소프트웨어",
    "MSG_OVERVIEW_MAIN_POPOVERAPI_TITLE_1": "쿠버네티스 API",
    "MSG_OVERVIEW_MAIN_POPOVERAPI_DESCRIPTION_1": "쿠버네티스 API의 상태를 체크합니다.",
    "MSG_OVERVIEW_MAIN_POPOVERAPI_COMPONENTS_1": "컴포넌트",
    "MSG_OVERVIEW_MAIN_POPOVERAPI_STATUS_1": "상태",
    "MSG_OVERVIEW_MAIN_POPOVERAPI_GOOD_1": "Good",
    "MSG_OVERVIEW_MAIN_POPOVERAPI_BAD_1": "Bad",
    "MSG_OVERVIEW_MAIN_POPOVERCONTROLPLANE_TITLE_1": "컨트롤 플레인 상태",
    "MSG_OVERVIEW_MAIN_POPOVERCONTROLPLANE_DESCRIPTION_1": "제어 플레인의 구성 요소는 클러스터 상태를 유지하고 조정하는 역할을합니다.",
    "MSG_OVERVIEW_MAIN_POPOVERCONTROLPLANE_COMPONENTS_1": "컴포넌트",
    "MSG_OVERVIEW_MAIN_POPOVERCONTROLPLANE_RESPONCERATE_1": "응답률",
    "MSG_OVERVIEW_MAIN_POPOVERCONTROLPLANE_APISERVERS_1": "API 서버",
    "MSG_OVERVIEW_MAIN_POPOVERCONTROLPLANE_CONTROLLER_1": "컨트롤러 관리자",
    "MSG_OVERVIEW_MAIN_POPOVERCONTROLPLANE_SCHEDULERS_1": "스케줄러",
    "MSG_OVERVIEW_MAIN_POPOVERCONTROLPLANE_APIREQUEST_1": "API 요청 성공률",
    "MSG_OVERVIEW_MAIN_POPOVERCONTROLPLANE_ETCD_1": "etcd",
    "MSG_OVERVIEW_MAIN_POPOVEROPERATOR_TITLE_1": "오퍼레이터 상태",
    "MSG_OVERVIEW_MAIN_POPOVEROPERATOR_DESCRIPTION_1": "오퍼레이터는 Kubernetes API를 확장하여 애플리케이션을 생성, 구성 및 관리합니다.",
    "MSG_OVERVIEW_MAIN_POPOVEROPERATOR_OPERATORS_1": "오퍼레이터 ({{0}}개 설치됨)",
    "MSG_OVERVIEW_MAIN_POPOVEROPERATOR_STATUS_1": "상태",
    "MSG_OVERVIEW_MAIN_POPOVEROPERATOR_ALL_1": "모두 보기",
    "MSG_CI/CD_STARTPIPELINEPOPUP_TITLE_1": "파이프라인 시작",
    "MSG_CI/CD_STARTPIPELINEPOPUP_GITRESOURCES_1": "Git 리소스",
    "MSG_CI/CD_STARTPIPELINEPOPUP_IMAGERESOURCES_1": "이미지 리소스",
    "MSG_CI/CD_STARTPIPELINEPOPUP_GITRESOURCES_2": "개정",
    "MSG_CI/CD_STARTPIPELINEPOPUP_GITRESOURCES_3": "Git URL을 입력하십시오.",
    "MSG_CI/CD_STARTPIPELINEPOPUP_IMAGERESOURCES_2": "이미지 URL 을 입력하세요.",
    "MSG_CI/CD_STARTPIPELINEPOPUP_GITRESOURCES_4": "개정 내용을 입력하세요.",
    "MSG_CI/CD_MAILFORM_REQUEST_1": "[HyperCloud] 파이프라인 승인 요청 안내",
    "MSG_CI/CD_MAILFORM_REQUEST_2": "안녕하세요. HyperCloud입니다.\n파이프라인 승인 요청에 대한 내용을 알려드립니다.",
    "MSG_CI/CD_MAILFORM_REQUEST_3": "요청 상세",
    "MSG_CI/CD_MAILFORM_REQUEST_4": "이름",
    "MSG_CI/CD_MAILFORM_REQUEST_5": "내용",
    "MSG_CI/CD_MAILFORM_REQUEST_6": "잡 이름",
    "MSG_CI/CD_MAILFORM_REQUEST_7": "인테그레이션 잡",
    "MSG_CI/CD_MAILFORM_REQUEST_8": "발신자",
    "MSG_CI/CD_MAILFORM_REQUEST_9": "참조",
    "MSG_CI/CD_MAILFORM_RESULT_1": "[HyperCloud] 파이프라인 승인 요청 결과 안내",
    "MSG_CI/CD_MAILFORM_RESULT_2": "안녕하세요. HyperCloud입니다.\n파이프라인 승인 요청에 대한 결과를 알려드립니다.",
    "MSG_CI/CD_MAILFORM_RESULT_3": "결과 상세",
    "MSG_CI/CD_MAILFORM_RESULT_4": "요청 결과",
    "MSG_CI/CD_MAILFORM_RESULT_5": "승인/거절 시간",
    "MSG_CI/CD_MAILFORM_RESULT_6": "처리 유저",
    "MSG_CI/CD_MAILFORM_RESULT_7": "승인/거절 사유",
    "MSG_CI/CD_MAILFORM_BUTTON_1": "HyperCloud 바로 가기",
    "MSG_CI/CD_MAILFORM_1": "Copyright 2020. TmaxA&C Corp. All rights reserved.",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_10": "노드 포트",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_11": "클러스터 외부에서 액세스 가능 ",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_12": "외부 로드 밸런서",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_13": "로드 밸런서의 인그레스 포인트",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_14": "외부 서비스 이름 ",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_15": "서비스를 지원하는 리소스의 위치 ",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_16": "클러스터 IP ",
    "MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_17": "클러스터 내에서만 액세스 가능 ",
    "MSG_NETWORKPOLICIES_NETWORKPOLICYDETAILS_TABDETAILS_INGRESSRULES_1": "파드는 기본적으로 모든 트래픽을 허용합니다. 인그레스 규칙의 화이트리스트를 지정하는 네트워크 정책을 사용하여 격리시킬 수 있습니다. 네트워크 정책에서 파드를 선택하면 네트워크 정책에 명시적으로 허용되지 않은 모든 트래픽이 거부됩니다. {{0}}에서 자세한 내용보기 ",
    "MSG_NETWORKPOLICIES_NETWORKPOLICYDETAILS_TABDETAILS_INGRESSRULES_2": "모든 트래픽이 {{0}}의 파드로 허용됩니다. ",
    "MSG_NETWORKPOLICIES_NETWORKPOLICYDETAILS_TABDETAILS_INGRESSRULES_3": "대상 파드",
    "MSG_NETWORKPOLICIES_NETWORKPOLICYDETAILS_TABDETAILS_INGRESSRULES_4": "로 부터",
    "MSG_NETWORKPOLICIES_NETWORKPOLICYDETAILS_TABDETAILS_INGRESSRULES_5": "포트로",
    "MSG_NAMESPACES_NAMESPACEDETAILS_TABDETAILS_RESOURCEUSAGE_1": "리소스 사용량",
    "MSG_NAMESPACES_NAMESPACEDETAILS_TABDETAILS_RESOURCEUSAGE_2": "CPU 사용량",
    "MSG_NAMESPACES_NAMESPACEDETAILS_TABDETAILS_RESOURCEUSAGE_3": "메모리 사용량",
    "MSG_NAMESPACES_NAMESPACEDETAILS_TABDETAILS_RESOURCEUSAGE_4": "파드 메모리 사용량 (Top 10)",
    "MSG_RESOURCEQUOTAS_RESOURCEQUOTADETAILS_TABDETAILS_1": "NoQuota",
    "MSG_RESOURCEQUOTAS_RESOURCEQUOTADETAILS_TABDETAILS_2": "요청은 사용할 것으로 예상되는 리소스의 양입니다. 클러스터가 요청을 이행할 수 있는지 여부를 설정할 때 사용됩니다. \n제한은 사용할 수 있는 최대 리소스 양입니다. 제한 이상을 소비하는 응용 프로그램은 종료될 수 있습니다. \n클러스터 관리자는 요청할 수 있는 양과 리소스 쿼터에 대해 한도를 설정할 수 있습니다. ",
    "MSG_ROLES_ROLEDETAILS_TABDETAILS_1": "롤 이름",
    "MSG_ROLES_ROLEDETAILS_TABDETAILS_RULES_1": "규칙",
    "MSG_ROLES_ROLEDETAILS_TABDETAILS_RULES_2": "{{0}} 규칙을 삭제하시겠습니까? ",
    "MSG_PERSISTENTVOLUMES_PERSISTENTVOLUMEDETAILS_TABDETAILS_1": "영구 볼륨 클레임",
    "MSG_TASKS_CREATFORM_DIV2_54": "타입 선택",
    "MSG_TASKS_CREATFORM_DIV2_55": "Git",
    "MSG_TASKS_CREATFORM_DIV2_56": "이미지",
    "MSG_TASKS_CREATFORM_DIV2_57": "ㄹ",
    "MSG_TASKS_CREATFORM_DIV2_58": "이름",
    "MSG_TASKS_CREATFORM_DIV2_59": "설명",
    "MSG_TASKS_CREATFORM_DIV2_60": "마운트 경로",
    "MSG_TASKS_CREATFORM_DIV2_61": "/workspace/<name>",
    "MSG_TASKS_CREATFORM_DIV2_62": "마운트 경로를 입력하지 않을 경우, <name>은 이 워크스페이스의 이름이 됩니다.",
    "MSG_TASKS_CREATFORM_DIV2_63": "접근 모드",
    "MSG_TASKS_CREATFORM_DIV2_64": "ReadWrite",
    "MSG_TASKS_CREATFORM_DIV2_65": "ReadOnly",
    "MSG_TASKS_CREATFORM_DIV2_66": "이 워크스페이스를 선택 항목으로 제공합니다.",
    "MSG_TASKS_CREATFORM_DIV2_67": "선택 항목으로 제공할 경우, 태스크 런 또는 파이프라인 메뉴에서 파이프라인 워크스페이스를 필요에 따라 할당할 수 있습니다.",
    "MSG_TASKS_CREATFORM_DIV2_68": "볼륨",
    "MSG_TASKS_CREATFORM_DIV2_69": "이름",
    "MSG_TASKS_CREATFORM_DIV2_70": "타입",
    "MSG_TASKS_CREATFORM_DIV2_71": "볼륨 선택",
    "MSG_TASKS_CREATFORM_DIV2_72": "빈 디렉토리",
    "MSG_TASKS_CREATFORM_DIV2_73": "컨피그 맵",
    "MSG_TASKS_CREATFORM_DIV2_74": "시크릿",
    "MSG_TASKS_CREATFORM_DIV2_75": "이미지 태그 선택",
    "MSG_TASKS_CREATFORM_DIV2_76": "/bin/sh",
    "MSG_TASKS_CREATFORM_DIV2_77": "-c",
    "MSG_TASKS_CREATFORM_DIV2_ERROR_1": "이름을 입력해 주세요.",
    "MSG_TASKS_CREATFORM_DIV2_ERROR_2": "최소 5자 이상, 최대 20자까지 입력할 수 있습니다.",
    "MSG_TASKS_CREATFORM_DIV2_ERROR_3": "중복된 입력값입니다.",
    "MSG_TASKS_CREATFORM_DIV2_ERROR_4": "영문 소문자, 숫자, 특수문자 (-), (.)만 입력할 수 있습니다.\n",
    "MSG_TASKS_CREATFORM_DIV2_ERROR_5": "특수문자 (-), (.)가 포함된 경우, 시작과 끝은 영문 소문자 또는 숫자만 입력할 수 있습니다.\n",
    "MSG_TASKS_CREATFORM_DIV2_ERROR_6": "이미지 레지스트리를 선택해 주세요.",
    "MSG_TASKS_CREATFORM_DIV2_ERROR_7": "이미지를 선택해 주세요.",
    "MSG_TASKS_CREATFORM_DIV2_ERROR_8": "이미지 태그를 선택해 주세요.",
    "MSG_TASKS_CREATFORM_DIV2_ERROR_9": "볼륨을 선택해 주세요.",
    "MSG_TASKS_CREATFORM_DIV2_ERROR_10": "마운트 경로를 입력해 주세요.",
    "MSG_TASKS_CREATFORM_DIV2_ERROR_11": "(/)로 시작하는 경로를 입력해 주세요.",
    "MSG_TASKS_CREATFORM_DIV2_78": "이 태스크와 연결된 인풋 리소스가 없습니다.",
    "MSG_TASKS_CREATFORM_DIV2_79": "인풋 리소스 추가",
    "MSG_TASKS_CREATFORM_DIV2_80": "이 태스크와 연결된 아웃풋 리소스가 없습니다.",
    "MSG_TASKS_CREATFORM_DIV2_81": "아웃풋 리소스 추가",
    "MSG_TASKS_CREATFORM_DIV2_82": "이 태스크와 연결된 태스크 파라미터 구성이 없습니다.",
    "MSG_TASKS_CREATFORM_DIV2_83": "태스크 파라미터 구성 추가",
    "MSG_TASKS_CREATFORM_DIV2_84": "이 태스크와 연결된 워크스페이스 구성이 없습니다.",
    "MSG_TASKS_CREATFORM_DIV2_85": "워크스페이스 구성 추가",
    "MSG_TASKS_CREATFORM_DIV2_86": "이 태스크와 연결된 볼륨이 없습니다.",
    "MSG_TASKS_CREATFORM_DIV2_87": "볼륨 추가",
    "MSG_TASKS_CREATFORM_DIV2_88": "이 태스크와 연결된 스텝이 없습니다.",
    "MSG_TASKS_CREATFORM_DIV2_89": "스텝 추가",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_1": "인풋 리소스",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_2": "이 클러스터 태스크와 연결된 인풋 리소스가 없습니다.",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_3": "인풋 리소스 추가",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_4": "아웃풋 리소스",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_5": "이 클러스터 태스크와 연결된 아웃풋 리소스가 없습니다.",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_6": "아웃풋 리소스 추가",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_7": "클러스터 태스크 파라미터 구성",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_8": "이 클러스터 태스크와 연결된 태스크 파라미터 구성이 없습니다.",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_9": "클러스터 태스크 파라미터 구성 추가",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_10": "워크스페이스 구성",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_11": "이 클러스터 태스크와 연결된 워크스페이스 구성이 없습니다.",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_12": "워크스페이스 구성 추가",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_13": "볼륨",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_14": "이 클러스터 태스크와 연결된 볼륨이 없습니다.",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_15": "볼륨 추가",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_16": "스텝",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_17": "이 클러스터 태스크와 연결된 스텝이 없습니다.",
    "MSG_CLUSTERTASK_CREATFORM_DIV2_18": "스텝 추가",
    "MSG_TASKRUN_CREATFORM_DIV2_1": "태스크 선택",
    "MSG_TASKRUN_CREATFORM_DIV2_2": "태스크 선택",
    "MSG_TASKRUN_CREATFORM_DIV2_3": "인풋 리소스",
    "MSG_TASKRUN_CREATFORM_DIV2_4": "이 태스크와 연결된 인풋 리소스가 없습니다.",
    "MSG_TASKRUN_CREATFORM_DIV2_5": "파이프라인 리소스 선택",
    "MSG_TASKRUN_CREATFORM_DIV2_6": "아웃풋 리소스",
    "MSG_TASKRUN_CREATFORM_DIV2_7": "이 태스크와 연결된 아웃풋 리소스가 없습니다.",
    "MSG_TASKRUN_CREATFORM_DIV2_8": "파이프라인 리소스 선택",
    "MSG_TASKRUN_CREATFORM_DIV2_9": "태스크 파라미터",
    "MSG_TASKRUN_CREATFORM_DIV2_10": "이 태스크와 연결된 태스크 파라미터가 없습니다.",
    "MSG_TASKRUN_CREATFORM_DIV2_11": "값",
    "MSG_TASKRUN_CREATFORM_DIV2_12": "입력하지 않을 경우 태스크 생성 시 설정한 기본 값으로 자동 입력됩니다.",
    "MSG_TASKRUN_CREATFORM_DIV2_13": "타임아웃 실패 시점 설정",
    "MSG_TASKRUN_CREATFORM_DIV2_14": "예 : 60, 120, 30",
    "MSG_TASKRUN_CREATFORM_DIV2_15": "분",
    "MSG_TASKRUN_CREATFORM_DIV2_16": "태스크 런이 실행될 수 있는 최대 시간을 분 단위로 설정할 수 있습니다. 값을 설정하지 않을 경우 세계 시간 기준으로 전역 기본 타임아웃 값이 적용되며, 값을 0으로 설정할 경우 태스크 런은 타임아웃없이 계속 실행됩니다.",
    "MSG_TASKRUN_CREATFORM_DIV2_17": "서비스 어카운트 지정",
    "MSG_TASKRUN_CREATFORM_DIV2_18": "서비스 어카운트 선택",
    "MSG_TASKRUN_CREATFORM_DIV2_19": "서비스 계정을 지정하면 특정 자격 증명으로 태스크 런에서 해당 태스크를 실행할 수 있습니다. 지정하지 않을 경우, 태스크 런은 configmap-defaults ConfigMap에 지정된 자격증명으로 실행됩니다. 기본값을 지정하지 않으면, 태스크 런은 대상 네임스페이스에 대해 설정된 기본 서비스 계정으로 실행됩니다.",
    "MSG_EVENTS_MAIN_1": "{{something}}에서 생성",
    "MSG_EVENTS_MAIN_2": "{{something2}}의 {{something1}} 표시",
    "MSG_RESOURCEQUOTACLAIMS_RESOURCEQUOTACLAIMDETAILS_TABDETAILS_1": "리소스 이름",
    "MSG_RESOURCEQUOTACLAIMS_RESOURCEQUOTACLAIMDETAILS_TABDETAILS_2": "사유",
    "MSG_RESOURCEQUOTACLAIMS_RESOURCEQUOTACLAIMDETAILS_TABDETAILS_3": "CPU 제한량",
    "MSG_RESOURCEQUOTACLAIMS_RESOURCEQUOTACLAIMDETAILS_TABDETAILS_4": "메모리 제한량",
    "MSG_NAMESPACECLAIMS_NAMESPACEDETAILS_TABDETAILS_1": "사유",
    "MSG_NAMESPACECLAIMS_NAMESPACEDETAILS_TABDETAILS_2": "CPU 제한량",
    "MSG_NAMESPACECLAIMS_NAMESPACEDETAILS_TABDETAILS_3": "메모리 제한량",
    "MSG_NAMESPACECLAIMS_NAMESPACEDETAILS_TABDETAILS_4": "네임스페이스 이름",
    "MSG_IMAGEREGISTRIES_IMAGEREGISTRYDETAILS_TABDETAILS_1": "서버 URL",
    "MSG_EXTERNALREGISTRIES_EXTERNALREGISTRYDETAILS_TABDETAILS_1": "로그인 시크릿",
    "MSG_AUDITLOGS_MAIN_1": "로그가 없음",
    "MSG_AUDITLOGS_MAIN_2": "사용자 계정 필터..",
    "MSG_IMAGEREGISTRIES_IMAGEREGISTRYDETAILS_TABNOTARY_1": "서버 URL",
    "MSG_OVERVIEW_MAIN_CARDDETAILS_1": "쿠버네티스 버전",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERINVENTORY_1": "클러스터 인벤토리",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERINVENTORY_2": "노드",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERINVENTORY_3": "파드",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERINVENTORY_4": "스토리지 클래스",
    "MSG_OVERVIEW_MAIN_CARDCLUSTERINVENTORY_5": "영구 볼륨 클레임",
    "MSG_OVERVIEW_MAIN_CARDDETAILS_2": "노드 주소",
    "MSG_OVERVIEW_MAIN_CARDDETAILS_3": "노드 이름",
    "MSG_OVERVIEW_MAIN_CARDDETAILS_4": "롤",
    "MSG_OVERVIEW_MAIN_CARDDETAILS_5": "베어메탈 호스트",
    "MSG_OVERVIEW_MAIN_CARDDETAILS_6": "호스트 이름:",
    "MSG_OVERVIEW_MAIN_CARDDETAILS_7": "내부 IP:",
    "MSG_OVERVIEW_MAIN_CARDINVENTORY_1": "인벤토리",
    "MSG_OVERVIEW_MAIN_CARDINVENTORY_2": "파드 {{0}}",
    "MSG_OVERVIEW_MAIN_CARDINVENTORY_3": "이미지 {{0}}",
    "MSG_OVERVIEW_MAIN_CARDINVENTORY_4": "디스크 {{0}}",
    "MSG_OVERVIEW_MAIN_CARDINVENTORY_5": "NICs {{0}}",
    "MSG_OVERVIEW_MAIN_CARDINVENTORY_6": "CPUs {{0}}",
    "MSG_OVERVIEW_MAIN_CARDSTATUS_1": "사용 불가 ",
    "MSG_OVERVIEW_MAIN_CARDSTATUS_2": "알 수 없음 ",
    "MSG_OVERVIEW_MAIN_CARDSTATUS_3": "대기",
    "MSG_OVERVIEW_MAIN_CARDSTATUS_4": "업데이트 중",
    "MSG_OVERVIEW_MAIN_CARDSTATUS_5": "성능 저하됨",
    "MSG_OVERVIEW_MAIN_CARDSTATUS_ALERT_1": "Alerts could not be loaded.",
    "MSG_NODES_NODEDETAILS_TABOVERVIEW_UTILIZATION_1": "사용",
    "MSG_NODES_NODEDETAILS_TABOVERVIEW_1_1": "1시간",
    "MSG_NODES_NODEDETAILS_TABOVERVIEW_6_1": "6시간",
    "MSG_NODES_NODEDETAILS_TABOVERVIEW_24_1": "24시간",
    "MSG_NODES_NODEDETAILS_TABOVERVIEW_RESOURCE_1": "리소스",
    "MSG_NODES_NODEDETAILS_TABOVERVIEW_USAGE_1": "사용량",
    "MSG_NODES_NODEDETAILS_TABOVERVIEW_CPU_1": "CPU",
    "MSG_NODES_NODEDETAILS_TABOVERVIEW_MEMORY_1": "메모리",
    "MSG_NODES_NODEDETAILS_TABOVERVIEW_DISK_1": "파일 시스템",
    "MSG_NODES_NODEDETAILS_TABOVERVIEW_NETWORK_1": "네트워크 전송",
    "MSG_NODES_NODEDETAILS_TABOVERVIEW_POD_1": "파드 수",
    "MSG_NODES_NODEDETAILS_TABOVERVIEW_CORES_1": "코어",
    "MSG_NODES_NODEDETAILS_TABOVERVIEW_BYTE_1": "바이트",
    "MSG_NODES_NODEDETAILS_TABOVERVIEW_EA_1": "{{0}} 개",
    "MSG_ROLES_ROLEDETAILS_TABROLEBINDINGS_1": "롤 바인딩",
    "MSG_CONTAINERREGISTRIES_CREATEIMAGESCANREQUESTPOPUP_1": "모든 {{0}}",
    "MSG_CONTAINERREGISTRIES_CREATEIMAGESCANREQUESTPOPUP_2": "모든 {{0}} 지우기",
    "MSG_CONTAINERREGISTRIES_CREATEIMAGESCANREQUESTPOPUP_3": "이름",
    "MSG_CONTAINERREGISTRIES_CREATEIMAGESCANREQUESTPOPUP_4": "네임스페이스",
    "MSG_PIPELINERUNS_CREATEFORM_1": "레이블",
    "MSG_PIPELINERUNS_CREATEFORM_2": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_PIPELINERUNS_CREATEFORM_3": "파이프라인",
    "MSG_PIPELINERUNS_CREATEFORM_4": "파이프라인 파라미터",
    "MSG_PIPELINERUNS_CREATEFORM_5": "입력하지 않을 경우 파이프라인 생성 시 설정한 기본 값으로 자동 입력됩니다.",
    "MSG_PIPELINERUNS_CREATEFORM_6": "파이프라인 리소스",
    "MSG_PIPELINERUNS_CREATEFORM_7": "서비스 어카운트 지정",
    "MSG_PIPELINERUNS_CREATEFORM_8": "서비스 어카운트",
    "MSG_PIPELINERESOURCES_CREATEFORM_1": "파이프라인 리소스 이름",
    "MSG_PIPELINERESOURCES_CREATEFORM_2": "레이블",
    "MSG_PIPELINERESOURCES_CREATEFORM_3": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_PIPELINERESOURCES_CREATEFORM_4": "타입",
    "MSG_PIPELINERESOURCES_CREATEFORM_5": "리비전",
    "MSG_PIPELINERESOURCES_CREATEFORM_6": "URL",
    "MSG_PIPELINERESOURCES_CREATEFORM_7": "Git",
    "MSG_PIPELINERESOURCES_CREATEFORM_8": "이미지",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV2_23": "템플릿 인스턴스 유형",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV3_1": "템플릿 (Template)",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV4_1": "클러스터 템플릿 (Cluster Template)",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV5_1": "템플릿 인스턴스 이름",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV6_1": "네임스페이스",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV7_1": "네임스페이스 선택",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV8_1": "레이블",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV9_1": "예: App=frontend",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV10_1": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV11_1": "템플릿",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV12_1": "템플릿 선택",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV13_1": "템플릿 파라미터",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV14_1": "값",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV15_1": "입력하지 않을 경우 템플릿 생성 시 설정한 기본 값으로 자동 입력됩니다.",
    "MSG_TEMPLATEINSTANCES_CREATEFORM_DIV16_1": "이 템플릿과 연결된 파라미터가 없습니다.",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_EDITPODCOUNT_1": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_EDITPODCOUNT_2": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDHEALTHCHECKS_1": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDHEALTHCHECKS_2": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDHEALTHCHECKS_3": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDHEALTHCHECKS_4": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDHEALTHCHECKS_5": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDHEALTHCHECKS_6": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDHEALTHCHECKS_7": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDHEALTHCHECKS_8": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDHEALTHCHECKS_9": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDHEALTHCHECKS_10": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDHEALTHCHECKS_11": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDHEALTHCHECKS_12": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDSTORAGE_1": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDSTORAGE_2": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDSTORAGE_3": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDSTORAGE_4": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDSTORAGE_5": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDSTORAGE_6": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDSTORAGE_7": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDSTORAGE_8": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDSTORAGE_9": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDSTORAGE_10": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDSTORAGE_11": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDSTORAGE_12": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_ADDSTORAGE_13": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_EDITUPDATESTRATEGY_1": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_EDITUPDATESTRATEGY_2": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_EDITUPDATESTRATEGY_3": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_EDITUPDATESTRATEGY_4": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_EDITUPDATESTRATEGY_5": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_EDITUPDATESTRATEGY_6": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_EDITUPDATESTRATEGY_7": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_EDITUPDATESTRATEGY_8": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_EDITUPDATESTRATEGY_9": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_EDITUPDATESTRATEGY_10": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_EDITUPDATESTRATEGY_11": "",
    "MSG_DEPLOYMENTS_EDITDEPLOYMENTS_EDITUPDATESTRATEGY_12": "",
    "MSG_JOBS_EDITJOBS_EDITPARALLELISM_1": "병렬성 수정",
    "MSG_JOBS_EDITJOBS_EDITPARALLELISM_2": ""
  },
  "MULTI": {
    "MSG_MULTI_CLUSTERS_MAIN_POPOVERCONTENTS_1": "",
    "MSG_MULTI_CLUSTERS_TABLECONTENTS_POPOVERCONTENTS_1": "외부 환경의 클러스터를 HyperCloud에 등록한 경우, 오토 스케일링을 지원하지 않습니다.",
    "MSG_MULTI_CLUSTERS_TABLECONTENTS_TYPE_1": "생성",
    "MSG_MULTI_CLUSTERS_TABLECONTENTS_TYPE_2": "등록",
    "MSG_MULTI_CLUSTERS_TABLECONTENTS_STATUS_1": "준비",
    "MSG_MULTI_CLUSTERS_TABLECONTENTS_STATUS_2": "생성 중",
    "MSG_MULTI_CLUSTERS_MAIN_NODEEDITPOPUP_1": "노드 수정",
    "MSG_MULTI_CLUSTERS_MAIN_NODEEDITPOPUP_2": "마스터 노드워 워커 노드의 스케일을 조정할 수 있습니다.",
    "MSG_MULTI_CLUSTERS_MAIN_NODEEDITPOPUP_3": "마스터 노드",
    "MSG_MULTI_CLUSTERS_MAIN_NODEEDITPOPUP_4": "워커 노드",
    "MSG_MULTI_CLUSTERS_MAIN_NODEEDITPOPUP_5": "저장",
    "MSG_MULTI_CLUSTERS_MAIN_NODEEDITPOPUP_6": "취소",
    "MSG_MULTI_CLUSTERS_MAIN_CLUSTERREMOVEPOPUP_1": "클러스터 등록 해제",
    "MSG_MULTI_CLUSTERS_MAIN_CLUSTERREMOVEPOPUP_2": "{Clustername01}의 등록을 해제하시겠습니까?\n\n등록 해제할 경우, HyperCloud 콘솔에서 해당 클러스터에 대한 어떠한 정보도 확인할 수 없습니다.",
    "MSG_MULTI_CLUSTERS_MAIN_CLUSTERREMOVEPOPUP_3": "등록 해제",
    "MSG_MULTI_CLUSTERS_MAIN_CLUSTERREMOVEPOPUP_4": "취소",
    "MSG_MULTI_CLUSTERS_CREATEFORM_DIV1_1": "클러스터 생성",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP1_1": "프로바이더 선택",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_1": "클러스터 설정",
    "MSG_MULTI_CLUSTERS_CREATEFORM_BUTTON_1": "다음",
    "MSG_MULTI_CLUSTERS_CREATEFORM_BUTTON_2": "취소",
    "MSG_MULTI_CLUSTERS_CREATEFORM_BUTTON_3": "이전",
    "MSG_MULTI_CLUSTERS_CREATEFORM_BUTTON_4": "생성",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_2": "클러스터",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_3": "이름",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_4": "클러스터 이름",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_5": "AWS",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_6": "리전",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_7": "AWS 리전 선택",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_8": "마스터 노드",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_9": "개수",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_10": "타입",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_11": "마스터 노드 타입 선택",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_12": "마스터 노드 타입을 선택해주세요.",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_13": "워커 노드",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_14": "워커 노드 타입 선택",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_15": "워커 노드 타입을 선택해주세요.",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_16": "클러스터 그룹",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_17": "이름",
    "MSG_MULTI_CLUSTERS_CREATEFORM_STEP2_18": "선택 안 함",
    "MSG_MULTI_CLUSTERS_REGISTERFORM_1": "클러스터 등록",
    "MSG_MULTI_CLUSTERS_REGISTERFORM_2": "이름",
    "MSG_MULTI_CLUSTERS_REGISTERFORM_3": "클러스터 이름",
    "MSG_MULTI_CLUSTERS_REGISTERFORM_4": "kubeconfig 파일",
    "MSG_MULTI_CLUSTERS_REGISTERFORM_5": "쿠버네티스 구축 후 생성된 설정 파일 내용을 입력해 주세요.",
    "MSG_MULTI_CLUSTERS_REGISTERFORM_6": "등록",
    "MSG_MULTI_CLUSTERS_REGISTERFORM_7": "취소",
    "MSG_MULTI_CLUSTERGROUPS_CREATEFORM_1": "클러스터 그룹 생성",
    "MSG_MULTI_CLUSTERGROUPS_CREATEFORM_2": "이름",
    "MSG_MULTI_CLUSTERGROUPS_CREATEFORM_3": "클러스터 그룹 이름",
    "MSG_MULTI_CLUSTERGROUPS_CREATEFORM_4": "설명",
    "MSG_MULTI_CLUSTERGROUPS_CREATEFORM_5": "레이블",
    "MSG_MULTI_CLUSTERGROUPS_CREATEFORM_6": "예: App=frontend",
    "MSG_MULTI_CLUSTERGROUPS_CREATEFORM_7": "Enter를 입력하여 레이블을 추가할 수 있습니다.",
    "MSG_MULTI_CLUSTERGROUPS_CREATEFORM_8": "생성",
    "MSG_MULTI_CLUSTERGROUPS_CREATEFORM_9": "취소",
    "MSG_MULTI_CLUSTERGROUPS_DELETECLUSTERGROUPPOPUP_1": "{ClusterGroup01}을 삭제하시겠습니까?\n\n삭제할 경우, 그룹에 저장된 정보는 삭제되며 그룹에 등록된 클러스터들은 이 그룹에 등록되지 않은 클러스터로 남게 됩니다.",
    "MSG_MULTI_CLUSTERGROUPS_DELETECLUSTERGROUPPOPUP_2": "삭제",
    "MSG_MULTI_CLUSTERGROUPS_DELETECLUSTERGROUPPOPUP_3": "취소",
    "MSG_MULTI_CLUSTERGROUPS_TABCLUSTERS_ACTIONBUTTON_1": "클러스터 그룹에서 제거",
    "MSG_MULTI_CLUSTERGROUPS_REMOVECLUSTERPOPUP_1": "클러스터 그룹에서 제거",
    "MSG_MULTI_CLUSTERGROUPS_REMOVECLUSTERPOPUP_2": "{Cluster01}을 {ClusterGroup01}에서 제거하시겠습니가?\n\n제거할 경우, 그룹에 등록된 클러스터 목록에서 사라지며, 해당 클러스터는 이 그룹에 등록되지 않은 클러스터로 남게 됩니다.",
    "MSG_MULTI_CLUSTERGROUPS_REMOVECLUSTERPOPUP_3": "제거",
    "MSG_MULTI_CLUSTERGROUPS_REMOVECLUSTERPOPUP_4": "취소",
    "MSG_MULTI_CLUSTERGROUPS_CLUSTERADDPOPUP_1": "클러스터 추가",
    "MSG_MULTI_CLUSTERGROUPS_CLUSTERADDPOPUP_2": "{n}개 선택됨",
    "MSG_MULTI_CLUSTERGROUPS_CLUSTERADDPOPUP_3": "추가",
    "MSG_MULTI_CLUSTERGROUPS_CLUSTERADDPOPUP_4": "취소",
    "MSG_MULTI_FEDERATION_FEDERATEDRESOURCEDELETEPOPUP_1": "페더레이티드 리소스 삭제",
    "MSG_MULTI_FEDERATION_FEDERATEDRESOURCEDELETEPOPUP_2": "{FederatedPod01}을 삭제하시겠습니까?\n\n삭제할 경우, 페더레이티드 리소스 목록에서 사라지며, 이미 배포된 클러스터에 대해서도 삭제됩니다.",
    "MSG_MULTI_FEDERATION_FEDERATEDRESOURCEDELETEPOPUP_3": "삭제",
    "MSG_MULTI_FEDERATION_FEDERATEDRESOURCEDELETEPOPUP_4": "취소",
    "MSG_MULTI_FEDERATION_FEDERATEDRESOURCEDEPLOYPOPUP_1": "페더레이티드 리소스 배포",
    "MSG_MULTI_FEDERATION_FEDERATEDRESOURCEDEPLOYPOPUP_2": "클러스터 선택",
    "MSG_MULTI_FEDERATION_FEDERATEDRESOURCEDEPLOYPOPUP_3": "클러스터 그룹 선택",
    "MSG_MULTI_FEDERATION_FEDERATEDRESOURCEDEPLOYPOPUP_4": "{n}개 선택됨",
    "MSG_MULTI_FEDERATION_FEDERATEDRESOURCEDEPLOYPOPUP_5": "{n}개 클러스터 중복 선택됨\n(중복 선택된 클러스터에 대해서는 하나의 페더레이티드 리소스만 배포됩니다.)",
    "MSG_MULTI_FEDERATION_CREATEFORM_STEP1_1": "리소스 설정",
    "MSG_MULTI_FEDERATION_CREATEFORM_STEP2_1": "배포 설정",
    "MSG_MULTI_FEDERATION_CREATEFORM_STEP2_2": "클러스터 선택",
    "MSG_MULTI_FEDERATION_CREATEFORM_STEP2_3": "클러스터 그룹 선택",
    "MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_BUTTON_1": "엑세스 권한자 초대",
    "MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_TITLE_1": "엑세스 권한자 초대",
    "MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_RADIOBUTTON_1": "멤버",
    "MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_RADIOBUTTON_2": "그룹",
    "MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_SEARCHBAR_1": "이름, 이메일 주소 검색",
    "MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_SEARCHBAR_2": "{{0}}'\n검색 결과가 없습니다.",
    "MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_SUBMESSAGE_1": "멤버를 초대할 경우 초대 알림 메일 발송되며,\n24시간 이내로 수락해야만 엑세스 권한이 부여됩니다. ",
    "MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_SUBMESSAGE_2": "그룹을 초대할 경우, 별도의 수락 과정없이 즉시\n엑세스 권한이 부여됩니다.",
    "MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_LABEL_1": "역할",
    "MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_BUTTON_2": "취소",
    "MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_BUTTON_3": "초대",
    "MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_ERRORMESSAGE_1": "초대할 멤버 또는 그룹을 선택하지 않았습니다.",
    "MSG_MULTI_CLUSTERS_CHANGEPERMISSIONSPOPUP_TITLE_1": "역할 변경",
    "MSG_MULTI_CLUSTERS_DELETEPEPLEPOPUP_TITLE_1": "엑세스 권한 삭제",
    "MSG_MULTI_CLUSTERS_DELETEPEPLEPOPUP_MAINMESSAGE_1": "{{0}}({{1}}) 님을 {{2}} 클러스터에서 삭제하시겠습니까?",
    "MSG_MULTI_CLUSTERS_MAILFORM_1": "[HyperCloud] {{0}} 님이 '{{1}}' 클러스터에 초대했습니다.",
    "MSG_MULTI_CLUSTERS_MAILFORM_2": "{{0}}에 초대되었습니다.",
    "MSG_MULTI_CLUSTERS_MAILFORM_3": "안녕하세요, {{0}}({{1}})\n님이 당신을 클러스터의 {{2}}으로 초대했습니다.",
    "MSG_MULTI_CLUSTERS_MAILFORM_4": "초대를 수락하시려면 HyperCloud로 이동하여 엑세스 권한을 확인하세요.\n이 초대 메일은 발송 시간으로부터 24시간까지만 유효합니다.",
    "MSG_MULTI_CLUSTERS_MAILFORM_5": "HyperCloud 바로 가기",
    "MSG_MULTI_CLUSTERS_MAILFORM_6": "클러스터 이름",
    "MSG_MULTI_CLUSTERS_MAILFORM_7": "소유자",
    "MSG_MULTI_CLUSTERS_MAILFORM_8": "Copyright 2020. TmaxA&C Corp. All rights reserved.",
    "MSG_MULTI_CLUSTERS_DELETEACCESSMEMBER_1": "취소",
    "MSG_MULTI_CLUSTERS_DELETEACCESSMEMBER_2": "삭제"
  },
  "SCHEMA": {
    "%StorageClass.json": "StorageClass는 PersistentVolume을 동적으로 프로비저닝 할 수있는 스토리지 클래스의 매개 변수를 설명합니다. StorageClass는 네임 스페이스가 아닙니다. etcd에 따른 스토리지 클래스의 이름은 ObjectMeta.Name에 있습니다.",
    "%StorageClass.json.properties.allowVolumeExpansion": "AllowVolumeExpansion은 스토리지 클래스가 볼륨 확장을 허용하는지 여부를 보여줍니다.",
    "%StorageClass.json.properties.allowedTopologies": "볼륨을 동적으로 프로비저닝 할 수있는 노드 토폴로지를 제한하십시오. 각 볼륨 플러그인은 자체 지원되는 토폴로지 사양을 정의합니다. 비어있는 TopologySelectorTerm 목록은 토폴로지 제한이 없음을 의미합니다. 이 필드는 VolumeScheduling 기능을 활성화하는 서버에서만 적용됩니다.",
    "%StorageClass.json.properties.allowedTopologies.items": "토폴로지 선택기 용어는 레이블 쿼리의 결과를 나타냅니다. null 또는 빈 토폴로지 선택기 용어는 개체와 일치하지 않습니다. 이들의 요구 사항은 AND입니다. NodeSelectorTerm으로 기능의 하위 집합을 제공합니다. 이것은 알파 기능이며 향후 변경 될 수 있습니다.",
    "%StorageClass.json.properties.allowedTopologies.items.properties.matchLabelExpressions": "레이블 별 토폴로지 선택기 요구 사항 목록입니다.",
    "%StorageClass.json.properties.allowedTopologies.items.properties.matchLabelExpressions.items": "토폴로지 선택기 요구 사항은 지정된 레이블과 일치하는 선택기입니다. 이것은 알파 기능이며 향후 변경 될 수 있습니다.",
    "%StorageClass.json.properties.allowedTopologies.items.properties.matchLabelExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%StorageClass.json.properties.allowedTopologies.items.properties.matchLabelExpressions.items.properties.values": "문자열 값의 배열입니다. 하나의 값이 선택할 레이블과 일치해야합니다. 값의 각 항목은 OR로 연결됩니다.",
    "%StorageClass.json.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%StorageClass.json.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%StorageClass.json.properties.metadata": "ObjectMeta는 사용자가 만들어야하는 모든 개체를 포함하는 모든 지속 형 리소스에 있어야하는 메타 데이터입니다.",
    "%StorageClass.json.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%StorageClass.json.properties.metadata.properties.clusterName": "개체가 속한 클러스터의 이름입니다. 이는 서로 다른 클러스터에서 이름과 네임 스페이스가 동일한 리소스를 구별하는 데 사용됩니다. 이 필드는 현재 어디에도 설정되어 있지 않으며 apiserver는 생성 또는 업데이트 요청에 설정된 경우이를 무시합니다.",
    "%StorageClass.json.properties.metadata.properties.creationTimestamp": "시간은 YAML 및 JSON에 대한 올바른 마샬링을 지원하는 시간에 대한 래퍼입니다. 시간 패키지가 제공하는 많은 팩토리 메소드에 대해 래퍼가 제공됩니다.",
    "%StorageClass.json.properties.metadata.properties.deletionGracePeriodSeconds": "이 개체가 시스템에서 제거되기 전에 정상적으로 종료되는 데 허용되는 시간 (초)입니다. deleteTimestamp도 설정된 경우에만 설정됩니다. 단축 만 가능합니다. 읽기 전용.",
    "%StorageClass.json.properties.metadata.properties.deletionTimestamp": "시간은 YAML 및 JSON에 대한 올바른 마샬링을 지원하는 시간에 대한 래퍼입니다. 시간 패키지가 제공하는 많은 팩토리 메소드에 대해 래퍼가 제공됩니다.",
    "%StorageClass.json.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%StorageClass.json.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%StorageClass.json.properties.metadata.properties.generation": "원하는 상태의 특정 세대를 나타내는 시퀀스 번호입니다. 시스템에 의해 채워집니다. 읽기 전용.",
    "%StorageClass.json.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%StorageClass.json.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%StorageClass.json.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%StorageClass.json.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%StorageClass.json.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%StorageClass.json.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 Trie와 같은 데이터 구조에 JSON 형식으로 필드 세트를 저장합니다. 각 키는 &#39;.&#39;입니다. 필드 자체를 나타내며 항상 빈 세트 또는 하위 필드 또는 항목을 나타내는 문자열에 매핑됩니다. 문자열은 다음 네 가지 형식 중 하나를 따릅니다. &#39;f :<name> &#39;, 어디<name> 구조체의 필드 이름이거나 맵 &#39;v :<value> &#39;, 어디<value> 목록 항목 &#39;i :&#39;의 정확한 json 형식 값입니다.<index> &#39;, 어디<index> 목록에서 항목의 위치 &#39;k :<keys> &#39;, 어디<keys> 목록 항목의 키 필드를 고유 한 값으로 매핑합니다. 키가 빈 필드 값에 매핑되는 경우 키가 나타내는 필드는 집합의 일부입니다. 정확한 형식은 sigs.k8s.io/structured-merge-diff에 정의되어 있습니다.",
    "%StorageClass.json.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%StorageClass.json.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%StorageClass.json.properties.metadata.properties.managedFields.items.properties.time": "시간은 YAML 및 JSON에 대한 올바른 마샬링을 지원하는 시간에 대한 래퍼입니다. 시간 패키지가 제공하는 많은 팩토리 메소드에 대해 래퍼가 제공됩니다.",
    "%StorageClass.json.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%StorageClass.json.properties.metadata.properties.namespace": "네임 스페이스는 각 이름 내의 공간이 고유해야 함을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%StorageClass.json.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%StorageClass.json.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%StorageClass.json.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%StorageClass.json.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%StorageClass.json.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%StorageClass.json.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%StorageClass.json.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%StorageClass.json.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%StorageClass.json.properties.metadata.properties.resourceVersion": "개체가 변경된시기를 확인하기 위해 클라이언트에서 사용할 수있는이 개체의 내부 버전을 나타내는 불투명 값입니다. 낙관적 동시성, 변경 감지 및 리소스 또는 리소스 집합에 대한 감시 작업에 사용할 수 있습니다. 클라이언트는 이러한 값을 불투명하게 처리하고 수정되지 않은 상태로 서버에 다시 전달해야합니다. 특정 리소스 또는 리소스 집합에 대해서만 유효 할 수 있습니다. 시스템에 의해 채워집니다. 읽기 전용. 값은 클라이언트 및. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
    "%StorageClass.json.properties.metadata.properties.selfLink": "SelfLink는이 개체를 나타내는 URL입니다. 시스템에 의해 채워집니다. 읽기 전용. DEPRECATED Kubernetes는 1.20 릴리스에서이 필드 전파를 중지하며 필드는 1.21 릴리스에서 제거 될 예정입니다.",
    "%StorageClass.json.properties.metadata.properties.uid": "UID는이 개체의 시간 및 공간 값에서 고유합니다. 일반적으로 리소스가 성공적으로 생성되면 서버에서 생성되며 PUT 작업에서 변경할 수 없습니다. 시스템에 의해 채워집니다. 읽기 전용. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%StorageClass.json.properties.mountOptions": "이 스토리지 클래스의 동적 프로비저닝 PersistentVolume은 이러한 mountOptions (예 : [ &quot;ro&quot;, &quot;soft&quot;])로 생성됩니다. 검증되지 않음-PV 마운트가 유효하지 않으면 단순히 실패합니다.",
    "%StorageClass.json.properties.parameters": "매개 변수는이 스토리지 클래스의 볼륨을 작성해야하는 프로비저닝 도구의 매개 변수를 보유합니다.",
    "%StorageClass.json.properties.provisioner": "제공자는 제공자의 유형을 나타냅니다.",
    "%StorageClass.json.properties.reclaimPolicy": "이 reclaimPolicy를 사용하여이 스토리지 클래스의 동적으로 프로비저닝 된 PersistentVolume이 생성됩니다. 기본값은 삭제입니다.",
    "%StorageClass.json.properties.volumeBindingMode": "VolumeBindingMode는 PersistentVolumeClaims를 프로비저닝하고 바인딩하는 방법을 나타냅니다. 설정되지 않으면 VolumeBindingImmediate가 사용됩니다. 이 필드는 VolumeScheduling 기능을 활성화하는 서버에서만 적용됩니다.",
    "%PersistentVolumeClaim.json": "PersistentVolumeClaim은 영구 볼륨에 대한 사용자의 요청 및 클레임입니다.",
    "%PersistentVolumeClaim.json.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%PersistentVolumeClaim.json.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%PersistentVolumeClaim.json.properties.metadata": "ObjectMeta는 사용자가 만들어야하는 모든 개체를 포함하는 모든 지속 형 리소스에 있어야하는 메타 데이터입니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%PersistentVolumeClaim.json.properties.metadata.properties.clusterName": "개체가 속한 클러스터의 이름입니다. 이는 서로 다른 클러스터에서 이름과 네임 스페이스가 동일한 리소스를 구별하는 데 사용됩니다. 이 필드는 현재 어디에도 설정되어 있지 않으며 apiserver는 생성 또는 업데이트 요청에 설정된 경우이를 무시합니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.creationTimestamp": "시간은 YAML 및 JSON에 대한 올바른 마샬링을 지원하는 시간에 대한 래퍼입니다. 시간 패키지가 제공하는 많은 팩토리 메소드에 대해 래퍼가 제공됩니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.deletionGracePeriodSeconds": "이 개체가 시스템에서 제거되기 전에 정상적으로 종료되는 데 허용되는 시간 (초)입니다. deleteTimestamp도 설정된 경우에만 설정됩니다. 단축 만 가능합니다. 읽기 전용.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.deletionTimestamp": "시간은 YAML 및 JSON에 대한 올바른 마샬링을 지원하는 시간에 대한 래퍼입니다. 시간 패키지가 제공하는 많은 팩토리 메소드에 대해 래퍼가 제공됩니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%PersistentVolumeClaim.json.properties.metadata.properties.generation": "원하는 상태의 특정 세대를 나타내는 시퀀스 번호입니다. 시스템에 의해 채워집니다. 읽기 전용.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%PersistentVolumeClaim.json.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 Trie와 같은 데이터 구조에 JSON 형식으로 필드 세트를 저장합니다. 각 키는 &#39;.&#39;입니다. 필드 자체를 나타내며 항상 빈 세트 또는 하위 필드 또는 항목을 나타내는 문자열에 매핑됩니다. 문자열은 다음 네 가지 형식 중 하나를 따릅니다. &#39;f :<name> &#39;, 어디<name> 구조체의 필드 이름이거나 맵 &#39;v :<value> &#39;, 어디<value> 목록 항목 &#39;i :&#39;의 정확한 json 형식 값입니다.<index> &#39;, 어디<index> 목록에서 항목의 위치 &#39;k :<keys> &#39;, 어디<keys> 목록 항목의 키 필드를 고유 한 값으로 매핑합니다. 키가 빈 필드 값에 매핑되는 경우 키가 나타내는 필드는 집합의 일부입니다. 정확한 형식은 sigs.k8s.io/structured-merge-diff에 정의되어 있습니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.managedFields.items.properties.time": "시간은 YAML 및 JSON에 대한 올바른 마샬링을 지원하는 시간에 대한 래퍼입니다. 시간 패키지가 제공하는 많은 팩토리 메소드에 대해 래퍼가 제공됩니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%PersistentVolumeClaim.json.properties.metadata.properties.namespace": "네임 스페이스는 각 이름 내의 공간이 고유해야 함을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%PersistentVolumeClaim.json.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%PersistentVolumeClaim.json.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%PersistentVolumeClaim.json.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%PersistentVolumeClaim.json.properties.metadata.properties.resourceVersion": "개체가 변경된시기를 확인하기 위해 클라이언트에서 사용할 수있는이 개체의 내부 버전을 나타내는 불투명 값입니다. 낙관적 동시성, 변경 감지 및 리소스 또는 리소스 집합에 대한 감시 작업에 사용할 수 있습니다. 클라이언트는 이러한 값을 불투명하게 처리하고 수정되지 않은 상태로 서버에 다시 전달해야합니다. 특정 리소스 또는 리소스 집합에 대해서만 유효 할 수 있습니다. 시스템에 의해 채워집니다. 읽기 전용. 값은 클라이언트 및. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
    "%PersistentVolumeClaim.json.properties.metadata.properties.selfLink": "SelfLink는이 개체를 나타내는 URL입니다. 시스템에 의해 채워집니다. 읽기 전용. DEPRECATED Kubernetes는 1.20 릴리스에서이 필드 전파를 중지하며 필드는 1.21 릴리스에서 제거 될 예정입니다.",
    "%PersistentVolumeClaim.json.properties.metadata.properties.uid": "UID는이 개체의 시간 및 공간 값에서 고유합니다. 일반적으로 리소스가 성공적으로 생성되면 서버에서 생성되며 PUT 작업에서 변경할 수 없습니다. 시스템에 의해 채워집니다. 읽기 전용. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%PersistentVolumeClaim.json.properties.spec": "PersistentVolumeClaimSpec은 저장 장치의 공통 속성을 설명하고 공급자 별 속성에 대한 소스를 허용합니다.",
    "%PersistentVolumeClaim.json.properties.spec.properties.accessModes": "AccessModes에는 볼륨에 필요한 액세스 모드가 포함되어 있습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    "%PersistentVolumeClaim.json.properties.spec.properties.dataSource": "TypedLocalObjectReference에는 동일한 네임 스페이스 내에서 형식화 된 참조 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%PersistentVolumeClaim.json.properties.spec.properties.dataSource.properties.apiGroup": "APIGroup은 참조되는 리소스에 대한 그룹입니다. APIGroup이 지정되지 않은 경우 지정된 종류가 코어 API 그룹에 있어야합니다. 다른 타사 유형의 경우 APIGroup이 필요합니다.",
    "%PersistentVolumeClaim.json.properties.spec.properties.dataSource.properties.kind": "Kind는 참조되는 리소스 유형입니다.",
    "%PersistentVolumeClaim.json.properties.spec.properties.dataSource.properties.name": "이름은 참조되는 리소스의 이름입니다.",
    "%PersistentVolumeClaim.json.properties.spec.properties.resources": "리소스는 볼륨에 있어야하는 최소 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
    "%PersistentVolumeClaim.json.properties.spec.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%PersistentVolumeClaim.json.properties.spec.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%PersistentVolumeClaim.json.properties.spec.properties.selector": "라벨 선택기는 리소스 집합에 대한 라벨 쿼리입니다. matchLabels 및 matchExpressions의 결과는 AND로 연결됩니다. 빈 레이블 선택기는 모든 개체와 일치합니다. null 레이블 선택기는 개체와 일치하지 않습니다.",
    "%PersistentVolumeClaim.json.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%PersistentVolumeClaim.json.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%PersistentVolumeClaim.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%PersistentVolumeClaim.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%PersistentVolumeClaim.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%PersistentVolumeClaim.json.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%PersistentVolumeClaim.json.properties.spec.properties.storageClassName": "클레임에 필요한 StorageClass의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
    "%PersistentVolumeClaim.json.properties.spec.properties.volumeMode": "volumeMode는 클레임에 필요한 볼륨 유형을 정의합니다. 클레임 사양에 포함되지 않은 경우 파일 시스템의 가치가 암시됩니다.",
    "%PersistentVolumeClaim.json.properties.spec.properties.volumeName": "VolumeName은이 클레임을 뒷받침하는 PersistentVolume에 대한 바인딩 참조입니다.",
    "%PersistentVolumeClaim.json.properties.status": "PersistentVolumeClaimStatus는 영구 볼륨 클레임의 현재 상태입니다.",
    "%PersistentVolumeClaim.json.properties.status.properties.accessModes": "AccessModes에는 PVC를 지원하는 볼륨에있는 실제 액세스 모드가 포함됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    "%PersistentVolumeClaim.json.properties.status.properties.capacity": "기본 볼륨의 실제 리소스를 나타냅니다.",
    "%PersistentVolumeClaim.json.properties.status.properties.conditions": "지속적 볼륨 청구의 현재 상태. 기본 영구 볼륨의 크기가 조정되는 경우 조건이 &#39;ResizeStarted&#39;로 설정됩니다.",
    "%PersistentVolumeClaim.json.properties.status.properties.conditions.items": "PersistentVolumeClaimCondition은 pvc 상태에 대한 세부 정보를 포함합니다.",
    "%PersistentVolumeClaim.json.properties.status.properties.conditions.items.properties.lastProbeTime": "시간은 YAML 및 JSON에 대한 올바른 마샬링을 지원하는 시간에 대한 래퍼입니다. 시간 패키지가 제공하는 많은 팩토리 메소드에 대해 래퍼가 제공됩니다.",
    "%PersistentVolumeClaim.json.properties.status.properties.conditions.items.properties.lastTransitionTime": "시간은 YAML 및 JSON에 대한 올바른 마샬링을 지원하는 시간에 대한 래퍼입니다. 시간 패키지가 제공하는 많은 팩토리 메소드에 대해 래퍼가 제공됩니다.",
    "%PersistentVolumeClaim.json.properties.status.properties.conditions.items.properties.message": "마지막 전환에 대한 세부 정보를 나타내는 사람이 읽을 수있는 메시지입니다.",
    "%PersistentVolumeClaim.json.properties.status.properties.conditions.items.properties.reason": "고유합니다. 이것은 조건의 마지막 전환 이유를 제공하는 짧고 기계가 이해할 수있는 문자열이어야합니다. &quot;ResizeStarted&quot;가보고되면 기본 영구 볼륨의 크기가 조정되고 있음을 의미합니다.",
    "%PersistentVolumeClaim.json.properties.status.properties.phase": "Phase는 PersistentVolumeClaim의 현재 단계를 나타냅니다.",
    "%PersistentVolume.json": "PersistentVolume (PV)은 관리자가 프로비저닝 한 스토리지 리소스입니다. 노드와 유사합니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes",
    "%PersistentVolume.json.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
    "%PersistentVolume.json.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
    "%PersistentVolume.json.properties.metadata": "ObjectMeta는 사용자가 만들어야하는 모든 개체를 포함하는 모든 지속 형 리소스에 있어야하는 메타 데이터입니다.",
    "%PersistentVolume.json.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%PersistentVolume.json.properties.metadata.properties.clusterName": "개체가 속한 클러스터의 이름입니다. 이는 서로 다른 클러스터에서 이름과 네임 스페이스가 동일한 리소스를 구별하는 데 사용됩니다. 이 필드는 현재 어디에도 설정되어 있지 않으며 apiserver는 생성 또는 업데이트 요청에 설정된 경우이를 무시합니다.",
    "%PersistentVolume.json.properties.metadata.properties.creationTimestamp": "시간은 YAML 및 JSON에 대한 올바른 마샬링을 지원하는 시간에 대한 래퍼입니다. 시간 패키지가 제공하는 많은 팩토리 메소드에 대해 래퍼가 제공됩니다.",
    "%PersistentVolume.json.properties.metadata.properties.deletionGracePeriodSeconds": "이 개체가 시스템에서 제거되기 전에 정상적으로 종료되는 데 허용되는 시간 (초)입니다. deleteTimestamp도 설정된 경우에만 설정됩니다. 단축 만 가능합니다. 읽기 전용.",
    "%PersistentVolume.json.properties.metadata.properties.deletionTimestamp": "시간은 YAML 및 JSON에 대한 올바른 마샬링을 지원하는 시간에 대한 래퍼입니다. 시간 패키지가 제공하는 많은 팩토리 메소드에 대해 래퍼가 제공됩니다.",
    "%PersistentVolume.json.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다.",
    "%PersistentVolume.json.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency",
    "%PersistentVolume.json.properties.metadata.properties.generation": "원하는 상태의 특정 세대를 나타내는 시퀀스 번호입니다. 시스템에 의해 채워집니다. 읽기 전용.",
    "%PersistentVolume.json.properties.metadata.properties.initializers": "이니셜 라이저는 초기화 진행률을 추적합니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.pending": "Pending은이 개체가 표시되기 전에 순서대로 실행해야하는 초기화 프로그램 목록입니다. 마지막 보류중인 이니셜 라이저가 제거되고 실패한 결과가 설정되지 않은 경우 이니셜 라이저 구조체는 nil로 설정되고 객체는 초기화되고 모든 클라이언트에 표시되는 것으로 간주됩니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.pending.items": "이니셜 라이저는 아직 완료되지 않은 이니셜 라이저에 대한 정보입니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.pending.items.properties.name": "이 개체를 초기화하는 프로세스의 이름입니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result": "상태는 다른 개체를 반환하지 않는 호출에 대한 반환 값입니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.code": "이 상태에 대해 제안 된 HTTP 리턴 코드 (설정되지 않은 경우 0).",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.details": "StatusDetails는 응답에 대한 추가 정보를 제공하기 위해 서버에서 설정할 수있는 추가 속성 집합입니다. 상태 개체의 이유 필드는 설정할 속성을 정의합니다. 클라이언트는 각 속성의 정의 된 유형과 일치하지 않는 필드를 무시해야하며 속성이 비어 있거나, 유효하지 않거나, 정의되지 않은 것으로 가정해야합니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.details.properties.causes": "원인 배열에는 StatusReason 실패와 관련된 자세한 정보가 포함됩니다. 모든 StatusReason이 자세한 원인을 제공하는 것은 아닙니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.details.properties.causes.items": "StatusCause는 여러 오류가 발생한 경우를 포함하여 api.Status 실패에 대한 자세한 정보를 제공합니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.details.properties.causes.items.properties.field": "이 오류를 일으킨 리소스의 필드 (JSON 직렬화로 명명 됨). 중첩 된 속성에 대한 점 및 접미사 표기법을 포함 할 수 있습니다. 배열은 인덱스가 0입니다. 여러 오류가있는 필드로 인해 원인 배열에 필드가 두 번 이상 나타날 수 있습니다. 선택 과목. 예 : &quot;name&quot;-현재 자원 &quot;items [0] .name&quot;의 &quot;name&quot;필드- &quot;items&quot;의 첫 번째 배열 항목에있는 &quot;name&quot;필드",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.details.properties.causes.items.properties.message": "오류 원인에 대한 사람이 읽을 수있는 설명입니다. 이 필드는 독자에게있는 그대로 표시 될 수 있습니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.details.properties.causes.items.properties.reason": "오류 원인에 대한 기계 판독 가능 설명입니다. 이 값이 비어 있으면 사용 가능한 정보가 없습니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.details.properties.group": "StatusReason 상태와 연관된 자원의 그룹 속성입니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.details.properties.kind": "StatusReason과 관련된 리소스의 종류 속성입니다. 일부 작업에서는 요청 된 리소스 종류와 다를 수 있습니다. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.details.properties.name": "StatusReason (설명 할 수있는 단일 이름이있는 경우) 상태와 연관된 자원의 이름 속성입니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.details.properties.retryAfterSeconds": "지정된 경우 작업을 다시 시도해야하는 시간 (초)입니다. 일부 오류는 클라이언트가 대체 조치를 취해야 함을 나타낼 수 있습니다. 이러한 오류의 경우이 필드는 대체 조치를 취하기 전에 대기해야하는 시간을 나타낼 수 있습니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.details.properties.uid": "리소스의 UID입니다. (설명 할 수있는 단일 리소스가있는 경우). 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.message": "이 작업의 상태에 대한 사람이 읽을 수있는 설명입니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.metadata": "ListMeta는 목록 및 다양한 상태 개체를 포함하여 합성 리소스에 있어야하는 메타 데이터를 설명합니다. 리소스에는 {ObjectMeta, ListMeta} 중 하나만있을 수 있습니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.metadata.properties.continue": "사용자가 반환되는 항목 수에 제한을 설정하고 서버에 더 많은 데이터를 사용할 수 있음을 나타내는 경우 continue가 설정 될 수 있습니다. 값은 불투명하며 다음 사용 가능한 개체 집합을 검색하기 위해이 목록을 제공 한 끝점에 다른 요청을 보내는 데 사용될 수 있습니다. 서버 구성이 변경되었거나 몇 분 이상 경과 한 경우 목록을 계속할 수 없습니다. 이 continue 값을 사용할 때 반환되는 resourceVersion 필드는 첫 번째 응답의 값과 동일합니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.metadata.properties.resourceVersion": "클라이언트가 개체가 변경된시기를 확인하는 데 사용할 수있는이 개체의 서버 내부 버전을 식별하는 문자열입니다. 값은 클라이언트에 의해 불투명 한 것으로 취급되어야하며 수정되지 않은 상태로 서버로 다시 전달되어야합니다. 시스템에 의해 채워집니다. 읽기 전용. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.metadata.properties.selfLink": "selfLink는이 객체를 나타내는 URL입니다. 시스템에 의해 채워집니다. 읽기 전용.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.reason": "이 작업이 &quot;실패&quot;상태에있는 이유에 대한 기계 판독 가능 설명입니다. 이 값이 비어 있으면 사용 가능한 정보가 없습니다. 이유는 HTTP 상태 코드를 설명하지만 재정의하지는 않습니다.",
    "%PersistentVolume.json.properties.metadata.properties.initializers.properties.result.properties.status": "작업 상태입니다. &quot;성공&quot;또는 &quot;실패&quot;중 하나입니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
    "%PersistentVolume.json.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%PersistentVolume.json.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%PersistentVolume.json.properties.metadata.properties.namespace": "네임 스페이스는 각 이름 내의 공간이 고유해야 함을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%PersistentVolume.json.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%PersistentVolume.json.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 현재 소유 개체는 동일한 네임 스페이스에 있어야하므로 네임 스페이스 필드가 없습니다.",
    "%PersistentVolume.json.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%PersistentVolume.json.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%PersistentVolume.json.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%PersistentVolume.json.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
    "%PersistentVolume.json.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%PersistentVolume.json.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%PersistentVolume.json.properties.metadata.properties.resourceVersion": "개체가 변경된시기를 확인하기 위해 클라이언트에서 사용할 수있는이 개체의 내부 버전을 나타내는 불투명 값입니다. 낙관적 동시성, 변경 감지 및 리소스 또는 리소스 집합에 대한 감시 작업에 사용할 수 있습니다. 클라이언트는 이러한 값을 불투명하게 처리하고 수정되지 않은 상태로 서버에 다시 전달해야합니다. 특정 리소스 또는 리소스 집합에 대해서만 유효 할 수 있습니다. 시스템에 의해 채워집니다. 읽기 전용. 값은 클라이언트 및. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
    "%PersistentVolume.json.properties.metadata.properties.selfLink": "SelfLink는이 개체를 나타내는 URL입니다. 시스템에 의해 채워집니다. 읽기 전용.",
    "%PersistentVolume.json.properties.metadata.properties.uid": "UID는이 개체의 시간 및 공간 값에서 고유합니다. 일반적으로 리소스가 성공적으로 생성되면 서버에서 생성되며 PUT 작업에서 변경할 수 없습니다. 시스템에 의해 채워집니다. 읽기 전용. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%PersistentVolume.json.properties.spec": "PersistentVolumeSpec은 영구 볼륨의 사양입니다.",
    "%PersistentVolume.json.properties.spec.properties.accessModes": "AccessModes에는 볼륨을 마운트 할 수있는 모든 방법이 포함됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes",
    "%PersistentVolume.json.properties.spec.properties.awsElasticBlockStore": "AWS의 영구 디스크 리소스를 나타냅니다. 컨테이너에 탑재하기 전에 AWS EBS 디스크가 있어야합니다. 또한 디스크는 kubelet과 동일한 AWS 영역에 있어야합니다. AWS EBS 디스크는 읽기 / 쓰기로 한 번만 마운트 할 수 있습니다. AWS EBS 볼륨은 소유권 관리 및 SELinux 레이블 재 지정을 지원합니다.",
    "%PersistentVolume.json.properties.spec.properties.awsElasticBlockStore.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%PersistentVolume.json.properties.spec.properties.awsElasticBlockStore.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다).",
    "%PersistentVolume.json.properties.spec.properties.awsElasticBlockStore.properties.readOnly": "VolumeMounts의 ReadOnly 속성을 &quot;true&quot;로 강제 설정하려면 &quot;true&quot;를 지정합니다. 생략하면 기본값은 &quot;false&quot;입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%PersistentVolume.json.properties.spec.properties.awsElasticBlockStore.properties.volumeID": "AWS에있는 영구 디스크 리소스의 고유 ID (Amazon EBS 볼륨). 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%PersistentVolume.json.properties.spec.properties.azureDisk": "AzureDisk는 호스트의 Azure 데이터 디스크 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%PersistentVolume.json.properties.spec.properties.azureDisk.properties.cachingMode": "호스트 캐싱 모드 : 없음, 읽기 전용, 읽기 쓰기.",
    "%PersistentVolume.json.properties.spec.properties.azureDisk.properties.diskName": "Blob 저장소에있는 데이터 디스크의 이름",
    "%PersistentVolume.json.properties.spec.properties.azureDisk.properties.diskURI": "Blob 저장소의 데이터 디스크 URI",
    "%PersistentVolume.json.properties.spec.properties.azureDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%PersistentVolume.json.properties.spec.properties.azureDisk.properties.kind": "예상 값 공유 : 스토리지 계정 당 여러 Blob 디스크 전용 : 스토리지 계정 당 단일 Blob 디스크 관리 : Azure 관리 데이터 디스크 (관리되는 가용성 집합에서만). 기본적으로 공유 됨",
    "%PersistentVolume.json.properties.spec.properties.azureDisk.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%PersistentVolume.json.properties.spec.properties.azureFile": "AzureFile은 호스트의 Azure 파일 서비스 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%PersistentVolume.json.properties.spec.properties.azureFile.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%PersistentVolume.json.properties.spec.properties.azureFile.properties.secretName": "Azure Storage 계정 이름 및 키가 포함 된 비밀의 이름",
    "%PersistentVolume.json.properties.spec.properties.azureFile.properties.secretNamespace": "Azure Storage 계정 이름 및 키 기본값을 포함하는 비밀의 네임 스페이스는 포드와 동일합니다.",
    "%PersistentVolume.json.properties.spec.properties.azureFile.properties.shareName": "이름 공유",
    "%PersistentVolume.json.properties.spec.properties.capacity": "영구 볼륨의 리소스 및 용량에 대한 설명입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
    "%PersistentVolume.json.properties.spec.properties.cephfs": "포드의 수명 동안 지속되는 Ceph 파일 시스템 마운트를 나타냅니다. Cephfs 볼륨은 소유권 관리 또는 SELinux 레이블 재 지정을 지원하지 않습니다.",
    "%PersistentVolume.json.properties.spec.properties.cephfs.properties.monitors": "필수 : Monitors는 Ceph 모니터 모음입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%PersistentVolume.json.properties.spec.properties.cephfs.properties.path": "선택 사항 : 전체 Ceph 트리가 아닌 마운트 된 루트로 사용되며 기본값은 /입니다.",
    "%PersistentVolume.json.properties.spec.properties.cephfs.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%PersistentVolume.json.properties.spec.properties.cephfs.properties.secretFile": "선택 사항 : SecretFile은 사용자의 키 링 경로이며 기본값은 /etc/ceph/user.secret입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%PersistentVolume.json.properties.spec.properties.cephfs.properties.secretRef": "SecretReference는 비밀 참조를 나타냅니다. 모든 네임 스페이스에서 비밀을 검색하기에 충분한 정보가 있습니다.",
    "%PersistentVolume.json.properties.spec.properties.cephfs.properties.secretRef.properties.name": "이름은 비밀 리소스를 참조하기 위해 네임 스페이스 내에서 고유합니다.",
    "%PersistentVolume.json.properties.spec.properties.cephfs.properties.secretRef.properties.namespace": "네임 스페이스는 비밀 이름이 고유해야하는 공간을 정의합니다.",
    "%PersistentVolume.json.properties.spec.properties.cephfs.properties.user": "선택 사항 : 사용자는 rados 사용자 이름, 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%PersistentVolume.json.properties.spec.properties.cinder": "Openstack의 콘크리트 볼륨 리소스를 나타냅니다. 컨테이너에 마운트하기 전에 Cinder 볼륨이 있어야합니다. 볼륨은 kubelet과 동일한 리전에 있어야합니다. Cinder 볼륨은 소유권 관리 및 SELinux 레이블 재 지정을 지원합니다.",
    "%PersistentVolume.json.properties.spec.properties.cinder.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%PersistentVolume.json.properties.spec.properties.cinder.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%PersistentVolume.json.properties.spec.properties.cinder.properties.secretRef": "SecretReference는 비밀 참조를 나타냅니다. 모든 네임 스페이스에서 비밀을 검색하기에 충분한 정보가 있습니다.",
    "%PersistentVolume.json.properties.spec.properties.cinder.properties.secretRef.properties.name": "이름은 비밀 리소스를 참조하기 위해 네임 스페이스 내에서 고유합니다.",
    "%PersistentVolume.json.properties.spec.properties.cinder.properties.secretRef.properties.namespace": "네임 스페이스는 비밀 이름이 고유해야하는 공간을 정의합니다.",
    "%PersistentVolume.json.properties.spec.properties.cinder.properties.volumeID": "cinder에서 볼륨을 식별하는 데 사용되는 볼륨 ID 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%PersistentVolume.json.properties.spec.properties.claimRef": "ObjectReference에는 참조 된 객체를 검사하거나 수정할 수있는 충분한 정보가 포함되어 있습니다.",
    "%PersistentVolume.json.properties.spec.properties.claimRef.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%PersistentVolume.json.properties.spec.properties.claimRef.properties.fieldPath": "전체 개체 대신 개체의 일부를 참조하는 경우이 문자열에는 desiredState.manifest.containers [2]와 같은 유효한 JSON / Go 필드 액세스 문이 포함되어야합니다. 예를 들어, 객체 참조가 포드 내의 컨테이너에 대한 경우 &quot;spec.containers {name}&quot;( &quot;name&quot;은 이벤트를 트리거 한 컨테이너의 이름을 나타냄)와 같은 값을 취합니다. &quot;spec.containers [2]&quot;(이 포드에 인덱스 2가있는 컨테이너)가 지정된 컨테이너 이름이 없습니다. 이 구문은 객체의 일부를 참조하는 잘 정의 된 방법을 갖도록 선택되었습니다.",
    "%PersistentVolume.json.properties.spec.properties.claimRef.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%PersistentVolume.json.properties.spec.properties.claimRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%PersistentVolume.json.properties.spec.properties.claimRef.properties.namespace": "리퍼 런트의 네임 스페이스입니다. 자세한 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
    "%PersistentVolume.json.properties.spec.properties.claimRef.properties.resourceVersion": "이 참조가 작성된 특정 resourceVersion입니다 (있는 경우). 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
    "%PersistentVolume.json.properties.spec.properties.claimRef.properties.uid": "리퍼 런트의 UID. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
    "%PersistentVolume.json.properties.spec.properties.csi": "외부 CSI 볼륨 드라이버 (베타 기능)에서 관리하는 스토리지를 나타냅니다.",
    "%PersistentVolume.json.properties.spec.properties.csi.properties.controllerPublishSecretRef": "SecretReference는 비밀 참조를 나타냅니다. 모든 네임 스페이스에서 비밀을 검색하기에 충분한 정보가 있습니다.",
    "%PersistentVolume.json.properties.spec.properties.csi.properties.controllerPublishSecretRef.properties.name": "이름은 비밀 리소스를 참조하기 위해 네임 스페이스 내에서 고유합니다.",
    "%PersistentVolume.json.properties.spec.properties.csi.properties.controllerPublishSecretRef.properties.namespace": "네임 스페이스는 비밀 이름이 고유해야하는 공간을 정의합니다.",
    "%PersistentVolume.json.properties.spec.properties.csi.properties.driver": "Driver는이 볼륨에 사용할 드라이버의 이름입니다. 필수입니다.",
    "%PersistentVolume.json.properties.spec.properties.csi.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;.",
    "%PersistentVolume.json.properties.spec.properties.csi.properties.nodePublishSecretRef": "SecretReference는 비밀 참조를 나타냅니다. 모든 네임 스페이스에서 비밀을 검색하기에 충분한 정보가 있습니다.",
    "%PersistentVolume.json.properties.spec.properties.csi.properties.nodePublishSecretRef.properties.name": "이름은 비밀 리소스를 참조하기 위해 네임 스페이스 내에서 고유합니다.",
    "%PersistentVolume.json.properties.spec.properties.csi.properties.nodePublishSecretRef.properties.namespace": "네임 스페이스는 비밀 이름이 고유해야하는 공간을 정의합니다.",
    "%PersistentVolume.json.properties.spec.properties.csi.properties.nodeStageSecretRef": "SecretReference는 비밀 참조를 나타냅니다. 모든 네임 스페이스에서 비밀을 검색하기에 충분한 정보가 있습니다.",
    "%PersistentVolume.json.properties.spec.properties.csi.properties.nodeStageSecretRef.properties.name": "이름은 비밀 리소스를 참조하기 위해 네임 스페이스 내에서 고유합니다.",
    "%PersistentVolume.json.properties.spec.properties.csi.properties.nodeStageSecretRef.properties.namespace": "네임 스페이스는 비밀 이름이 고유해야하는 공간을 정의합니다.",
    "%PersistentVolume.json.properties.spec.properties.csi.properties.readOnly": "선택 사항 : ControllerPublishVolumeRequest에 전달할 값입니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%PersistentVolume.json.properties.spec.properties.csi.properties.volumeAttributes": "게시 할 볼륨의 속성입니다.",
    "%PersistentVolume.json.properties.spec.properties.csi.properties.volumeHandle": "VolumeHandle은 모든 후속 호출에서 볼륨을 참조하기 위해 CSI 볼륨 플러그인 셲 CreateVolume에서 반환하는 고유 한 볼륨 이름입니다. 필수입니다.",
    "%PersistentVolume.json.properties.spec.properties.fc": "파이버 채널 볼륨을 나타냅니다. 파이버 채널 볼륨은 읽기 / 쓰기로 한 번만 마운트 할 수 있습니다. 파이버 채널 볼륨은 소유권 관리 및 SELinux 레이블 재 지정을 지원합니다.",
    "%PersistentVolume.json.properties.spec.properties.fc.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%PersistentVolume.json.properties.spec.properties.fc.properties.lun": "선택 사항 : FC 대상 LUN 번호",
    "%PersistentVolume.json.properties.spec.properties.fc.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%PersistentVolume.json.properties.spec.properties.fc.properties.targetWWNs": "선택 사항 : FC 대상 월드 와이드 이름 (WWN)",
    "%PersistentVolume.json.properties.spec.properties.fc.properties.wwids": "선택 사항 : FC 볼륨 월드 와이드 식별자 (wwids) wwids 또는 targetWWN과 lun의 조합을 설정해야하지만 둘 다 동시에 설정할 수는 없습니다.",
    "%PersistentVolume.json.properties.spec.properties.flexVolume": "FlexPersistentVolumeSource는 exec 기반 플러그인을 사용하여 프로비저닝 / 연결된 일반 영구 볼륨 리소스를 나타냅니다.",
    "%PersistentVolume.json.properties.spec.properties.flexVolume.properties.driver": "Driver는이 볼륨에 사용할 드라이버의 이름입니다.",
    "%PersistentVolume.json.properties.spec.properties.flexVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본 파일 시스템은 FlexVolume 스크립트에 따라 다릅니다.",
    "%PersistentVolume.json.properties.spec.properties.flexVolume.properties.options": "옵션 : 추가 명령 옵션 (있는 경우).",
    "%PersistentVolume.json.properties.spec.properties.flexVolume.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%PersistentVolume.json.properties.spec.properties.flexVolume.properties.secretRef": "SecretReference는 비밀 참조를 나타냅니다. 모든 네임 스페이스에서 비밀을 검색하기에 충분한 정보가 있습니다.",
    "%PersistentVolume.json.properties.spec.properties.flexVolume.properties.secretRef.properties.name": "이름은 비밀 리소스를 참조하기 위해 네임 스페이스 내에서 고유합니다.",
    "%PersistentVolume.json.properties.spec.properties.flexVolume.properties.secretRef.properties.namespace": "네임 스페이스는 비밀 이름이 고유해야하는 공간을 정의합니다.",
    "%PersistentVolume.json.properties.spec.properties.flocker": "Flocker 에이전트에 의해 마운트 된 Flocker 볼륨을 나타냅니다. datasetName 및 datasetUUID 중 하나만 설정해야합니다. Flocker 볼륨은 소유권 관리 또는 SELinux 레이블 재 지정을 지원하지 않습니다.",
    "%PersistentVolume.json.properties.spec.properties.flocker.properties.datasetName": "메타 데이터로 저장된 데이터 세트의 이름-&gt; Flocker 용 데이터 세트의 이름은 더 이상 사용되지 않는 것으로 간주되어야합니다.",
    "%PersistentVolume.json.properties.spec.properties.flocker.properties.datasetUUID": "데이터 세트의 UUID입니다. 이것은 Flocker 데이터 세트의 고유 식별자입니다.",
    "%PersistentVolume.json.properties.spec.properties.gcePersistentDisk": "Google Compute Engine의 영구 디스크 리소스를 나타냅니다. 컨테이너에 장착하기 전에 GCE PD가 있어야합니다. 또한 디스크는 kubelet과 동일한 GCE 프로젝트 및 영역에 있어야합니다. GCE PD는 한 번만 읽기 / 쓰기로 마운트하거나 여러 번 읽기 전용으로 마운트 할 수 있습니다. GCE PD는 소유권 관리 및 SELinux 레이블 재 지정을 지원합니다.",
    "%PersistentVolume.json.properties.spec.properties.gcePersistentDisk.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%PersistentVolume.json.properties.spec.properties.gcePersistentDisk.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다). 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%PersistentVolume.json.properties.spec.properties.gcePersistentDisk.properties.pdName": "GCE에있는 PD 리소스의 고유 이름입니다. GCE에서 디스크를 식별하는 데 사용됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%PersistentVolume.json.properties.spec.properties.gcePersistentDisk.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%PersistentVolume.json.properties.spec.properties.glusterfs": "포드의 수명 동안 지속되는 Glusterfs 마운트를 나타냅니다. Glusterfs 볼륨은 소유권 관리 또는 SELinux 레이블 재 지정을 지원하지 않습니다.",
    "%PersistentVolume.json.properties.spec.properties.glusterfs.properties.endpoints": "EndpointsName은 Glusterfs 토폴로지를 자세히 설명하는 엔드 포인트 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%PersistentVolume.json.properties.spec.properties.glusterfs.properties.path": "Path는 Glusterfs 볼륨 경로입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%PersistentVolume.json.properties.spec.properties.glusterfs.properties.readOnly": "여기서 ReadOnly는 Glusterfs 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%PersistentVolume.json.properties.spec.properties.hostPath": "포드에 매핑 된 호스트 경로를 나타냅니다. 호스트 경로 볼륨은 소유권 관리 또는 SELinux 레이블 재 지정을 지원하지 않습니다.",
    "%PersistentVolume.json.properties.spec.properties.hostPath.properties.path": "호스트의 디렉토리 경로입니다. 경로가 심볼릭 링크이면 실제 경로에 대한 링크를 따릅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%PersistentVolume.json.properties.spec.properties.hostPath.properties.type": "HostPath 볼륨의 유형 기본값은 &quot;&quot;입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%PersistentVolume.json.properties.spec.properties.iscsi": "ISCSIPersistentVolumeSource는 ISCSI 디스크를 나타냅니다. ISCSI 볼륨은 읽기 / 쓰기로 한 번만 마운트 할 수 있습니다. ISCSI 볼륨은 소유권 관리 및 SELinux 레이블 재 지정을 지원합니다.",
    "%PersistentVolume.json.properties.spec.properties.iscsi.properties.chapAuthDiscovery": "iSCSI 검색 CHAP 인증 지원 여부",
    "%PersistentVolume.json.properties.spec.properties.iscsi.properties.chapAuthSession": "iSCSI 세션 CHAP 인증 지원 여부",
    "%PersistentVolume.json.properties.spec.properties.iscsi.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
    "%PersistentVolume.json.properties.spec.properties.iscsi.properties.initiatorName": "사용자 지정 iSCSI 이니시에이터 이름. initiatorName이 iscsiInterface와 동시에 지정되면 새로운 iSCSI 인터페이스<target portal> :<volume name> 연결을 위해 생성됩니다.",
    "%PersistentVolume.json.properties.spec.properties.iscsi.properties.iqn": "대상 iSCSI 정규화 이름.",
    "%PersistentVolume.json.properties.spec.properties.iscsi.properties.iscsiInterface": "iSCSI 전송을 사용하는 iSCSI 인터페이스 이름입니다. 기본값은 &#39;default&#39;(tcp)입니다.",
    "%PersistentVolume.json.properties.spec.properties.iscsi.properties.lun": "iSCSI 대상 LUN 번호.",
    "%PersistentVolume.json.properties.spec.properties.iscsi.properties.portals": "iSCSI 대상 포털 목록. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%PersistentVolume.json.properties.spec.properties.iscsi.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%PersistentVolume.json.properties.spec.properties.iscsi.properties.secretRef": "SecretReference는 비밀 참조를 나타냅니다. 모든 네임 스페이스에서 비밀을 검색하기에 충분한 정보가 있습니다.",
    "%PersistentVolume.json.properties.spec.properties.iscsi.properties.secretRef.properties.name": "이름은 비밀 리소스를 참조하기 위해 네임 스페이스 내에서 고유합니다.",
    "%PersistentVolume.json.properties.spec.properties.iscsi.properties.secretRef.properties.namespace": "네임 스페이스는 비밀 이름이 고유해야하는 공간을 정의합니다.",
    "%PersistentVolume.json.properties.spec.properties.iscsi.properties.targetPortal": "iSCSI 대상 포털. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%PersistentVolume.json.properties.spec.properties.local": "로컬은 노드 선호도가있는 직접 연결된 스토리지를 나타냅니다 (베타 기능).",
    "%PersistentVolume.json.properties.spec.properties.local.properties.path": "노드의 볼륨에 대한 전체 경로입니다. 디렉토리 또는 블록 장치 (디스크, 파티션, ...) 일 수 있습니다. 디렉토리는 VolumeMode = Filesystem 인 PersistentVolume으로 만 나타낼 수 있습니다. 블록 장치는 VolumeMode = Block으로 만 나타낼 수 있으며 BlockVolume 알파 기능 게이트를 활성화해야합니다.",
    "%PersistentVolume.json.properties.spec.properties.mountOptions": "마운트 옵션 목록 (예 : [ &quot;ro&quot;, &quot;soft&quot;]). 검증되지 않음-마운트가 유효하지 않으면 단순히 실패합니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options",
    "%PersistentVolume.json.properties.spec.properties.nfs": "포드의 수명 동안 지속되는 NFS 마운트를 나타냅니다. NFS 볼륨은 소유권 관리 또는 SELinux 레이블 재 지정을 지원하지 않습니다.",
    "%PersistentVolume.json.properties.spec.properties.nfs.properties.path": "NFS 서버에서 내 보낸 경로입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%PersistentVolume.json.properties.spec.properties.nfs.properties.readOnly": "여기서 ReadOnly는 읽기 전용 권한으로 NFS 내보내기를 강제로 마운트합니다. 기본값은 false입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%PersistentVolume.json.properties.spec.properties.nfs.properties.server": "Server는 NFS 서버의 호스트 이름 또는 IP 주소입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%PersistentVolume.json.properties.spec.properties.nodeAffinity": "VolumeNodeAffinity는이 볼륨에 액세스 할 수있는 노드를 제한하는 제약 조건을 정의합니다.",
    "%PersistentVolume.json.properties.spec.properties.nodeAffinity.properties.required": "노드 선택기는 노드 집합에 대한 하나 이상의 레이블 쿼리 결과의 통합을 나타냅니다. 즉, 노드 선택기 용어로 표시되는 선택기의 OR을 나타냅니다.",
    "%PersistentVolume.json.properties.spec.properties.nodeAffinity.properties.required.properties.nodeSelectorTerms": "필수입니다. 노드 선택기 용어 목록입니다. 용어는 OR로 연결됩니다.",
    "%PersistentVolume.json.properties.spec.properties.nodeAffinity.properties.required.properties.nodeSelectorTerms.items": "null 또는 빈 노드 선택기 용어는 개체와 일치하지 않습니다. 이들의 요구 사항은 AND입니다. TopologySelectorTerm 유형은 NodeSelectorTerm의 하위 집합을 구현합니다.",
    "%PersistentVolume.json.properties.spec.properties.nodeAffinity.properties.required.properties.nodeSelectorTerms.items.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%PersistentVolume.json.properties.spec.properties.nodeAffinity.properties.required.properties.nodeSelectorTerms.items.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%PersistentVolume.json.properties.spec.properties.nodeAffinity.properties.required.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%PersistentVolume.json.properties.spec.properties.nodeAffinity.properties.required.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%PersistentVolume.json.properties.spec.properties.nodeAffinity.properties.required.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%PersistentVolume.json.properties.spec.properties.nodeAffinity.properties.required.properties.nodeSelectorTerms.items.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%PersistentVolume.json.properties.spec.properties.nodeAffinity.properties.required.properties.nodeSelectorTerms.items.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%PersistentVolume.json.properties.spec.properties.nodeAffinity.properties.required.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%PersistentVolume.json.properties.spec.properties.nodeAffinity.properties.required.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%PersistentVolume.json.properties.spec.properties.nodeAffinity.properties.required.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%PersistentVolume.json.properties.spec.properties.persistentVolumeReclaimPolicy": "소유권 주장에서 해제 된 영구 볼륨은 어떻게 되나요? 유효한 옵션은 Retain (수동으로 생성 된 PersistentVolume의 기본값), Delete (동적으로 프로비저닝 된 PersistentVolume의 기본값) 및 Recycle (더 이상 사용되지 않음)입니다. 재활용은이 PersistentVolume의 기반이되는 볼륨 플러그인에서 지원되어야합니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming",
    "%PersistentVolume.json.properties.spec.properties.photonPersistentDisk": "Photon Controller 영구 디스크 리소스를 나타냅니다.",
    "%PersistentVolume.json.properties.spec.properties.photonPersistentDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%PersistentVolume.json.properties.spec.properties.photonPersistentDisk.properties.pdID": "Photon Controller 영구 디스크를 식별하는 ID",
    "%PersistentVolume.json.properties.spec.properties.portworxVolume": "PortworxVolumeSource는 Portworx 볼륨 리소스를 나타냅니다.",
    "%PersistentVolume.json.properties.spec.properties.portworxVolume.properties.fsType": "FSType은 마운트 할 파일 시스템 유형을 나타냅니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%PersistentVolume.json.properties.spec.properties.portworxVolume.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%PersistentVolume.json.properties.spec.properties.portworxVolume.properties.volumeID": "VolumeID는 Portworx 볼륨을 고유하게 식별합니다.",
    "%PersistentVolume.json.properties.spec.properties.quobyte": "포드의 수명 동안 지속되는 Quobyte 마운트를 나타냅니다. Quobyte 볼륨은 소유권 관리 또는 SELinux 레이블 재 지정을 지원하지 않습니다.",
    "%PersistentVolume.json.properties.spec.properties.quobyte.properties.group": "볼륨 액세스를 매핑 할 그룹 기본값은 그룹 없음입니다.",
    "%PersistentVolume.json.properties.spec.properties.quobyte.properties.readOnly": "여기서 ReadOnly는 Quobyte 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다.",
    "%PersistentVolume.json.properties.spec.properties.quobyte.properties.registry": "레지스트리는 볼륨의 중앙 레지스트리 역할을하는 호스트 : 포트 쌍 (여러 항목은 쉼표로 구분됨)으로 문자열로 지정된 단일 또는 다중 Quobyte Registry 서비스를 나타냅니다.",
    "%PersistentVolume.json.properties.spec.properties.quobyte.properties.user": "볼륨 액세스를 기본값에 매핑하는 사용자를 serivceaccount 사용자에게",
    "%PersistentVolume.json.properties.spec.properties.quobyte.properties.volume": "Volume은 이미 생성 된 Quobyte 볼륨을 이름으로 참조하는 문자열입니다.",
    "%PersistentVolume.json.properties.spec.properties.rbd": "포드의 수명 동안 지속되는 Rados 블록 장치 마운트를 나타냅니다. RBD 볼륨은 소유권 관리 및 SELinux 레이블 재 지정을 지원합니다.",
    "%PersistentVolume.json.properties.spec.properties.rbd.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#rbd",
    "%PersistentVolume.json.properties.spec.properties.rbd.properties.image": "라도 스 이미지 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%PersistentVolume.json.properties.spec.properties.rbd.properties.keyring": "키링은 RBDUser의 키링 경로입니다. 기본값은 / etc / ceph / keyring입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%PersistentVolume.json.properties.spec.properties.rbd.properties.monitors": "Ceph 모니터 모음. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%PersistentVolume.json.properties.spec.properties.rbd.properties.pool": "라도 스 풀 이름. 기본값은 rbd입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%PersistentVolume.json.properties.spec.properties.rbd.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%PersistentVolume.json.properties.spec.properties.rbd.properties.secretRef": "SecretReference는 비밀 참조를 나타냅니다. 모든 네임 스페이스에서 비밀을 검색하기에 충분한 정보가 있습니다.",
    "%PersistentVolume.json.properties.spec.properties.rbd.properties.secretRef.properties.name": "이름은 비밀 리소스를 참조하기 위해 네임 스페이스 내에서 고유합니다.",
    "%PersistentVolume.json.properties.spec.properties.rbd.properties.secretRef.properties.namespace": "네임 스페이스는 비밀 이름이 고유해야하는 공간을 정의합니다.",
    "%PersistentVolume.json.properties.spec.properties.rbd.properties.user": "rados 사용자 이름입니다. 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%PersistentVolume.json.properties.spec.properties.scaleIO": "ScaleIOPersistentVolumeSource는 영구 ScaleIO 볼륨을 나타냅니다.",
    "%PersistentVolume.json.properties.spec.properties.scaleIO.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%PersistentVolume.json.properties.spec.properties.scaleIO.properties.gateway": "ScaleIO API 게이트웨이의 호스트 주소입니다.",
    "%PersistentVolume.json.properties.spec.properties.scaleIO.properties.protectionDomain": "구성된 스토리지에 대한 ScaleIO 보호 도메인의 이름입니다.",
    "%PersistentVolume.json.properties.spec.properties.scaleIO.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%PersistentVolume.json.properties.spec.properties.scaleIO.properties.secretRef": "SecretReference는 비밀 참조를 나타냅니다. 모든 네임 스페이스에서 비밀을 검색하기에 충분한 정보가 있습니다.",
    "%PersistentVolume.json.properties.spec.properties.scaleIO.properties.secretRef.properties.name": "이름은 비밀 리소스를 참조하기 위해 네임 스페이스 내에서 고유합니다.",
    "%PersistentVolume.json.properties.spec.properties.scaleIO.properties.secretRef.properties.namespace": "네임 스페이스는 비밀 이름이 고유해야하는 공간을 정의합니다.",
    "%PersistentVolume.json.properties.spec.properties.scaleIO.properties.sslEnabled": "게이트웨이와의 SSL 통신을 활성화 / 비활성화하는 플래그, 기본값은 false",
    "%PersistentVolume.json.properties.spec.properties.scaleIO.properties.storageMode": "볼륨의 스토리지가 ThickProvisioned인지 ThinProvisioned인지 여부를 나타냅니다.",
    "%PersistentVolume.json.properties.spec.properties.scaleIO.properties.storagePool": "보호 도메인과 연결된 ScaleIO 스토리지 풀입니다.",
    "%PersistentVolume.json.properties.spec.properties.scaleIO.properties.system": "ScaleIO에 구성된 스토리지 시스템의 이름입니다.",
    "%PersistentVolume.json.properties.spec.properties.scaleIO.properties.volumeName": "이 볼륨 소스와 연결된 ScaleIO 시스템에 이미 생성 된 볼륨의 이름입니다.",
    "%PersistentVolume.json.properties.spec.properties.storageClassName": "이 영구 볼륨이 속한 StorageClass의 이름입니다. 비어있는 값은이 볼륨이 어떤 StorageClass에도 속하지 않음을 의미합니다.",
    "%PersistentVolume.json.properties.spec.properties.storageos": "StorageOS 영구 볼륨 리소스를 나타냅니다.",
    "%PersistentVolume.json.properties.spec.properties.storageos.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%PersistentVolume.json.properties.spec.properties.storageos.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%PersistentVolume.json.properties.spec.properties.storageos.properties.secretRef": "ObjectReference에는 참조 된 객체를 검사하거나 수정할 수있는 충분한 정보가 포함되어 있습니다.",
    "%PersistentVolume.json.properties.spec.properties.storageos.properties.secretRef.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%PersistentVolume.json.properties.spec.properties.storageos.properties.secretRef.properties.fieldPath": "전체 개체 대신 개체의 일부를 참조하는 경우이 문자열에는 desiredState.manifest.containers [2]와 같은 유효한 JSON / Go 필드 액세스 문이 포함되어야합니다. 예를 들어, 객체 참조가 포드 내의 컨테이너에 대한 경우 &quot;spec.containers {name}&quot;( &quot;name&quot;은 이벤트를 트리거 한 컨테이너의 이름을 나타냄)와 같은 값을 취합니다. &quot;spec.containers [2]&quot;(이 포드에 인덱스 2가있는 컨테이너)가 지정된 컨테이너 이름이 없습니다. 이 구문은 객체의 일부를 참조하는 잘 정의 된 방법을 갖도록 선택되었습니다.",
    "%PersistentVolume.json.properties.spec.properties.storageos.properties.secretRef.properties.kind": "지시 대상의 종류. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
    "%PersistentVolume.json.properties.spec.properties.storageos.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%PersistentVolume.json.properties.spec.properties.storageos.properties.secretRef.properties.namespace": "리퍼 런트의 네임 스페이스입니다. 자세한 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
    "%PersistentVolume.json.properties.spec.properties.storageos.properties.secretRef.properties.resourceVersion": "이 참조가 작성된 특정 resourceVersion입니다 (있는 경우). 더 많은 정보 : https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
    "%PersistentVolume.json.properties.spec.properties.storageos.properties.secretRef.properties.uid": "리퍼 런트의 UID. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
    "%PersistentVolume.json.properties.spec.properties.storageos.properties.volumeName": "VolumeName은 사람이 읽을 수있는 StorageOS 볼륨의 이름입니다. 볼륨 이름은 네임 스페이스 내에서만 고유합니다.",
    "%PersistentVolume.json.properties.spec.properties.storageos.properties.volumeNamespace": "VolumeNamespace는 StorageOS 내의 볼륨 범위를 지정합니다. 네임 스페이스를 지정하지 않으면 Pod의 네임 스페이스가 사용됩니다. 이를 통해보다 긴밀한 통합을 위해 Kubernetes 이름 범위를 StorageOS 내에서 미러링 할 수 있습니다. 기본 동작을 재정의하려면 VolumeName을 임의의 이름으로 설정합니다. StorageOS 내에서 네임 스페이스를 사용하지 않는 경우 &quot;default&quot;로 설정하십시오. StorageOS 내에 존재하지 않는 네임 스페이스가 생성됩니다.",
    "%PersistentVolume.json.properties.spec.properties.volumeMode": "volumeMode는 볼륨이 포맷 된 파일 시스템과 함께 사용될 것인지 또는 원시 블록 상태로 유지 될 것인지를 정의합니다. 사양에 포함되지 않은 경우 파일 시스템의 값이 암시됩니다. 이것은 알파 기능이며 향후 변경 될 수 있습니다.",
    "%PersistentVolume.json.properties.spec.properties.vsphereVolume": "vSphere 볼륨 리소스를 나타냅니다.",
    "%PersistentVolume.json.properties.spec.properties.vsphereVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%PersistentVolume.json.properties.spec.properties.vsphereVolume.properties.storagePolicyID": "StoragePolicyName과 연결된 SPBM (스토리지 정책 기반 관리) 프로필 ID입니다.",
    "%PersistentVolume.json.properties.spec.properties.vsphereVolume.properties.storagePolicyName": "SPBM (스토리지 정책 기반 관리) 프로필 이름입니다.",
    "%PersistentVolume.json.properties.spec.properties.vsphereVolume.properties.volumePath": "vSphere 볼륨 vmdk를 식별하는 경로",
    "%PersistentVolume.json.properties.status": "PersistentVolumeStatus는 영구 볼륨의 현재 상태입니다.",
    "%PersistentVolume.json.properties.status.properties.message": "볼륨이이 상태에있는 이유에 대한 세부 사항을 나타내는 사람이 읽을 수있는 메시지입니다.",
    "%PersistentVolume.json.properties.status.properties.phase": "단계는 볼륨이 사용 가능한지, 청구에 바인딩되었는지 또는 청구에 의해 해제되었는지를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase",
    "%PersistentVolume.json.properties.status.properties.reason": "Reason은 실패를 설명하는 간단한 CamelCase 문자열이며 CLI에서 시스템 구문 분석 및 깔끔한 표시를 의미합니다.",
    "%DaemonSet.json": "DaemonSet은 데몬 집합의 구성을 나타냅니다.",
    "%DaemonSet.json.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%DaemonSet.json.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%DaemonSet.json.properties.metadata": "표준 개체의 메타 데이터. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    "%DaemonSet.json.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%DaemonSet.json.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%DaemonSet.json.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%DaemonSet.json.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%DaemonSet.json.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%DaemonSet.json.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%DaemonSet.json.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%DaemonSet.json.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%DaemonSet.json.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%DaemonSet.json.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%DaemonSet.json.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%DaemonSet.json.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%DaemonSet.json.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%DaemonSet.json.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%DaemonSet.json.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%DaemonSet.json.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%DaemonSet.json.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%DaemonSet.json.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%DaemonSet.json.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%DaemonSet.json.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%DaemonSet.json.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%DaemonSet.json.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%DaemonSet.json.properties.spec": "이 데몬 세트의 원하는 동작입니다. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%DaemonSet.json.properties.spec.properties.minReadySeconds": "새로 생성 된 DaemonSet 포드가 사용 가능한 것으로 간주되기 위해 컨테이너 충돌없이 준비되어야하는 최소 시간 (초)입니다. 기본값은 0입니다 (포드는 준비되는 즉시 사용 가능한 것으로 간주 됨).",
    "%DaemonSet.json.properties.spec.properties.revisionHistoryLimit": "롤백을 허용하기 위해 보유 할 이전 기록의 수입니다. 명시 적 0과 지정되지 않음을 구별하기위한 포인터입니다. 기본값은 10입니다.",
    "%DaemonSet.json.properties.spec.properties.selector": "데몬 세트에서 관리하는 포드에 대한 레이블 쿼리입니다. 제어하려면 일치해야합니다. 포드 템플릿의 레이블과 일치해야합니다. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
    "%DaemonSet.json.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%DaemonSet.json.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%DaemonSet.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%DaemonSet.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%DaemonSet.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%DaemonSet.json.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%DaemonSet.json.properties.spec.properties.template": "생성 될 포드를 설명하는 객체입니다. DaemonSet은 템플릿의 노드 선택기와 일치하는 모든 노드 (또는 노드 선택기가 지정되지 않은 경우 모든 노드)에서이 포드의 복사본을 정확히 하나 만듭니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata": "표준 개체의 메타 데이터. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec": "pod의 원하는 동작에 대한 사양입니다. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.activeDeadlineSeconds": "시스템이 실패로 표시하고 연관된 컨테이너를 강제 종료하기 전에 팟 (Pod)이 StartTime에 상대적으로 노드에서 활성화 될 수있는 선택적 기간 (초)입니다. 값은 양의 정수 여야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity": "지정된 경우 포드의 예약 제약",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity": "포드에 대한 노드 선호도 예약 규칙을 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 노드가 대응하는 matchExpressions와 일치하면 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "빈 선호 스케줄링 용어는 암시 적 가중치가 0 인 모든 개체와 일치합니다 (즉, 작동하지 않음). null 선호 스케줄링 용어는 객체와 일치하지 않습니다 (즉, 작동하지 않음).",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference": "해당 가중치와 관련된 노드 선택기 용어입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 nodeSelectorTerm 일치와 관련된 가중치입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms": "필수입니다. 노드 선택기 용어 목록입니다. 용어는 OR로 연결됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items": "null 또는 빈 노드 선택기 용어는 개체와 일치하지 않습니다. 이들의 요구 사항은 AND입니다. TopologySelectorTerm 유형은 NodeSelectorTerm의 하위 집합을 구현합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity": "포드 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 배치).",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 및 노드가 대응하는 podAffinityTerm과 일치하는 포드를 갖는 경우 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity": "포드 반 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 두지 않음).",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 반친 화성 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치의 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 반친 화성 표현식 등)을 충족하는 각 노드에 대해 다음 요소를 반복하여 합계를 계산합니다. 이 필드와 노드에 해당 podAffinityTerm과 일치하는 포드가있는 경우 합계에 &quot;weight&quot;를 추가합니다. 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 반친 화성 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 반친 화성 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않는 경우 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.automountServiceAccountToken": "AutomountServiceAccountToken은 서비스 계정 토큰을 자동으로 마운트해야하는지 여부를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers": "포드에 속한 컨테이너 목록입니다. 현재 컨테이너를 추가하거나 제거 할 수 없습니다. 포드에는 컨테이너가 하나 이상 있어야합니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업보다 데이터를로드하거나 캐시를 워밍하는 데 오랜 시간이 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig": "포드의 DNS 매개 변수를 지정합니다. 여기에 지정된 매개 변수는 DNSPolicy를 기반으로 생성 된 DNS 구성에 병합됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.nameservers": "DNS 이름 서버 IP 주소 목록입니다. 이는 DNSPolicy에서 생성 된 기본 네임 서버에 추가됩니다. 중복 된 네임 서버는 제거됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options": "DNS 확인자 옵션 목록입니다. 이것은 DNSPolicy에서 생성 된 기본 옵션과 병합됩니다. 중복 된 항목은 제거됩니다. 옵션에 제공된 해결 옵션은 기본 DNSPolicy에 표시되는 옵션보다 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options.items": "PodDNSConfigOption은 포드의 DNS 확인자 옵션을 정의합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options.items.properties.name": "필수입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.searches": "호스트 이름 조회를위한 DNS 검색 도메인 목록입니다. 이는 DNSPolicy에서 생성 된 기본 검색 경로에 추가됩니다. 중복 된 검색 경로는 제거됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.dnsPolicy": "포드에 대한 DNS 정책을 설정합니다. 기본값은 &quot;ClusterFirst&quot;입니다. 유효한 값은 &#39;ClusterFirstWithHostNet&#39;, &#39;ClusterFirst&#39;, &#39;Default&#39;또는 &#39;None&#39;입니다. DNSConfig에 제공된 DNS 매개 변수는 DNSPolicy로 선택한 정책과 병합됩니다. hostNetwork와 함께 DNS 옵션을 설정하려면 DNS 정책을 명시 적으로 &#39;ClusterFirstWithHostNet&#39;으로 지정해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.enableServiceLinks": "EnableServiceLinks는 서비스에 대한 정보를 Docker 링크의 구문과 일치하는 포드의 환경 변수에 삽입해야하는지 여부를 나타냅니다. 선택 사항 : 기본값은 true입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers": "이 포드에서 실행되는 임시 컨테이너 목록입니다. 임시 컨테이너는 디버깅과 같은 사용자 시작 작업을 수행하기 위해 기존 포드에서 실행될 수 있습니다. 이 목록은 포드를 만들 때 지정할 수 없으며 포드 사양을 업데이트하여 수정할 수 없습니다. 기존 포드에 임시 컨테이너를 추가하려면 포드의 ephemeralcontainers 하위 리소스를 사용합니다. 이 필드는 알파 수준이며 EphemeralContainers 기능을 활성화하는 서버에서만 적용됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items": "EphemeralContainer는 디버깅과 같이 사용자가 시작한 활동을 위해 기존 포드에 임시로 추가 할 수있는 컨테이너입니다. 임시 컨테이너에는 리소스 또는 예약 보장이 없으며 종료시 또는 포드가 제거되거나 다시 시작될 때 다시 시작되지 않습니다. 임시 컨테이너로 인해 포드가 리소스 할당을 초과하는 경우 포드가 제거 될 수 있습니다. 포드 사양을 직접 업데이트하여 임시 컨테이너를 추가 할 수 없습니다. 포드의 ephemeralcontainers 하위 리소스를 통해 추가해야하며 추가되면 포드 사양에 나타납니다. 이것은 EphemeralContainers 기능 플래그로 활성화 된 알파 기능입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle": "임시 컨테이너에는 수명주기가 허용되지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.name": "DNS_LABEL로 지정된 임시 컨테이너의 이름입니다. 이 이름은 모든 컨테이너, 초기화 컨테이너 및 임시 컨테이너간에 고유해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports": "임시 컨테이너에는 포트가 허용되지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources": "임시 컨테이너에는 리소스가 허용되지 않습니다. 임시 컨테이너는 포드에 이미 할당 된 예비 리소스를 사용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext": "임시 컨테이너에는 SecurityContext가 허용되지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.targetContainerName": "설정된 경우이 임시 컨테이너가 대상으로하는 PodSpec의 컨테이너 이름입니다. 임시 컨테이너는이 컨테이너의 네임 스페이스 (IPC, PID 등)에서 실행됩니다. 설정되지 않은 경우 팟 (Pod)에 대해 공유되는 네임 스페이스에서 임시 컨테이너가 실행됩니다. 컨테이너 런타임은이 기능을 지원해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.hostAliases": "HostAliases는 지정된 경우 포드의 호스트 파일에 삽입 될 호스트 및 IP의 선택적 목록입니다. 이는 hostNetwork가 아닌 포드에만 유효합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.hostAliases.items": "HostAlias는 포드의 호스트 파일에 항목으로 삽입 될 IP와 호스트 이름 간의 매핑을 보유합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.hostAliases.items.properties.hostnames": "위 IP 주소의 호스트 이름입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.hostAliases.items.properties.ip": "호스트 파일 항목의 IP 주소입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.hostIPC": "호스트의 ipc 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.hostNetwork": "이 포드에 대해 요청 된 호스트 네트워킹입니다. 호스트의 네트워크 네임 스페이스를 사용합니다. 이 옵션을 설정하면 사용할 포트를 지정해야합니다. 기본값은 false입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.hostPID": "호스트의 pid 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.hostname": "포드의 호스트 이름을 지정합니다. 지정하지 않으면 포드의 호스트 이름이 시스템 정의 값으로 설정됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.imagePullSecrets": "ImagePullSecrets는이 PodSpec에서 사용하는 이미지를 가져 오는 데 사용할 동일한 네임 스페이스의 보안 비밀에 대한 선택적 참조 목록입니다. 지정된 경우 이러한 비밀은 사용할 개별 풀러 구현에 전달됩니다. 예를 들어 docker의 경우 DockerConfig 유형 비밀 만 적용됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.imagePullSecrets.items": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.imagePullSecrets.items.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers": "포드에 속한 초기화 컨테이너 목록입니다. Init 컨테이너는 컨테이너가 시작되기 전에 순서대로 실행됩니다. 초기화 컨테이너가 실패하면 포드는 실패한 것으로 간주되며 restartPolicy에 따라 처리됩니다. 초기화 컨테이너 또는 일반 컨테이너의 이름은 모든 컨테이너에서 고유해야합니다. Init 컨테이너에는 수명주기 작업, 준비 상태 프로브, 활성 상태 프로브 또는 시작 프로브가 없을 수 있습니다. init 컨테이너의 resourceRequirements는 각 리소스 유형에 대해 가장 높은 요청 / 한계를 찾은 다음 해당 값의 최대 값 또는 일반 컨테이너의 합계를 사용하여 스케줄링 중에 고려됩니다. 제한은 비슷한 방식으로 초기화 컨테이너에 적용됩니다. Init 컨테이너는 현재 추가하거나 제거 할 수 없습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업보다 데이터를로드하거나 캐시를 워밍하는 데 오랜 시간이 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.nodeName": "NodeName은이 포드를 특정 노드에 예약하기위한 요청입니다. 비어 있지 않은 경우 스케줄러는 리소스 요구 사항에 적합하다고 가정하여이 포드를 해당 노드에 예약합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.nodeSelector": "NodeSelector는 포드가 노드에 맞도록 true 여야하는 선택기입니다. 포드가 해당 노드에서 예약되도록하려면 노드의 라벨과 일치해야하는 선택기입니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.overhead": "오버 헤드는 주어진 RuntimeClass에 대한 포드 실행과 관련된 리소스 오버 헤드를 나타냅니다. 이 필드는 RuntimeClass 승인 컨트롤러에 의해 승인 시간에 자동으로 채워집니다. RuntimeClass 승인 컨트롤러가 사용 설정된 경우 Pod 생성 요청에 오버 헤드를 설정하면 안됩니다. RuntimeClass 승인 컨트롤러는 오버 헤드가 이미 설정된 포드 생성 요청을 거부합니다. RuntimeClass가 PodSpec에서 구성되고 선택되면 오버 헤드는 해당 RuntimeClass에 정의 된 값으로 설정됩니다. 그렇지 않으면 설정되지 않은 상태로 유지되고 0으로 처리됩니다. 추가 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/688-pod-overhead/README.md이 필드는 Kubernetes v1.16부터 알파 수준이며 PodOverhead 기능을 활성화하는 서버에서 인정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.preemptionPolicy": "PreemptionPolicy는 우선 순위가 낮은 포드를 선점하기위한 정책입니다. Never 중 하나, PreemptLowerPriority. 설정되지 않은 경우 기본값은 PreemptLowerPriority입니다. 이 필드는 베타 수준이며 NonPreemptingPriority 기능 게이트에 의해 제어됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.priority": "우선 순위 값입니다. 다양한 시스템 구성 요소가이 필드를 사용하여 포드의 우선 순위를 찾습니다. Priority Admission Controller가 활성화되면 사용자가이 필드를 설정할 수 없습니다. 승인 컨트롤러는 PriorityClassName에서이 필드를 채 웁니다. 값이 높을수록 우선 순위가 높아집니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.priorityClassName": "지정된 경우 포드의 우선 순위를 나타냅니다. &quot;system-node-critical&quot;및 &quot;system-cluster-critical&quot;은 가장 높은 우선 순위를 나타내는 두 개의 특수 키워드이며 전자가 가장 높은 우선 순위입니다. 다른 이름은 해당 이름으로 PriorityClass 개체를 만들어 정의해야합니다. 지정되지 않은 경우 포드 우선 순위는 기본값이되거나 기본값이없는 경우 0이됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.readinessGates": "지정된 경우 모든 준비 게이트에서 포드 준비 상태를 평가합니다. 모든 컨테이너가 준비되고 준비 게이트에 지정된 모든 조건의 상태가 &quot;True&quot;이면 포드가 준비된 것입니다. 자세한 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/ 580-pod-readiness-gates / README.md",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.readinessGates.items": "PodReadinessGate에는 포드 조건에 대한 참조가 포함됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.readinessGates.items.properties.conditionType": "ConditionType은 유형이 일치하는 pod의 조건 목록에있는 조건을 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.restartPolicy": "포드 내의 모든 컨테이너에 대한 정책을 다시 시작합니다. Always, OnFailure, Never 중 하나입니다. 기본값은 항상입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.runtimeClassName": "RuntimeClassName은 node.k8s.io 그룹의 RuntimeClass 객체를 참조하며이 pod를 실행하는 데 사용해야합니다. RuntimeClass 리소스가 명명 된 클래스와 일치하지 않으면 포드가 실행되지 않습니다. 설정되지 않거나 비어있는 경우 기본 런타임 핸들러를 사용하는 비어있는 정의가있는 암시 적 클래스 인 &quot;레거시&quot;RuntimeClass가 사용됩니다. 추가 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/585-runtime-class/README.md 이것은 Kubernetes v1.14의 베타 기능입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.schedulerName": "지정된 경우 지정된 스케줄러가 포드를 발송합니다. 지정하지 않으면 포드가 기본 스케줄러에 의해 발송됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext": "SecurityContext는 포드 수준 보안 속성 및 공통 컨테이너 설정을 보유합니다. 옵션 : 기본값은 비어 있습니다. 각 필드의 기본값은 유형 설명을 참조하십시오.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.fsGroup": "포드의 모든 컨테이너에 적용되는 특수 보조 그룹입니다. 일부 볼륨 유형을 사용하면 Kubelet이 포드가 소유 할 해당 볼륨의 소유권을 변경할 수 있습니다. 1. 소유 GID는 FSGroup이됩니다. 2. setgid 비트가 설정됩니다 (볼륨에 생성 된 새 파일은 FSGroup이 소유 함) 3 권한 비트는 rw-rw ----와 OR로 연결됩니다. 설정되지 않은 경우 Kubelet은 볼륨의 소유권 및 권한을 수정하지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.fsGroupChangePolicy": "fsGroupChangePolicy는 Pod 내부에 노출되기 전에 볼륨의 소유권 및 권한을 변경하는 동작을 정의합니다. 이 필드는 fsGroup 기반 소유권 (및 권한)을 지원하는 볼륨 유형에만 적용됩니다. secret, configmaps 및 emptydir과 같은 임시 볼륨 유형에는 영향을 미치지 않습니다. 유효한 값은 &quot;OnRootMismatch&quot;및 &quot;Always&quot;입니다. 지정하지 않으면 기본값은 &quot;항상&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions": "모든 컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile": "이 포드의 컨테이너에서 사용할 seccomp 옵션입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.supplementalGroups": "컨테이너의 기본 GID와 함께 각 컨테이너에서 실행되는 첫 번째 프로세스에 적용된 그룹 목록입니다. 지정하지 않으면 컨테이너에 그룹이 추가되지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls": "Sysctls에는 포드에 사용되는 네임 스페이스가 지정된 sysctls 목록이 있습니다. 컨테이너 런타임에 의해 지원되지 않는 sysctls가있는 포드가 시작되지 않을 수 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items": "Sysctl은 설정할 커널 매개 변수를 정의합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items.properties.name": "설정할 속성의 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items.properties.value": "설정할 속성 값",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 컨테이너의 SecurityContext 내의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.serviceAccountName": "ServiceAccountName은이 포드를 실행하는 데 사용할 ServiceAccount의 이름입니다. 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.setHostnameAsFQDN": "true이면 포드의 호스트 이름이 리프 이름 (기본값)이 아닌 포드의 FQDN으로 구성됩니다. Linux 컨테이너에서 이는 커널의 hostname 필드 (struct utsname의 nodename 필드)에 FQDN을 설정하는 것을 의미합니다. Windows 컨테이너에서 이는 레지스트리 키 HKEY_LOCAL_MACHINE \\ SYSTEM \\ CurrentControlSet \\ Services \\ Tcpip \\ Parameters에 대한 호스트 이름의 레지스트리 값을 FQDN으로 설정하는 것을 의미합니다. 포드에 FQDN이 없으면 아무 효과가 없습니다. 기본값은 false입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.shareProcessNamespace": "pod의 모든 컨테이너간에 단일 프로세스 네임 스페이스를 공유합니다. 이것이 설정되면 컨테이너는 동일한 포드의 다른 컨테이너에서 프로세스를보고 신호를 보낼 수 있으며 각 컨테이너의 첫 번째 프로세스에는 PID 1이 할당되지 않습니다. HostPID와 ShareProcessNamespace를 둘 다 설정할 수는 없습니다. 선택 사항 : 기본값은 false입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.subdomain": "지정된 경우 정규화 된 포드 호스트 이름은 &quot;<hostname> .<subdomain> .<pod namespace> .svc.<cluster domain> &quot;. 지정하지 않으면 포드에 도메인 이름이 전혀 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.terminationGracePeriodSeconds": "포드가 정상적으로 종료되어야하는 선택적 기간 (초)입니다. 삭제 요청시 감소 될 수 있습니다. 값은 음이 아닌 정수 여야합니다. 값 0은 즉시 삭제를 나타냅니다. 이 값이 nil이면 기본 유예 기간이 대신 사용됩니다. 유예 기간은 포드에서 실행중인 프로세스가 종료 신호를 보낸 후의 기간 (초)과 프로세스가 강제 종료 신호로 중단되는 시간입니다. 이 값을 프로세스의 예상 정리 시간보다 길게 설정하십시오. 기본값은 30 초입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.tolerations": "지정된 경우 포드의 허용 오차입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items": "이 Toleration이 연결된 포드는 트리플과 일치하는 모든 오염을 견뎌냅니다.<key,value,effect> 일치 연산자 사용<operator> .",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.effect": "효과는 일치시킬 오염 효과를 나타냅니다. 비어 있음은 모든 오염 효과와 일치 함을 의미합니다. 지정된 경우 허용되는 값은 NoSchedule, PreferNoSchedule 및 NoExecute입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.key": "키는 관용이 적용되는 오염 키입니다. 비어 있음은 모든 오염 키와 일치 함을 의미합니다. 키가 비어 있으면 연산자가 존재해야합니다. 이 조합은 모든 값과 모든 키와 일치 함을 의미합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.operator": "연산자는 값에 대한 키의 관계를 나타냅니다. 유효한 연산자는 Exists 및 Equal입니다. 기본값은 Equal입니다. Exists는 값에 대한 와일드 카드와 동일하므로 포드가 특정 카테고리의 모든 taint를 허용 할 수 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.tolerationSeconds": "TolerationSeconds는 허용 범위 (NoExecute가 유효해야하며 그렇지 않으면이 필드는 무시 됨)가 taint를 허용하는 기간을 나타냅니다. 기본적으로 설정되어 있지 않으므로 오염을 영원히 견딜 수 있습니다 (제거하지 마십시오). 0 및 음수 값은 시스템에서 0 (즉시 제거)으로 처리됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.value": "Value는 허용치가 일치하는 오염 값입니다. 연산자가 Exists이면 값은 비어 있어야하고 그렇지 않으면 일반 문자열이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints": "TopologySpreadConstraints는 pod 그룹이 토폴로지 도메인에 어떻게 분산되어야하는지 설명합니다. 스케줄러는 제약 조건을 준수하는 방식으로 포드를 예약합니다. 모든 topologySpreadConstraint는 AND 처리됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items": "TopologySpreadConstraint는 지정된 토폴로지간에 일치하는 포드를 분산하는 방법을 지정합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector": "LabelSelector는 일치하는 포드를 찾는 데 사용됩니다. 이 라벨 선택기와 일치하는 포드는 해당 토폴로지 도메인의 포드 수를 결정하기 위해 계산됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.maxSkew": "MaxSkew는 포드가 고르지 않게 분산 될 수있는 정도를 설명합니다. `whenUnsatisfiable = DoNotSchedule` 인 경우 대상 토폴로지에서 일치하는 포드 수와 전역 최소값간에 허용되는 최대 차이입니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 1/1/0으로 확산되는 포드 : | zone1 | zone2 | zone3 | | P | P | | -MaxSkew가 1이면 들어오는 포드는 zone3에 1/1/1이되도록 예약 할 수 있습니다. zone1 (zone2)로 예약하면 zone1 (zone2)의 ActualSkew (2-0)가 MaxSkew (1)을 위반하게됩니다. -MaxSkew가 2이면 들어오는 포드를 모든 영역에 예약 할 수 있습니다. `whenUnsatisfiable = ScheduleAnyway` 인 경우이를 충족하는 토폴로지에 더 높은 우선 순위를 부여하는 데 사용됩니다. 필수 필드입니다. 기본값은 1이고 0은 허용되지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.topologyKey": "TopologyKey는 노드 레이블의 키입니다. 이 키와 동일한 값이있는 레이블이있는 노드는 동일한 토폴로지에있는 것으로 간주됩니다. 우리는 각각을 고려합니다<key, value> &quot;버킷&quot;으로 각 버킷에 균형 잡힌 수의 포드를 넣으십시오. 필수 필드입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.whenUnsatisfiable": "WhenUnsatisfiable은 스프레드 제약 조건을 충족하지 않는 경우 포드를 처리하는 방법을 나타냅니다. -DoNotSchedule (기본값)은 스케줄러가 스케줄하지 않도록 지시합니다. -ScheduleAnyway는 스케줄러에게 임의의 위치에서 포드를 예약하도록 지시하지만, 왜곡을 줄이는 데 도움이되는 토폴로지에 더 높은 우선 순위를 부여합니다. 해당 포드에 대해 가능한 모든 노드 할당이 일부 토폴로지에서 &quot;MaxSkew&quot;를 위반하는 경우에만 수신 포드에 대한 제약 조건이 &quot;불만족&quot;으로 간주됩니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 3/1/1로 확산되는 포드 : | zone1 | zone2 | zone3 | | PPP | P | P | WhenUnsatisfiable이 DoNotSchedule로 설정된 경우 들어오는 pod는 zone2 (zone3)의 ActualSkew (2-1)가 MaxSkew (1)를 충족하므로 zone2 (zone3) 만 3/2/1 (3/1/2)가되도록 예약 할 수 있습니다. 즉, 클러스터는 여전히 불균형 상태 일 수 있지만 스케줄러는 * 더 * 불균형 상태로 만들지 않습니다. 필수 필드입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes": "포드에 속한 컨테이너로 마운트 할 수있는 볼륨 목록입니다. 자세한 정보 : https://kubernetes.io/docs/concepts/storage/volumes",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items": "볼륨은 포드의 모든 컨테이너에서 액세스 할 수있는 포드의 명명 된 볼륨을 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore": "AWSElasticBlockStore는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 AWS 디스크 리소스를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다).",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.readOnly": "VolumeMounts의 ReadOnly 속성을 &quot;true&quot;로 강제 설정하려면 &quot;true&quot;를 지정합니다. 생략하면 기본값은 &quot;false&quot;입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.volumeID": "AWS에있는 영구 디스크 리소스의 고유 ID (Amazon EBS 볼륨). 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk": "AzureDisk는 호스트의 Azure 데이터 디스크 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.cachingMode": "호스트 캐싱 모드 : 없음, 읽기 전용, 읽기 쓰기.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskName": "Blob 저장소에있는 데이터 디스크의 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskURI": "Blob 저장소의 데이터 디스크 URI",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.kind": "예상 값 공유 : 스토리지 계정 당 여러 Blob 디스크 전용 : 스토리지 계정 당 단일 Blob 디스크 관리 : Azure 관리 데이터 디스크 (관리되는 가용성 집합에서만). 기본적으로 공유 됨",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile": "AzureFile은 호스트의 Azure 파일 서비스 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.secretName": "Azure Storage 계정 이름 및 키가 포함 된 비밀의 이름",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.shareName": "이름 공유",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs": "CephFS는 포드의 수명을 공유하는 호스트의 Ceph FS 마운트를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.monitors": "필수 : Monitors는 Ceph 모니터 모음입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.path": "선택 사항 : 전체 Ceph 트리가 아닌 마운트 된 루트로 사용되며 기본값은 /입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretFile": "선택 사항 : SecretFile은 사용자의 키 링 경로이며 기본값은 /etc/ceph/user.secret입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.user": "선택 사항 : 사용자는 rados 사용자 이름, 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder": "Cinder는 kubelets 호스트 머신에 연결되고 마운트 된 cinder 볼륨을 나타냅니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.volumeID": "cinder에서 볼륨을 식별하는 데 사용되는 볼륨 ID입니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap": "ConfigMap은이 볼륨을 채워야하는 configMap을 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi": "CSI (Container Storage Interface)는 특정 외부 CSI 드라이버 (베타 기능)에서 처리하는 임시 저장소를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.driver": "Driver는이 볼륨을 처리하는 CSI 드라이버의 이름입니다. 클러스터에 등록 된 올바른 이름은 관리자에게 문의하십시오.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.fsType": "마운트 할 파일 시스템 유형입니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 제공되지 않으면 적용 할 기본 파일 시스템을 결정하는 관련 CSI 드라이버에 빈 값이 전달됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.volumeAttributes": "VolumeAttributes는 CSI 드라이버에 전달되는 드라이버 별 속성을 저장합니다. 지원되는 값은 드라이버 설명서를 참조하십시오.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI": "DownwardAPI는이 볼륨을 채워야하는 포드에 대한 하향 API를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 사용할 모드 비트. 선택 사항이어야합니다. 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items": "항목은 하향 API 볼륨 파일 목록입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트는 0000과 0777 사이의 8 진수 값이거나 0과 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir": "EmptyDir는 포드의 수명을 공유하는 임시 디렉터리를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir.properties.medium": "이 디렉토리를 백업해야하는 저장 매체 유형입니다. 기본값은 노드의 기본 매체를 사용함을 의미하는 &quot;&quot;입니다. 빈 문자열 (기본값) 또는 메모리 여야합니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir.properties.sizeLimit": "이 EmptyDir 볼륨에 필요한 총 로컬 스토리지 양입니다. 크기 제한은 메모리 매체에도 적용됩니다. 메모리 매체 EmptyDir의 최대 사용량은 여기에 지정된 SizeLimit와 포드에있는 모든 컨테이너의 메모리 제한 합계 사이의 최소값입니다. 기본값은 제한이 정의되지 않았 음을 의미하는 nil입니다. 추가 정보 : http://kubernetes.io/docs/user-guide/volumes#emptydir",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral": "Ephemeral은 클러스터 스토리지 드라이버 (알파 기능)에서 처리하는 볼륨을 나타냅니다. 볼륨의 수명주기는 볼륨을 정의하는 포드에 연결되어 있습니다. 볼륨은 포드가 시작되기 전에 생성되고 포드가 제거되면 삭제됩니다. a) 포드가 실행되는 동안에 만 볼륨이 필요한 경우, b) 스냅 샷에서 복원 또는 용량 추적과 같은 일반 볼륨의 기능이 필요한 경우, c) 스토리지 클래스를 통해 스토리지 드라이버가 지정된 경우, d) 스토리지 드라이버 PersistentVolumeClaim을 통한 동적 볼륨 프로비저닝을 지원합니다 (이 볼륨 유형과 PersistentVolumeClaim 간의 연결에 대한 자세한 내용은 EphemeralVolumeSource 참조). 개별 포드의 수명주기보다 오래 지속되는 볼륨에 대해 PersistentVolumeClaim 또는 공급 업체별 API 중 하나를 사용합니다. CSI 드라이버가 그런 방식으로 사용되는 경우 경량 로컬 임시 볼륨에 CSI를 사용하십시오. 자세한 내용은 드라이버 설명서를 참조하십시오. 포드는 두 유형의 임시 볼륨과 영구 볼륨을 동시에 사용할 수 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate": "볼륨을 프로비저닝하기 위해 독립형 PVC를 작성하는 데 사용됩니다. 이 EphemeralVolumeSource가 포함 된 포드가 PVC의 소유자가됩니다. 즉, PVC가 포드와 함께 삭제됩니다. PVC의 이름은`<pod name> -<volume name> `여기서`<volume name> `는`PodSpec.Volumes` 배열 항목의 이름입니다. 연결된 이름이 PVC에 유효하지 않은 경우 (예 : 너무 긴 경우) 포드 유효성 검사는 포드를 거부합니다. 팟 (Pod)이 소유하지 않은 이름을 가진 기존 PVC는 실수로 관련없는 볼륨을 사용하지 않도록 팟 (Pod)에 사용되지 * 않습니다 *. 그런 다음 관련없는 PVC가 제거 될 때까지 포드 시작이 차단됩니다. 이러한 사전 생성 된 PVC를 포드에서 사용하려는 경우 포드가 존재하면 PVC를 포드에 대한 소유자 참조로 업데이트해야합니다. 일반적으로이 작업은 필요하지 않지만 손상된 클러스터를 수동으로 재구성 할 때 유용 할 수 있습니다. 이 필드는 읽기 전용이며 생성 된 후에는 Kubernetes에서 PVC를 변경하지 않습니다. 필수 항목이며 nil이 아니어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata": "PVC를 만들 때 PVC에 복사 할 레이블 및 주석을 포함 할 수 있습니다. 다른 필드는 허용되지 않으며 유효성 검사 중에 거부됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec": "PersistentVolumeClaim의 사양입니다. 전체 콘텐츠는이 템플릿에서 생성 된 PVC에 변경되지 않고 복사됩니다. PersistentVolumeClaim에서와 동일한 필드가 여기에서도 유효합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.accessModes": "AccessModes에는 볼륨에 필요한 액세스 모드가 포함되어 있습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource": "이 필드는 다음 중 하나를 지정하는 데 사용할 수 있습니다. * 기존 VolumeSnapshot 객체 (snapshot.storage.k8s.io/VolumeSnapshot-베타) * 기존 PVC (PersistentVolumeClaim) * 데이터 채우기 (알파)를 순서대로 구현하는 기존 사용자 지정 리소스 / 객체 VolumeSnapshot 개체 유형을 사용하려면 적절한 기능 게이트를 활성화해야합니다 (VolumeSnapshotDataSource 또는 AnyVolumeDataSource) 프로비저닝 도구 또는 외부 컨트롤러가 지정된 데이터 소스를 지원할 수있는 경우 지정된 데이터 소스의 내용을 기반으로 새 볼륨을 생성합니다. 지정된 데이터 소스가 지원되지 않는 경우 볼륨이 생성되지 않고 오류가 이벤트로보고됩니다. 앞으로 더 많은 데이터 소스 유형을 지원할 계획이며 제공자의 동작이 변경 될 수 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.apiGroup": "APIGroup은 참조되는 리소스에 대한 그룹입니다. APIGroup이 지정되지 않은 경우 지정된 종류가 코어 API 그룹에 있어야합니다. 다른 타사 유형의 경우 APIGroup이 필요합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.kind": "Kind는 참조되는 리소스 유형입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.name": "이름은 참조되는 리소스의 이름입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources": "리소스는 볼륨에 있어야하는 최소 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector": "바인딩을 고려할 볼륨에 대한 레이블 쿼리입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.storageClassName": "클레임에 필요한 StorageClass의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.volumeMode": "volumeMode는 클레임에 필요한 볼륨 유형을 정의합니다. 클레임 사양에 포함되지 않은 경우 파일 시스템의 가치가 암시됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.volumeName": "VolumeName은이 클레임을 뒷받침하는 PersistentVolume에 대한 바인딩 참조입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc": "FC는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 파이버 채널 리소스를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.lun": "선택 사항 : FC 대상 LUN 번호",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.targetWWNs": "선택 사항 : FC 대상 월드 와이드 이름 (WWN)",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.wwids": "선택 사항 : FC 볼륨 월드 와이드 식별자 (wwids) wwids 또는 targetWWN과 lun의 조합을 설정해야하지만 둘 다 동시에 설정할 수는 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume": "FlexVolume은 exec 기반 플러그인을 사용하여 프로비저닝 / 연결된 일반 볼륨 리소스를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.driver": "Driver는이 볼륨에 사용할 드라이버의 이름입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본 파일 시스템은 FlexVolume 스크립트에 따라 다릅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.options": "옵션 : 추가 명령 옵션 (있는 경우).",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker": "Flocker는 kubelet의 호스트 머신에 연결된 Flocker 볼륨을 나타냅니다. 이것은 실행중인 Flocker 제어 서비스에 따라 다릅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker.properties.datasetName": "메타 데이터로 저장된 데이터 세트의 이름-&gt; Flocker 용 데이터 세트의 이름은 더 이상 사용되지 않는 것으로 간주되어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker.properties.datasetUUID": "데이터 세트의 UUID입니다. 이것은 Flocker 데이터 세트의 고유 식별자입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk": "GCEPersistentDisk는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 GCE 디스크 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다). 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.pdName": "GCE에있는 PD 리소스의 고유 이름입니다. GCE에서 디스크를 식별하는 데 사용됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo": "GitRepo는 특정 개정판의 git 저장소를 나타냅니다. DEPRECATED : GitRepo는 더 이상 사용되지 않습니다. git 저장소로 컨테이너를 프로비저닝하려면 git을 사용하여 저장소를 복제하는 InitContainer에 EmptyDir을 마운트 한 다음 Pod의 컨테이너에 EmptyDir을 마운트합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.directory": "대상 디렉토리 이름. &#39;..&#39;을 포함하거나 시작하지 않아야합니다. 만약 &#39;.&#39; 제공되면 볼륨 디렉토리는 git 저장소가됩니다. 그렇지 않으면 지정된 경우 볼륨은 지정된 이름의 하위 디렉토리에 git 저장소를 포함합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.repository": "저장소 URL",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.revision": "지정된 개정에 대한 커밋 해시입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs": "Glusterfs는 포드의 수명을 공유하는 호스트의 Glusterfs 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.endpoints": "EndpointsName은 Glusterfs 토폴로지를 자세히 설명하는 엔드 포인트 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.path": "Path는 Glusterfs 볼륨 경로입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.readOnly": "여기서 ReadOnly는 Glusterfs 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath": "HostPath는 컨테이너에 직접 노출되는 호스트 시스템의 기존 파일 또는 디렉터리를 나타냅니다. 이것은 일반적으로 호스트 시스템을 볼 수있는 시스템 에이전트 또는 기타 권한있는 항목에 사용됩니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath.properties.path": "호스트의 디렉토리 경로입니다. 경로가 심볼릭 링크이면 실제 경로에 대한 링크를 따릅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath.properties.type": "HostPath 볼륨의 유형 기본값은 &quot;&quot;입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi": "ISCSI는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 ISCSI 디스크 리소스를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/iscsi/README.md",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthDiscovery": "iSCSI 검색 CHAP 인증 지원 여부",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthSession": "iSCSI 세션 CHAP 인증 지원 여부",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.initiatorName": "사용자 지정 iSCSI 이니시에이터 이름. initiatorName이 iscsiInterface와 동시에 지정되면 새로운 iSCSI 인터페이스<target portal> :<volume name> 연결을 위해 생성됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.iqn": "대상 iSCSI 정규화 이름.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.iscsiInterface": "iSCSI 전송을 사용하는 iSCSI 인터페이스 이름입니다. 기본값은 &#39;default&#39;(tcp)입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.lun": "iSCSI 대상 LUN 번호.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.portals": "iSCSI 대상 포털 목록. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.targetPortal": "iSCSI 대상 포털. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.name": "볼륨의 이름. DNS_LABEL이어야하며 포드 내에서 고유해야합니다. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs": "NFS는 포드의 수명을 공유하는 호스트의 NFS 마운트를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.path": "NFS 서버에서 내 보낸 경로입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.readOnly": "여기서 ReadOnly는 읽기 전용 권한으로 NFS 내보내기를 강제로 마운트합니다. 기본값은 false입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.server": "Server는 NFS 서버의 호스트 이름 또는 IP 주소입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim": "PersistentVolumeClaimVolumeSource는 동일한 네임 스페이스에있는 PersistentVolumeClaim에 대한 참조를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.claimName": "ClaimName은이 볼륨을 사용하는 pod와 동일한 네임 스페이스에있는 PersistentVolumeClaim의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.readOnly": "VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk": "PhotonPersistentDisk는 kubelets 호스트 머신에 연결되고 마운트 된 PhotonController 영구 디스크를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.pdID": "Photon Controller 영구 디스크를 식별하는 ID",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume": "PortworxVolume은 kubelets 호스트 머신에 연결되고 마운트 된 portworx 볼륨을 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.fsType": "FSType은 마운트 할 파일 시스템 유형을 나타냅니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.volumeID": "VolumeID는 Portworx 볼륨을 고유하게 식별합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected": "하나의 리소스 비밀, 구성 맵 및 하향 API에 대한 항목",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.defaultMode": "기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources": "볼륨 예측 목록",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items": "지원되는 다른 볼륨 유형과 함께 투영 될 수있는 투영",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap": "프로젝트 할 configMap 데이터에 대한 정보",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI": "프로젝트 할 downwardAPI 데이터에 대한 정보",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items": "Items는 DownwardAPIVolume 파일 목록입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트는 0000과 0777 사이의 8 진수 값이거나 0과 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret": "프로젝트 할 비밀 데이터에 대한 정보",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken": "프로젝트 할 serviceAccountToken 데이터에 대한 정보",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.audience": "청중은 토큰의 의도 된 청중입니다. 토큰 수신자는 토큰 대상에 지정된 식별자로 자신을 식별해야하며 그렇지 않으면 토큰을 거부해야합니다. 대상은 기본적으로 apiserver의 식별자입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.expirationSeconds": "ExpirationSeconds는 서비스 계정 토큰의 요청 된 유효 기간입니다. 토큰이 만료에 가까워지면 kubelet 볼륨 플러그인이 사전에 서비스 계정 토큰을 교체합니다. 토큰이 수명의 80 % 이상이거나 토큰이 24 시간 이상인 경우 kubelet은 토큰 순환을 시작합니다. 기본값은 1 시간이며 최소 10 분이어야합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.path": "경로는 토큰을 투영 할 파일의 마운트 지점에 상대적인 경로입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte": "Quobyte는 포드의 수명을 공유하는 호스트의 Quobyte 마운트를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.group": "볼륨 액세스를 매핑 할 그룹 기본값은 그룹 없음입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.readOnly": "여기서 ReadOnly는 Quobyte 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.registry": "레지스트리는 볼륨의 중앙 레지스트리 역할을하는 호스트 : 포트 쌍 (여러 항목은 쉼표로 구분됨)으로 문자열로 지정된 단일 또는 다중 Quobyte Registry 서비스를 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.tenant": "백엔드에서 주어진 Quobyte 볼륨을 소유하는 테넌트는 동적으로 프로비저닝 된 Quobyte 볼륨과 함께 사용되며 값은 플러그인에 의해 설정됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.user": "볼륨 액세스를 기본값에 매핑하는 사용자를 serivceaccount 사용자에게",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.volume": "Volume은 이미 생성 된 Quobyte 볼륨을 이름으로 참조하는 문자열입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd": "RBD는 포드의 수명을 공유하는 호스트의 Rados 블록 장치 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#rbd",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.image": "라도 스 이미지 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.keyring": "키링은 RBDUser의 키링 경로입니다. 기본값은 / etc / ceph / keyring입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.monitors": "Ceph 모니터 모음. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.pool": "라도 스 풀 이름. 기본값은 rbd입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.user": "rados 사용자 이름입니다. 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO": "ScaleIO는 Kubernetes 노드에 연결되고 마운트 된 ScaleIO 영구 볼륨을 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본값은 &quot;xfs&quot;입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.gateway": "ScaleIO API 게이트웨이의 호스트 주소입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.protectionDomain": "구성된 스토리지에 대한 ScaleIO 보호 도메인의 이름입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.sslEnabled": "게이트웨이와의 SSL 통신을 활성화 / 비활성화하는 플래그, 기본값은 false",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.storageMode": "볼륨의 스토리지가 ThickProvisioned인지 ThinProvisioned인지 여부를 나타냅니다. 기본값은 ThinProvisioned입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.storagePool": "보호 도메인과 연결된 ScaleIO 스토리지 풀입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.system": "ScaleIO에 구성된 스토리지 시스템의 이름입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.volumeName": "이 볼륨 소스와 연결된 ScaleIO 시스템에 이미 생성 된 볼륨의 이름입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret": "Secret은이 볼륨을 채워야하는 비밀을 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.secretName": "사용할 팟 (Pod) 네임 스페이스의 시크릿 이름입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos": "StorageOS는 Kubernetes 노드에 연결되고 마운트 된 StorageOS 볼륨을 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.volumeName": "VolumeName은 사람이 읽을 수있는 StorageOS 볼륨의 이름입니다. 볼륨 이름은 네임 스페이스 내에서만 고유합니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.volumeNamespace": "VolumeNamespace는 StorageOS 내의 볼륨 범위를 지정합니다. 네임 스페이스를 지정하지 않으면 Pod의 네임 스페이스가 사용됩니다. 이를 통해보다 긴밀한 통합을 위해 Kubernetes 이름 범위를 StorageOS 내에서 미러링 할 수 있습니다. 기본 동작을 재정의하려면 VolumeName을 임의의 이름으로 설정합니다. StorageOS 내에서 네임 스페이스를 사용하지 않는 경우 &quot;default&quot;로 설정하십시오. StorageOS 내에 존재하지 않는 네임 스페이스가 생성됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume": "VsphereVolume은 kubelets 호스트 시스템에 연결되고 마운트 된 vSphere 볼륨을 나타냅니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyID": "StoragePolicyName과 연결된 SPBM (스토리지 정책 기반 관리) 프로필 ID입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyName": "SPBM (스토리지 정책 기반 관리) 프로필 이름입니다.",
    "%DaemonSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.volumePath": "vSphere 볼륨 vmdk를 식별하는 경로",
    "%DaemonSet.json.properties.spec.properties.updateStrategy": "기존 DaemonSet 포드를 새 포드로 교체하는 업데이트 전략입니다.",
    "%DaemonSet.json.properties.spec.properties.updateStrategy.properties.rollingUpdate": "롤링 업데이트 구성 매개 변수. type = &quot;RollingUpdate&quot;인 경우에만 표시됩니다.",
    "%DaemonSet.json.properties.spec.properties.updateStrategy.properties.rollingUpdate.properties.maxUnavailable": "업데이트 중에 사용할 수없는 DaemonSet 포드의 최대 수입니다. 값은 절대 숫자 (예 : 5)이거나 업데이트 시작시 총 DaemonSet 포드 수의 백분율 (예 : 10 %) 일 수 있습니다. 절대 숫자는 반올림하여 백분율에서 계산됩니다. 0이 될 수 없습니다. 기본값은 1입니다. 예 :이 값이 30 %로 설정되면 데몬 포드를 실행해야하는 총 노드 수의 최대 30 % (예 : status.desiredNumberScheduled)에서 해당 포드를 중지 할 수 있습니다. 주어진 시간에 업데이트하십시오. 업데이트는 해당 DaemonSet 포드의 최대 30 %를 중지 한 다음 그 자리에 새 DaemonSet 포드를 가져 오는 것으로 시작됩니다. 새 포드를 사용할 수있게되면 다른 DaemonSet 포드로 진행하여 업데이트 중에 원래 DaemonSet 포드 수의 70 % 이상을 항상 사용할 수 있도록합니다.",
    "%DaemonSet.json.properties.spec.properties.updateStrategy.properties.type": "데몬 세트 업데이트 유형입니다. &quot;RollingUpdate&quot;또는 &quot;OnDelete&quot;일 수 있습니다. 기본값은 RollingUpdate입니다.",
    "%DaemonSet.json.properties.status": "이 데몬 세트의 현재 상태입니다. 이 데이터는 일정 기간에 의해 오래되었을 수 있습니다. 시스템에 의해 채워집니다. 읽기 전용. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%DaemonSet.json.properties.status.properties.collisionCount": "DaemonSet에 대한 해시 충돌 수입니다. DaemonSet 컨트롤러는 최신 ControllerRevision의 이름을 만들어야 할 때이 필드를 충돌 방지 메커니즘으로 사용합니다.",
    "%DaemonSet.json.properties.status.properties.conditions": "DaemonSet의 현재 상태에 대해 사용 가능한 최신 관찰을 나타냅니다.",
    "%DaemonSet.json.properties.status.properties.conditions.items": "DaemonSetCondition은 특정 지점에서 DaemonSet의 상태를 설명합니다.",
    "%DaemonSet.json.properties.status.properties.conditions.items.properties.lastTransitionTime": "마지막으로 조건이 한 상태에서 다른 상태로 전환 된 시간입니다.",
    "%DaemonSet.json.properties.status.properties.conditions.items.properties.message": "전환에 대한 세부 정보를 나타내는 사람이 읽을 수있는 메시지입니다.",
    "%DaemonSet.json.properties.status.properties.conditions.items.properties.reason": "조건의 마지막 전환 이유입니다.",
    "%DaemonSet.json.properties.status.properties.conditions.items.properties.status": "조건의 상태는 True, False, Unknown 중 하나입니다.",
    "%DaemonSet.json.properties.status.properties.conditions.items.properties.type": "DaemonSet 조건의 유형입니다.",
    "%DaemonSet.json.properties.status.properties.currentNumberScheduled": "하나 이상의 데몬 포드를 실행하고 있고 데몬 포드를 실행해야하는 노드 수입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
    "%DaemonSet.json.properties.status.properties.desiredNumberScheduled": "데몬 포드를 실행해야하는 총 노드 수 (데몬 포드를 올바르게 실행하는 노드 포함) 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
    "%DaemonSet.json.properties.status.properties.numberAvailable": "데몬 포드를 실행 중이고 하나 이상의 데몬 포드가 실행 중이고 사용 가능해야하는 노드 수 (최소한 spec.minReadySeconds 준비 완료)",
    "%DaemonSet.json.properties.status.properties.numberMisscheduled": "데몬 포드를 실행하고 있지만 데몬 포드를 실행해서는 안되는 노드 수입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
    "%DaemonSet.json.properties.status.properties.numberReady": "데몬 포드를 실행 중이고 하나 이상의 데몬 포드가 실행 중이고 준비되어 있어야하는 노드 수입니다.",
    "%DaemonSet.json.properties.status.properties.numberUnavailable": "데몬 포드를 실행해야하고 데몬 포드가 실행 중이고 사용 가능한 노드가없는 노드 수 (최소한 spec.minReadySeconds에 대해 준비 됨)",
    "%DaemonSet.json.properties.status.properties.observedGeneration": "데몬 세트 컨트롤러에서 관찰 한 최신 세대입니다.",
    "%DaemonSet.json.properties.status.properties.updatedNumberScheduled": "업데이트 된 데몬 포드를 실행중인 총 노드 수",
    "%Deployment.json": "배포를 통해 포드 및 ReplicaSet에 대한 선언적 업데이트를 사용할 수 있습니다.",
    "%Deployment.json.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%Deployment.json.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%Deployment.json.properties.metadata": "표준 개체 메타 데이터.",
    "%Deployment.json.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%Deployment.json.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%Deployment.json.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%Deployment.json.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%Deployment.json.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%Deployment.json.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%Deployment.json.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%Deployment.json.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%Deployment.json.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%Deployment.json.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%Deployment.json.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%Deployment.json.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%Deployment.json.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Deployment.json.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%Deployment.json.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%Deployment.json.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%Deployment.json.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%Deployment.json.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%Deployment.json.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%Deployment.json.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%Deployment.json.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Deployment.json.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%Deployment.json.properties.spec": "원하는 배포 동작의 사양.",
    "%Deployment.json.properties.spec.properties.minReadySeconds": "새로 생성 된 포드가 사용 가능한 것으로 간주되기 위해 컨테이너 충돌없이 준비되어야하는 최소 시간 (초)입니다. 기본값은 0 (포드는 준비되는 즉시 사용 가능한 것으로 간주 됨)",
    "%Deployment.json.properties.spec.properties.paused": "배포가 일시 중지되었음을 나타냅니다.",
    "%Deployment.json.properties.spec.properties.progressDeadlineSeconds": "배포가 실패한 것으로 간주되기 전에 진행되는 최대 시간 (초)입니다. 배포 컨트롤러는 실패한 배포를 계속 처리하고 ProgressDeadlineExceeded 이유가있는 조건이 배포 상태에 표시됩니다. 배포가 일시 중지 된 동안에는 진행률이 예상되지 않습니다. 기본값은 600 초입니다.",
    "%Deployment.json.properties.spec.properties.replicas": "원하는 포드 수. 명시 적 0과 지정되지 않음을 구별하기위한 포인터입니다. 기본값은 1입니다.",
    "%Deployment.json.properties.spec.properties.revisionHistoryLimit": "롤백을 허용하기 위해 보유 할 이전 ReplicaSet 수입니다. 명시 적 0과 지정되지 않음을 구별하기위한 포인터입니다. 기본값은 10입니다.",
    "%Deployment.json.properties.spec.properties.selector": "포드의 라벨 선택기. 이것에 의해 pod가 선택된 기존 ReplicaSet는이 배포의 영향을받는 것들입니다. 포드 템플릿의 레이블과 일치해야합니다.",
    "%Deployment.json.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Deployment.json.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Deployment.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Deployment.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Deployment.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Deployment.json.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Deployment.json.properties.spec.properties.strategy": "기존 포드를 새 포드로 교체하는 데 사용할 배포 전략입니다.",
    "%Deployment.json.properties.spec.properties.strategy.properties.rollingUpdate": "롤링 업데이트 구성 매개 변수. DeploymentStrategyType = RollingUpdate 인 경우에만 표시됩니다.",
    "%Deployment.json.properties.spec.properties.strategy.properties.rollingUpdate.properties.maxSurge": "원하는 포드 수 이상으로 예약 할 수있는 최대 포드 수입니다. 값은 절대 숫자 (예 : 5) 또는 원하는 광고 모음의 백분율 (예 : 10 %) 일 수 있습니다. MaxUnavailable이 0이면 0이 될 수 없습니다. 절대 숫자는 반올림하여 백분율에서 계산됩니다. 기본값은 25 %입니다. 예 :이 값을 30 %로 설정하면 롤링 업데이트가 시작될 때 새 ReplicaSet를 즉시 확장 할 수 있으므로 이전 및 새 포드의 총 수가 원하는 포드의 130 %를 초과하지 않습니다. 이전 포드가 종료되면 새 ReplicaSet를 추가로 확장하여 업데이트 중 언제든지 실행중인 총 포드 수가 원하는 포드의 최대 130 %가되도록 할 수 있습니다.",
    "%Deployment.json.properties.spec.properties.strategy.properties.rollingUpdate.properties.maxUnavailable": "업데이트 중에 사용할 수없는 최대 포드 수입니다. 값은 절대 숫자 (예 : 5) 또는 원하는 광고 모음의 백분율 (예 : 10 %) 일 수 있습니다. 절대 숫자는 반올림하여 백분율에서 계산됩니다. MaxSurge가 0이면 0이 될 수 없습니다. 기본값은 25 %입니다. 예 :이 값이 30 %로 설정되면 롤링 업데이트가 시작되는 즉시 이전 ReplicaSet을 원하는 포드의 70 %로 축소 할 수 있습니다. 새 포드가 준비되면 이전 ReplicaSet을 더 축소 한 다음 새 ReplicaSet를 확장하여 업데이트 중에 항상 사용할 수있는 포드의 총 수가 원하는 포드의 70 % 이상인지 확인할 수 있습니다.",
    "%Deployment.json.properties.spec.properties.strategy.properties.type": "배포 유형. &quot;Recreate&quot;또는 &quot;RollingUpdate&quot;일 수 있습니다. 기본값은 RollingUpdate입니다.",
    "%Deployment.json.properties.spec.properties.template": "템플릿은 생성 될 포드를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.metadata": "표준 개체의 메타 데이터. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Deployment.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%Deployment.json.properties.spec.properties.template.properties.spec": "pod의 원하는 동작에 대한 사양입니다. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.activeDeadlineSeconds": "시스템이 실패로 표시하고 연관된 컨테이너를 강제 종료하기 전에 팟 (Pod)이 StartTime에 상대적으로 노드에서 활성화 될 수있는 선택적 기간 (초)입니다. 값은 양의 정수 여야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity": "지정된 경우 포드의 예약 제약",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity": "포드에 대한 노드 선호도 예약 규칙을 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 노드가 대응하는 matchExpressions와 일치하면 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "빈 선호 스케줄링 용어는 암시 적 가중치가 0 인 모든 개체와 일치합니다 (즉, 작동하지 않음). null 선호 스케줄링 용어는 객체와 일치하지 않습니다 (즉, 작동하지 않음).",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference": "해당 가중치와 관련된 노드 선택기 용어입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 nodeSelectorTerm 일치와 관련된 가중치입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms": "필수입니다. 노드 선택기 용어 목록입니다. 용어는 OR로 연결됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items": "null 또는 빈 노드 선택기 용어는 개체와 일치하지 않습니다. 이들의 요구 사항은 AND입니다. TopologySelectorTerm 유형은 NodeSelectorTerm의 하위 집합을 구현합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity": "포드 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 배치).",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 및 노드가 대응하는 podAffinityTerm과 일치하는 포드를 갖는 경우 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity": "포드 반 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 두지 않음).",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 반친 화성 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치의 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 반친 화성 표현식 등)을 충족하는 각 노드에 대해 다음 요소를 반복하여 합계를 계산합니다. 이 필드와 노드에 해당 podAffinityTerm과 일치하는 포드가있는 경우 합계에 &quot;weight&quot;를 추가합니다. 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 반친 화성 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 반친 화성 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않는 경우 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.automountServiceAccountToken": "AutomountServiceAccountToken은 서비스 계정 토큰을 자동으로 마운트해야하는지 여부를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers": "포드에 속한 컨테이너 목록입니다. 현재 컨테이너를 추가하거나 제거 할 수 없습니다. 포드에는 컨테이너가 하나 이상 있어야합니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업보다 데이터를로드하거나 캐시를 워밍하는 데 오랜 시간이 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.dnsConfig": "포드의 DNS 매개 변수를 지정합니다. 여기에 지정된 매개 변수는 DNSPolicy를 기반으로 생성 된 DNS 구성에 병합됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.nameservers": "DNS 이름 서버 IP 주소 목록입니다. 이는 DNSPolicy에서 생성 된 기본 네임 서버에 추가됩니다. 중복 된 네임 서버는 제거됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options": "DNS 확인자 옵션 목록입니다. 이것은 DNSPolicy에서 생성 된 기본 옵션과 병합됩니다. 중복 된 항목은 제거됩니다. 옵션에 제공된 해결 옵션은 기본 DNSPolicy에 표시되는 옵션보다 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options.items": "PodDNSConfigOption은 포드의 DNS 확인자 옵션을 정의합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options.items.properties.name": "필수입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.searches": "호스트 이름 조회를위한 DNS 검색 도메인 목록입니다. 이는 DNSPolicy에서 생성 된 기본 검색 경로에 추가됩니다. 중복 된 검색 경로는 제거됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.dnsPolicy": "포드에 대한 DNS 정책을 설정합니다. 기본값은 &quot;ClusterFirst&quot;입니다. 유효한 값은 &#39;ClusterFirstWithHostNet&#39;, &#39;ClusterFirst&#39;, &#39;Default&#39;또는 &#39;None&#39;입니다. DNSConfig에 제공된 DNS 매개 변수는 DNSPolicy로 선택한 정책과 병합됩니다. hostNetwork와 함께 DNS 옵션을 설정하려면 DNS 정책을 명시 적으로 &#39;ClusterFirstWithHostNet&#39;으로 지정해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.enableServiceLinks": "EnableServiceLinks는 서비스에 대한 정보를 Docker 링크의 구문과 일치하는 포드의 환경 변수에 삽입해야하는지 여부를 나타냅니다. 선택 사항 : 기본값은 true입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers": "이 포드에서 실행되는 임시 컨테이너 목록입니다. 임시 컨테이너는 디버깅과 같은 사용자 시작 작업을 수행하기 위해 기존 포드에서 실행될 수 있습니다. 이 목록은 포드를 만들 때 지정할 수 없으며 포드 사양을 업데이트하여 수정할 수 없습니다. 기존 포드에 임시 컨테이너를 추가하려면 포드의 ephemeralcontainers 하위 리소스를 사용합니다. 이 필드는 알파 수준이며 EphemeralContainers 기능을 활성화하는 서버에서만 적용됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items": "EphemeralContainer는 디버깅과 같이 사용자가 시작한 활동을 위해 기존 포드에 임시로 추가 할 수있는 컨테이너입니다. 임시 컨테이너에는 리소스 또는 예약 보장이 없으며 종료시 또는 포드가 제거되거나 다시 시작될 때 다시 시작되지 않습니다. 임시 컨테이너로 인해 포드가 리소스 할당을 초과하는 경우 포드가 제거 될 수 있습니다. 포드 사양을 직접 업데이트하여 임시 컨테이너를 추가 할 수 없습니다. 포드의 ephemeralcontainers 하위 리소스를 통해 추가해야하며 추가되면 포드 사양에 나타납니다. 이것은 EphemeralContainers 기능 플래그로 활성화 된 알파 기능입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle": "임시 컨테이너에는 수명주기가 허용되지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.name": "DNS_LABEL로 지정된 임시 컨테이너의 이름입니다. 이 이름은 모든 컨테이너, 초기화 컨테이너 및 임시 컨테이너간에 고유해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports": "임시 컨테이너에는 포트가 허용되지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources": "임시 컨테이너에는 리소스가 허용되지 않습니다. 임시 컨테이너는 포드에 이미 할당 된 예비 리소스를 사용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext": "임시 컨테이너에는 SecurityContext가 허용되지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.targetContainerName": "설정된 경우이 임시 컨테이너가 대상으로하는 PodSpec의 컨테이너 이름입니다. 임시 컨테이너는이 컨테이너의 네임 스페이스 (IPC, PID 등)에서 실행됩니다. 설정되지 않은 경우 팟 (Pod)에 대해 공유되는 네임 스페이스에서 임시 컨테이너가 실행됩니다. 컨테이너 런타임은이 기능을 지원해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.hostAliases": "HostAliases는 지정된 경우 포드의 호스트 파일에 삽입 될 호스트 및 IP의 선택적 목록입니다. 이는 hostNetwork가 아닌 포드에만 유효합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.hostAliases.items": "HostAlias는 포드의 호스트 파일에 항목으로 삽입 될 IP와 호스트 이름 간의 매핑을 보유합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.hostAliases.items.properties.hostnames": "위 IP 주소의 호스트 이름입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.hostAliases.items.properties.ip": "호스트 파일 항목의 IP 주소입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.hostIPC": "호스트의 ipc 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.hostNetwork": "이 포드에 대해 요청 된 호스트 네트워킹입니다. 호스트의 네트워크 네임 스페이스를 사용합니다. 이 옵션을 설정하면 사용할 포트를 지정해야합니다. 기본값은 false입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.hostPID": "호스트의 pid 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.hostname": "포드의 호스트 이름을 지정합니다. 지정하지 않으면 포드의 호스트 이름이 시스템 정의 값으로 설정됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.imagePullSecrets": "ImagePullSecrets는이 PodSpec에서 사용하는 이미지를 가져 오는 데 사용할 동일한 네임 스페이스의 보안 비밀에 대한 선택적 참조 목록입니다. 지정된 경우 이러한 비밀은 사용할 개별 풀러 구현에 전달됩니다. 예를 들어 docker의 경우 DockerConfig 유형 비밀 만 적용됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.imagePullSecrets.items": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.imagePullSecrets.items.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers": "포드에 속한 초기화 컨테이너 목록입니다. Init 컨테이너는 컨테이너가 시작되기 전에 순서대로 실행됩니다. 초기화 컨테이너가 실패하면 포드는 실패한 것으로 간주되며 restartPolicy에 따라 처리됩니다. 초기화 컨테이너 또는 일반 컨테이너의 이름은 모든 컨테이너에서 고유해야합니다. Init 컨테이너에는 수명주기 작업, 준비 상태 프로브, 활성 상태 프로브 또는 시작 프로브가 없을 수 있습니다. init 컨테이너의 resourceRequirements는 각 리소스 유형에 대해 가장 높은 요청 / 한계를 찾은 다음 해당 값의 최대 값 또는 일반 컨테이너의 합계를 사용하여 스케줄링 중에 고려됩니다. 제한은 비슷한 방식으로 초기화 컨테이너에 적용됩니다. Init 컨테이너는 현재 추가하거나 제거 할 수 없습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업보다 데이터를로드하거나 캐시를 워밍하는 데 오랜 시간이 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.nodeName": "NodeName은이 포드를 특정 노드에 예약하기위한 요청입니다. 비어 있지 않은 경우 스케줄러는 리소스 요구 사항에 적합하다고 가정하여이 포드를 해당 노드에 예약합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.nodeSelector": "NodeSelector는 포드가 노드에 맞도록 true 여야하는 선택기입니다. 포드가 해당 노드에서 예약되도록하려면 노드의 라벨과 일치해야하는 선택기입니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.overhead": "오버 헤드는 주어진 RuntimeClass에 대한 포드 실행과 관련된 리소스 오버 헤드를 나타냅니다. 이 필드는 RuntimeClass 승인 컨트롤러에 의해 승인 시간에 자동으로 채워집니다. RuntimeClass 승인 컨트롤러가 사용 설정된 경우 Pod 생성 요청에 오버 헤드를 설정하면 안됩니다. RuntimeClass 승인 컨트롤러는 오버 헤드가 이미 설정된 포드 생성 요청을 거부합니다. RuntimeClass가 PodSpec에서 구성되고 선택되면 오버 헤드는 해당 RuntimeClass에 정의 된 값으로 설정됩니다. 그렇지 않으면 설정되지 않은 상태로 유지되고 0으로 처리됩니다. 추가 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/688-pod-overhead/README.md이 필드는 Kubernetes v1.16부터 알파 수준이며 PodOverhead 기능을 활성화하는 서버에서 인정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.preemptionPolicy": "PreemptionPolicy는 우선 순위가 낮은 포드를 선점하기위한 정책입니다. Never 중 하나, PreemptLowerPriority. 설정되지 않은 경우 기본값은 PreemptLowerPriority입니다. 이 필드는 베타 수준이며 NonPreemptingPriority 기능 게이트에 의해 제어됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.priority": "우선 순위 값입니다. 다양한 시스템 구성 요소가이 필드를 사용하여 포드의 우선 순위를 찾습니다. Priority Admission Controller가 활성화되면 사용자가이 필드를 설정할 수 없습니다. 승인 컨트롤러는 PriorityClassName에서이 필드를 채 웁니다. 값이 높을수록 우선 순위가 높아집니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.priorityClassName": "지정된 경우 포드의 우선 순위를 나타냅니다. &quot;system-node-critical&quot;및 &quot;system-cluster-critical&quot;은 가장 높은 우선 순위를 나타내는 두 개의 특수 키워드이며 전자가 가장 높은 우선 순위입니다. 다른 이름은 해당 이름으로 PriorityClass 개체를 만들어 정의해야합니다. 지정되지 않은 경우 포드 우선 순위는 기본값이되거나 기본값이없는 경우 0이됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.readinessGates": "지정된 경우 모든 준비 게이트에서 포드 준비 상태를 평가합니다. 모든 컨테이너가 준비되고 준비 게이트에 지정된 모든 조건의 상태가 &quot;True&quot;이면 포드가 준비된 것입니다. 자세한 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/ 580-pod-readiness-gates / README.md",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.readinessGates.items": "PodReadinessGate에는 포드 조건에 대한 참조가 포함됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.readinessGates.items.properties.conditionType": "ConditionType은 유형이 일치하는 pod의 조건 목록에있는 조건을 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.restartPolicy": "포드 내의 모든 컨테이너에 대한 정책을 다시 시작합니다. Always, OnFailure, Never 중 하나입니다. 기본값은 항상입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.runtimeClassName": "RuntimeClassName은 node.k8s.io 그룹의 RuntimeClass 객체를 참조하며이 pod를 실행하는 데 사용해야합니다. RuntimeClass 리소스가 명명 된 클래스와 일치하지 않으면 포드가 실행되지 않습니다. 설정되지 않거나 비어있는 경우 기본 런타임 핸들러를 사용하는 비어있는 정의가있는 암시 적 클래스 인 &quot;레거시&quot;RuntimeClass가 사용됩니다. 추가 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/585-runtime-class/README.md 이것은 Kubernetes v1.14의 베타 기능입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.schedulerName": "지정된 경우 지정된 스케줄러가 포드를 발송합니다. 지정하지 않으면 포드가 기본 스케줄러에 의해 발송됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext": "SecurityContext는 포드 수준 보안 속성 및 공통 컨테이너 설정을 보유합니다. 옵션 : 기본값은 비어 있습니다. 각 필드의 기본값은 유형 설명을 참조하십시오.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.fsGroup": "포드의 모든 컨테이너에 적용되는 특수 보조 그룹입니다. 일부 볼륨 유형을 사용하면 Kubelet이 포드가 소유 할 해당 볼륨의 소유권을 변경할 수 있습니다. 1. 소유 GID는 FSGroup이됩니다. 2. setgid 비트가 설정됩니다 (볼륨에 생성 된 새 파일은 FSGroup이 소유 함) 3 권한 비트는 rw-rw ----와 OR로 연결됩니다. 설정되지 않은 경우 Kubelet은 볼륨의 소유권 및 권한을 수정하지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.fsGroupChangePolicy": "fsGroupChangePolicy는 Pod 내부에 노출되기 전에 볼륨의 소유권 및 권한을 변경하는 동작을 정의합니다. 이 필드는 fsGroup 기반 소유권 (및 권한)을 지원하는 볼륨 유형에만 적용됩니다. secret, configmaps 및 emptydir과 같은 임시 볼륨 유형에는 영향을 미치지 않습니다. 유효한 값은 &quot;OnRootMismatch&quot;및 &quot;Always&quot;입니다. 지정하지 않으면 기본값은 &quot;항상&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions": "모든 컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile": "이 포드의 컨테이너에서 사용할 seccomp 옵션입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.supplementalGroups": "컨테이너의 기본 GID와 함께 각 컨테이너에서 실행되는 첫 번째 프로세스에 적용된 그룹 목록입니다. 지정하지 않으면 컨테이너에 그룹이 추가되지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls": "Sysctls에는 포드에 사용되는 네임 스페이스가 지정된 sysctls 목록이 있습니다. 컨테이너 런타임에 의해 지원되지 않는 sysctls가있는 포드가 시작되지 않을 수 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items": "Sysctl은 설정할 커널 매개 변수를 정의합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items.properties.name": "설정할 속성의 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items.properties.value": "설정할 속성 값",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 컨테이너의 SecurityContext 내의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.serviceAccountName": "ServiceAccountName은이 포드를 실행하는 데 사용할 ServiceAccount의 이름입니다. 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.setHostnameAsFQDN": "true이면 포드의 호스트 이름이 리프 이름 (기본값)이 아닌 포드의 FQDN으로 구성됩니다. Linux 컨테이너에서 이는 커널의 hostname 필드 (struct utsname의 nodename 필드)에 FQDN을 설정하는 것을 의미합니다. Windows 컨테이너에서 이는 레지스트리 키 HKEY_LOCAL_MACHINE \\ SYSTEM \\ CurrentControlSet \\ Services \\ Tcpip \\ Parameters에 대한 호스트 이름의 레지스트리 값을 FQDN으로 설정하는 것을 의미합니다. 포드에 FQDN이 없으면 아무 효과가 없습니다. 기본값은 false입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.shareProcessNamespace": "pod의 모든 컨테이너간에 단일 프로세스 네임 스페이스를 공유합니다. 이것이 설정되면 컨테이너는 동일한 포드의 다른 컨테이너에서 프로세스를보고 신호를 보낼 수 있으며 각 컨테이너의 첫 번째 프로세스에는 PID 1이 할당되지 않습니다. HostPID와 ShareProcessNamespace를 둘 다 설정할 수는 없습니다. 선택 사항 : 기본값은 false입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.subdomain": "지정된 경우 정규화 된 포드 호스트 이름은 &quot;<hostname> .<subdomain> .<pod namespace> .svc.<cluster domain> &quot;. 지정하지 않으면 포드에 도메인 이름이 전혀 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.terminationGracePeriodSeconds": "포드가 정상적으로 종료되어야하는 선택적 기간 (초)입니다. 삭제 요청시 감소 될 수 있습니다. 값은 음이 아닌 정수 여야합니다. 값 0은 즉시 삭제를 나타냅니다. 이 값이 nil이면 기본 유예 기간이 대신 사용됩니다. 유예 기간은 포드에서 실행중인 프로세스가 종료 신호를 보낸 후의 기간 (초)과 프로세스가 강제 종료 신호로 중단되는 시간입니다. 이 값을 프로세스의 예상 정리 시간보다 길게 설정하십시오. 기본값은 30 초입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.tolerations": "지정된 경우 포드의 허용 오차입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.tolerations.items": "이 Toleration이 연결된 포드는 트리플과 일치하는 모든 오염을 견뎌냅니다.<key,value,effect> 일치 연산자 사용<operator> .",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.effect": "효과는 일치시킬 오염 효과를 나타냅니다. 비어 있음은 모든 오염 효과와 일치 함을 의미합니다. 지정된 경우 허용되는 값은 NoSchedule, PreferNoSchedule 및 NoExecute입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.key": "키는 관용이 적용되는 오염 키입니다. 비어 있음은 모든 오염 키와 일치 함을 의미합니다. 키가 비어 있으면 연산자가 존재해야합니다. 이 조합은 모든 값과 모든 키와 일치 함을 의미합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.operator": "연산자는 값에 대한 키의 관계를 나타냅니다. 유효한 연산자는 Exists 및 Equal입니다. 기본값은 Equal입니다. Exists는 값에 대한 와일드 카드와 동일하므로 포드가 특정 카테고리의 모든 taint를 허용 할 수 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.tolerationSeconds": "TolerationSeconds는 허용 범위 (NoExecute가 유효해야하며 그렇지 않으면이 필드는 무시 됨)가 taint를 허용하는 기간을 나타냅니다. 기본적으로 설정되어 있지 않으므로 오염을 영원히 견딜 수 있습니다 (제거하지 마십시오). 0 및 음수 값은 시스템에서 0 (즉시 제거)으로 처리됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.value": "Value는 허용치가 일치하는 오염 값입니다. 연산자가 Exists이면 값은 비어 있어야하고 그렇지 않으면 일반 문자열이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints": "TopologySpreadConstraints는 pod 그룹이 토폴로지 도메인에 어떻게 분산되어야하는지 설명합니다. 스케줄러는 제약 조건을 준수하는 방식으로 포드를 예약합니다. 모든 topologySpreadConstraint는 AND 처리됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items": "TopologySpreadConstraint는 지정된 토폴로지간에 일치하는 포드를 분산하는 방법을 지정합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector": "LabelSelector는 일치하는 포드를 찾는 데 사용됩니다. 이 라벨 선택기와 일치하는 포드는 해당 토폴로지 도메인의 포드 수를 결정하기 위해 계산됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.maxSkew": "MaxSkew는 포드가 고르지 않게 분산 될 수있는 정도를 설명합니다. `whenUnsatisfiable = DoNotSchedule` 인 경우 대상 토폴로지에서 일치하는 포드 수와 전역 최소값간에 허용되는 최대 차이입니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 1/1/0으로 확산되는 포드 : | zone1 | zone2 | zone3 | | P | P | | -MaxSkew가 1이면 들어오는 포드는 zone3에 1/1/1이되도록 예약 할 수 있습니다. zone1 (zone2)로 예약하면 zone1 (zone2)의 ActualSkew (2-0)가 MaxSkew (1)을 위반하게됩니다. -MaxSkew가 2이면 들어오는 포드를 모든 영역에 예약 할 수 있습니다. `whenUnsatisfiable = ScheduleAnyway` 인 경우이를 충족하는 토폴로지에 더 높은 우선 순위를 부여하는 데 사용됩니다. 필수 필드입니다. 기본값은 1이고 0은 허용되지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.topologyKey": "TopologyKey는 노드 레이블의 키입니다. 이 키와 동일한 값이있는 레이블이있는 노드는 동일한 토폴로지에있는 것으로 간주됩니다. 우리는 각각을 고려합니다<key, value> &quot;버킷&quot;으로 각 버킷에 균형 잡힌 수의 포드를 넣으십시오. 필수 필드입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.whenUnsatisfiable": "WhenUnsatisfiable은 스프레드 제약 조건을 충족하지 않는 경우 포드를 처리하는 방법을 나타냅니다. -DoNotSchedule (기본값)은 스케줄러가 스케줄하지 않도록 지시합니다. -ScheduleAnyway는 스케줄러에게 임의의 위치에서 포드를 예약하도록 지시하지만, 왜곡을 줄이는 데 도움이되는 토폴로지에 더 높은 우선 순위를 부여합니다. 해당 포드에 대해 가능한 모든 노드 할당이 일부 토폴로지에서 &quot;MaxSkew&quot;를 위반하는 경우에만 수신 포드에 대한 제약 조건이 &quot;불만족&quot;으로 간주됩니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 3/1/1로 확산되는 포드 : | zone1 | zone2 | zone3 | | PPP | P | P | WhenUnsatisfiable이 DoNotSchedule로 설정된 경우 들어오는 pod는 zone2 (zone3)의 ActualSkew (2-1)가 MaxSkew (1)를 충족하므로 zone2 (zone3) 만 3/2/1 (3/1/2)가되도록 예약 할 수 있습니다. 즉, 클러스터는 여전히 불균형 상태 일 수 있지만 스케줄러는 * 더 * 불균형 상태로 만들지 않습니다. 필수 필드입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes": "포드에 속한 컨테이너로 마운트 할 수있는 볼륨 목록입니다. 자세한 정보 : https://kubernetes.io/docs/concepts/storage/volumes",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items": "볼륨은 포드의 모든 컨테이너에서 액세스 할 수있는 포드의 명명 된 볼륨을 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore": "AWSElasticBlockStore는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 AWS 디스크 리소스를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다).",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.readOnly": "VolumeMounts의 ReadOnly 속성을 &quot;true&quot;로 강제 설정하려면 &quot;true&quot;를 지정합니다. 생략하면 기본값은 &quot;false&quot;입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.volumeID": "AWS에있는 영구 디스크 리소스의 고유 ID (Amazon EBS 볼륨). 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk": "AzureDisk는 호스트의 Azure 데이터 디스크 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.cachingMode": "호스트 캐싱 모드 : 없음, 읽기 전용, 읽기 쓰기.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskName": "Blob 저장소에있는 데이터 디스크의 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskURI": "Blob 저장소의 데이터 디스크 URI",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.kind": "예상 값 공유 : 스토리지 계정 당 여러 Blob 디스크 전용 : 스토리지 계정 당 단일 Blob 디스크 관리 : Azure 관리 데이터 디스크 (관리되는 가용성 집합에서만). 기본적으로 공유 됨",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile": "AzureFile은 호스트의 Azure 파일 서비스 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.secretName": "Azure Storage 계정 이름 및 키가 포함 된 비밀의 이름",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.shareName": "이름 공유",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs": "CephFS는 포드의 수명을 공유하는 호스트의 Ceph FS 마운트를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.monitors": "필수 : Monitors는 Ceph 모니터 모음입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.path": "선택 사항 : 전체 Ceph 트리가 아닌 마운트 된 루트로 사용되며 기본값은 /입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretFile": "선택 사항 : SecretFile은 사용자의 키 링 경로이며 기본값은 /etc/ceph/user.secret입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.user": "선택 사항 : 사용자는 rados 사용자 이름, 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder": "Cinder는 kubelets 호스트 머신에 연결되고 마운트 된 cinder 볼륨을 나타냅니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.volumeID": "cinder에서 볼륨을 식별하는 데 사용되는 볼륨 ID입니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap": "ConfigMap은이 볼륨을 채워야하는 configMap을 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi": "CSI (Container Storage Interface)는 특정 외부 CSI 드라이버 (베타 기능)에서 처리하는 임시 저장소를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.driver": "Driver는이 볼륨을 처리하는 CSI 드라이버의 이름입니다. 클러스터에 등록 된 올바른 이름은 관리자에게 문의하십시오.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.fsType": "마운트 할 파일 시스템 유형입니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 제공되지 않으면 적용 할 기본 파일 시스템을 결정하는 관련 CSI 드라이버에 빈 값이 전달됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.volumeAttributes": "VolumeAttributes는 CSI 드라이버에 전달되는 드라이버 별 속성을 저장합니다. 지원되는 값은 드라이버 설명서를 참조하십시오.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI": "DownwardAPI는이 볼륨을 채워야하는 포드에 대한 하향 API를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 사용할 모드 비트. 선택 사항이어야합니다. 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items": "항목은 하향 API 볼륨 파일 목록입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트는 0000과 0777 사이의 8 진수 값이거나 0과 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir": "EmptyDir는 포드의 수명을 공유하는 임시 디렉터리를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir.properties.medium": "이 디렉토리를 백업해야하는 저장 매체 유형입니다. 기본값은 노드의 기본 매체를 사용함을 의미하는 &quot;&quot;입니다. 빈 문자열 (기본값) 또는 메모리 여야합니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir.properties.sizeLimit": "이 EmptyDir 볼륨에 필요한 총 로컬 스토리지 양입니다. 크기 제한은 메모리 매체에도 적용됩니다. 메모리 매체 EmptyDir의 최대 사용량은 여기에 지정된 SizeLimit와 포드에있는 모든 컨테이너의 메모리 제한 합계 사이의 최소값입니다. 기본값은 제한이 정의되지 않았 음을 의미하는 nil입니다. 추가 정보 : http://kubernetes.io/docs/user-guide/volumes#emptydir",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral": "Ephemeral은 클러스터 스토리지 드라이버 (알파 기능)에서 처리하는 볼륨을 나타냅니다. 볼륨의 수명주기는 볼륨을 정의하는 포드에 연결되어 있습니다. 볼륨은 포드가 시작되기 전에 생성되고 포드가 제거되면 삭제됩니다. a) 포드가 실행되는 동안에 만 볼륨이 필요한 경우, b) 스냅 샷에서 복원 또는 용량 추적과 같은 일반 볼륨의 기능이 필요한 경우, c) 스토리지 클래스를 통해 스토리지 드라이버가 지정된 경우, d) 스토리지 드라이버 PersistentVolumeClaim을 통한 동적 볼륨 프로비저닝을 지원합니다 (이 볼륨 유형과 PersistentVolumeClaim 간의 연결에 대한 자세한 내용은 EphemeralVolumeSource 참조). 개별 포드의 수명주기보다 오래 지속되는 볼륨에 대해 PersistentVolumeClaim 또는 공급 업체별 API 중 하나를 사용합니다. CSI 드라이버가 그런 방식으로 사용되는 경우 경량 로컬 임시 볼륨에 CSI를 사용하십시오. 자세한 내용은 드라이버 설명서를 참조하십시오. 포드는 두 유형의 임시 볼륨과 영구 볼륨을 동시에 사용할 수 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate": "볼륨을 프로비저닝하기 위해 독립형 PVC를 작성하는 데 사용됩니다. 이 EphemeralVolumeSource가 포함 된 포드가 PVC의 소유자가됩니다. 즉, PVC가 포드와 함께 삭제됩니다. PVC의 이름은`<pod name> -<volume name> `여기서`<volume name> `는`PodSpec.Volumes` 배열 항목의 이름입니다. 연결된 이름이 PVC에 유효하지 않은 경우 (예 : 너무 긴 경우) 포드 유효성 검사는 포드를 거부합니다. 팟 (Pod)이 소유하지 않은 이름을 가진 기존 PVC는 실수로 관련없는 볼륨을 사용하지 않도록 팟 (Pod)에 사용되지 * 않습니다 *. 그런 다음 관련없는 PVC가 제거 될 때까지 포드 시작이 차단됩니다. 이러한 사전 생성 된 PVC를 포드에서 사용하려는 경우 포드가 존재하면 PVC를 포드에 대한 소유자 참조로 업데이트해야합니다. 일반적으로이 작업은 필요하지 않지만 손상된 클러스터를 수동으로 재구성 할 때 유용 할 수 있습니다. 이 필드는 읽기 전용이며 생성 된 후에는 Kubernetes에서 PVC를 변경하지 않습니다. 필수 항목이며 nil이 아니어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata": "PVC를 만들 때 PVC에 복사 할 레이블 및 주석을 포함 할 수 있습니다. 다른 필드는 허용되지 않으며 유효성 검사 중에 거부됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec": "PersistentVolumeClaim의 사양입니다. 전체 콘텐츠는이 템플릿에서 생성 된 PVC에 변경되지 않고 복사됩니다. PersistentVolumeClaim에서와 동일한 필드가 여기에서도 유효합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.accessModes": "AccessModes에는 볼륨에 필요한 액세스 모드가 포함되어 있습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource": "이 필드는 다음 중 하나를 지정하는 데 사용할 수 있습니다. * 기존 VolumeSnapshot 객체 (snapshot.storage.k8s.io/VolumeSnapshot-베타) * 기존 PVC (PersistentVolumeClaim) * 데이터 채우기 (알파)를 순서대로 구현하는 기존 사용자 지정 리소스 / 객체 VolumeSnapshot 개체 유형을 사용하려면 적절한 기능 게이트를 활성화해야합니다 (VolumeSnapshotDataSource 또는 AnyVolumeDataSource) 프로비저닝 도구 또는 외부 컨트롤러가 지정된 데이터 소스를 지원할 수있는 경우 지정된 데이터 소스의 내용을 기반으로 새 볼륨을 생성합니다. 지정된 데이터 소스가 지원되지 않는 경우 볼륨이 생성되지 않고 오류가 이벤트로보고됩니다. 앞으로 더 많은 데이터 소스 유형을 지원할 계획이며 제공자의 동작이 변경 될 수 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.apiGroup": "APIGroup은 참조되는 리소스에 대한 그룹입니다. APIGroup이 지정되지 않은 경우 지정된 종류가 코어 API 그룹에 있어야합니다. 다른 타사 유형의 경우 APIGroup이 필요합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.kind": "Kind는 참조되는 리소스 유형입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.name": "이름은 참조되는 리소스의 이름입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources": "리소스는 볼륨에 있어야하는 최소 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector": "바인딩을 고려할 볼륨에 대한 레이블 쿼리입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.storageClassName": "클레임에 필요한 StorageClass의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.volumeMode": "volumeMode는 클레임에 필요한 볼륨 유형을 정의합니다. 클레임 사양에 포함되지 않은 경우 파일 시스템의 가치가 암시됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.volumeName": "VolumeName은이 클레임을 뒷받침하는 PersistentVolume에 대한 바인딩 참조입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc": "FC는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 파이버 채널 리소스를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.lun": "선택 사항 : FC 대상 LUN 번호",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.targetWWNs": "선택 사항 : FC 대상 월드 와이드 이름 (WWN)",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.wwids": "선택 사항 : FC 볼륨 월드 와이드 식별자 (wwids) wwids 또는 targetWWN과 lun의 조합을 설정해야하지만 둘 다 동시에 설정할 수는 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume": "FlexVolume은 exec 기반 플러그인을 사용하여 프로비저닝 / 연결된 일반 볼륨 리소스를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.driver": "Driver는이 볼륨에 사용할 드라이버의 이름입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본 파일 시스템은 FlexVolume 스크립트에 따라 다릅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.options": "옵션 : 추가 명령 옵션 (있는 경우).",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker": "Flocker는 kubelet의 호스트 머신에 연결된 Flocker 볼륨을 나타냅니다. 이것은 실행중인 Flocker 제어 서비스에 따라 다릅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker.properties.datasetName": "메타 데이터로 저장된 데이터 세트의 이름-&gt; Flocker 용 데이터 세트의 이름은 더 이상 사용되지 않는 것으로 간주되어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker.properties.datasetUUID": "데이터 세트의 UUID입니다. 이것은 Flocker 데이터 세트의 고유 식별자입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk": "GCEPersistentDisk는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 GCE 디스크 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다). 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.pdName": "GCE에있는 PD 리소스의 고유 이름입니다. GCE에서 디스크를 식별하는 데 사용됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo": "GitRepo는 특정 개정판의 git 저장소를 나타냅니다. DEPRECATED : GitRepo는 더 이상 사용되지 않습니다. git 저장소로 컨테이너를 프로비저닝하려면 git을 사용하여 저장소를 복제하는 InitContainer에 EmptyDir을 마운트 한 다음 Pod의 컨테이너에 EmptyDir을 마운트합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.directory": "대상 디렉토리 이름. &#39;..&#39;을 포함하거나 시작하지 않아야합니다. 만약 &#39;.&#39; 제공되면 볼륨 디렉토리는 git 저장소가됩니다. 그렇지 않으면 지정된 경우 볼륨은 지정된 이름의 하위 디렉토리에 git 저장소를 포함합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.repository": "저장소 URL",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.revision": "지정된 개정에 대한 커밋 해시입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs": "Glusterfs는 포드의 수명을 공유하는 호스트의 Glusterfs 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.endpoints": "EndpointsName은 Glusterfs 토폴로지를 자세히 설명하는 엔드 포인트 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.path": "Path는 Glusterfs 볼륨 경로입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.readOnly": "여기서 ReadOnly는 Glusterfs 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath": "HostPath는 컨테이너에 직접 노출되는 호스트 시스템의 기존 파일 또는 디렉터리를 나타냅니다. 이것은 일반적으로 호스트 시스템을 볼 수있는 시스템 에이전트 또는 기타 권한있는 항목에 사용됩니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath.properties.path": "호스트의 디렉토리 경로입니다. 경로가 심볼릭 링크이면 실제 경로에 대한 링크를 따릅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath.properties.type": "HostPath 볼륨의 유형 기본값은 &quot;&quot;입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi": "ISCSI는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 ISCSI 디스크 리소스를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/iscsi/README.md",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthDiscovery": "iSCSI 검색 CHAP 인증 지원 여부",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthSession": "iSCSI 세션 CHAP 인증 지원 여부",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.initiatorName": "사용자 지정 iSCSI 이니시에이터 이름. initiatorName이 iscsiInterface와 동시에 지정되면 새로운 iSCSI 인터페이스<target portal> :<volume name> 연결을 위해 생성됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.iqn": "대상 iSCSI 정규화 이름.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.iscsiInterface": "iSCSI 전송을 사용하는 iSCSI 인터페이스 이름입니다. 기본값은 &#39;default&#39;(tcp)입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.lun": "iSCSI 대상 LUN 번호.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.portals": "iSCSI 대상 포털 목록. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.targetPortal": "iSCSI 대상 포털. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.name": "볼륨의 이름. DNS_LABEL이어야하며 포드 내에서 고유해야합니다. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs": "NFS는 포드의 수명을 공유하는 호스트의 NFS 마운트를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.path": "NFS 서버에서 내 보낸 경로입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.readOnly": "여기서 ReadOnly는 읽기 전용 권한으로 NFS 내보내기를 강제로 마운트합니다. 기본값은 false입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.server": "Server는 NFS 서버의 호스트 이름 또는 IP 주소입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim": "PersistentVolumeClaimVolumeSource는 동일한 네임 스페이스에있는 PersistentVolumeClaim에 대한 참조를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.claimName": "ClaimName은이 볼륨을 사용하는 pod와 동일한 네임 스페이스에있는 PersistentVolumeClaim의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.readOnly": "VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk": "PhotonPersistentDisk는 kubelets 호스트 머신에 연결되고 마운트 된 PhotonController 영구 디스크를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.pdID": "Photon Controller 영구 디스크를 식별하는 ID",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume": "PortworxVolume은 kubelets 호스트 머신에 연결되고 마운트 된 portworx 볼륨을 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.fsType": "FSType은 마운트 할 파일 시스템 유형을 나타냅니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.volumeID": "VolumeID는 Portworx 볼륨을 고유하게 식별합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected": "하나의 리소스 비밀, 구성 맵 및 하향 API에 대한 항목",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.defaultMode": "기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources": "볼륨 예측 목록",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items": "지원되는 다른 볼륨 유형과 함께 투영 될 수있는 투영",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap": "프로젝트 할 configMap 데이터에 대한 정보",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI": "프로젝트 할 downwardAPI 데이터에 대한 정보",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items": "Items는 DownwardAPIVolume 파일 목록입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트는 0000과 0777 사이의 8 진수 값이거나 0과 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret": "프로젝트 할 비밀 데이터에 대한 정보",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken": "프로젝트 할 serviceAccountToken 데이터에 대한 정보",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.audience": "청중은 토큰의 의도 된 청중입니다. 토큰 수신자는 토큰 대상에 지정된 식별자로 자신을 식별해야하며 그렇지 않으면 토큰을 거부해야합니다. 대상은 기본적으로 apiserver의 식별자입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.expirationSeconds": "ExpirationSeconds는 서비스 계정 토큰의 요청 된 유효 기간입니다. 토큰이 만료에 가까워지면 kubelet 볼륨 플러그인이 사전에 서비스 계정 토큰을 교체합니다. 토큰이 수명의 80 % 이상이거나 토큰이 24 시간 이상인 경우 kubelet은 토큰 순환을 시작합니다. 기본값은 1 시간이며 최소 10 분이어야합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.path": "경로는 토큰을 투영 할 파일의 마운트 지점에 상대적인 경로입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte": "Quobyte는 포드의 수명을 공유하는 호스트의 Quobyte 마운트를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.group": "볼륨 액세스를 매핑 할 그룹 기본값은 그룹 없음입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.readOnly": "여기서 ReadOnly는 Quobyte 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.registry": "레지스트리는 볼륨의 중앙 레지스트리 역할을하는 호스트 : 포트 쌍 (여러 항목은 쉼표로 구분됨)으로 문자열로 지정된 단일 또는 다중 Quobyte Registry 서비스를 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.tenant": "백엔드에서 주어진 Quobyte 볼륨을 소유하는 테넌트는 동적으로 프로비저닝 된 Quobyte 볼륨과 함께 사용되며 값은 플러그인에 의해 설정됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.user": "볼륨 액세스를 기본값에 매핑하는 사용자를 serivceaccount 사용자에게",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.volume": "Volume은 이미 생성 된 Quobyte 볼륨을 이름으로 참조하는 문자열입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd": "RBD는 포드의 수명을 공유하는 호스트의 Rados 블록 장치 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#rbd",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.image": "라도 스 이미지 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.keyring": "키링은 RBDUser의 키링 경로입니다. 기본값은 / etc / ceph / keyring입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.monitors": "Ceph 모니터 모음. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.pool": "라도 스 풀 이름. 기본값은 rbd입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.user": "rados 사용자 이름입니다. 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO": "ScaleIO는 Kubernetes 노드에 연결되고 마운트 된 ScaleIO 영구 볼륨을 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본값은 &quot;xfs&quot;입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.gateway": "ScaleIO API 게이트웨이의 호스트 주소입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.protectionDomain": "구성된 스토리지에 대한 ScaleIO 보호 도메인의 이름입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.sslEnabled": "게이트웨이와의 SSL 통신을 활성화 / 비활성화하는 플래그, 기본값은 false",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.storageMode": "볼륨의 스토리지가 ThickProvisioned인지 ThinProvisioned인지 여부를 나타냅니다. 기본값은 ThinProvisioned입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.storagePool": "보호 도메인과 연결된 ScaleIO 스토리지 풀입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.system": "ScaleIO에 구성된 스토리지 시스템의 이름입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.volumeName": "이 볼륨 소스와 연결된 ScaleIO 시스템에 이미 생성 된 볼륨의 이름입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret": "Secret은이 볼륨을 채워야하는 비밀을 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.secretName": "사용할 팟 (Pod) 네임 스페이스의 시크릿 이름입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos": "StorageOS는 Kubernetes 노드에 연결되고 마운트 된 StorageOS 볼륨을 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.volumeName": "VolumeName은 사람이 읽을 수있는 StorageOS 볼륨의 이름입니다. 볼륨 이름은 네임 스페이스 내에서만 고유합니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.volumeNamespace": "VolumeNamespace는 StorageOS 내의 볼륨 범위를 지정합니다. 네임 스페이스를 지정하지 않으면 Pod의 네임 스페이스가 사용됩니다. 이를 통해보다 긴밀한 통합을 위해 Kubernetes 이름 범위를 StorageOS 내에서 미러링 할 수 있습니다. 기본 동작을 재정의하려면 VolumeName을 임의의 이름으로 설정합니다. StorageOS 내에서 네임 스페이스를 사용하지 않는 경우 &quot;default&quot;로 설정하십시오. StorageOS 내에 존재하지 않는 네임 스페이스가 생성됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume": "VsphereVolume은 kubelets 호스트 시스템에 연결되고 마운트 된 vSphere 볼륨을 나타냅니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyID": "StoragePolicyName과 연결된 SPBM (스토리지 정책 기반 관리) 프로필 ID입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyName": "SPBM (스토리지 정책 기반 관리) 프로필 이름입니다.",
    "%Deployment.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.volumePath": "vSphere 볼륨 vmdk를 식별하는 경로",
    "%Deployment.json.properties.status": "가장 최근에 관찰 된 배포 상태입니다.",
    "%Deployment.json.properties.status.properties.availableReplicas": "이 배포가 대상으로하는 사용 가능한 총 포드 수 (최소한 minReadySeconds 동안 준비 됨)입니다.",
    "%Deployment.json.properties.status.properties.collisionCount": "배포에 대한 해시 충돌 수입니다. 배포 컨트롤러는 최신 ReplicaSet의 이름을 만들어야 할 때이 필드를 충돌 방지 메커니즘으로 사용합니다.",
    "%Deployment.json.properties.status.properties.conditions": "배포의 현재 상태에 대한 사용 가능한 최신 관찰을 나타냅니다.",
    "%Deployment.json.properties.status.properties.conditions.items": "DeploymentCondition은 특정 지점에서의 배포 상태를 설명합니다.",
    "%Deployment.json.properties.status.properties.conditions.items.properties.lastTransitionTime": "마지막으로 조건이 한 상태에서 다른 상태로 전환 된 시간입니다.",
    "%Deployment.json.properties.status.properties.conditions.items.properties.lastUpdateTime": "이 조건이 마지막으로 업데이트 된 시간입니다.",
    "%Deployment.json.properties.status.properties.conditions.items.properties.message": "전환에 대한 세부 정보를 나타내는 사람이 읽을 수있는 메시지입니다.",
    "%Deployment.json.properties.status.properties.conditions.items.properties.reason": "조건의 마지막 전환 이유입니다.",
    "%Deployment.json.properties.status.properties.conditions.items.properties.status": "조건의 상태는 True, False, Unknown 중 하나입니다.",
    "%Deployment.json.properties.status.properties.conditions.items.properties.type": "배포 조건 유형입니다.",
    "%Deployment.json.properties.status.properties.observedGeneration": "배포 컨트롤러에서 관찰 한 생성입니다.",
    "%Deployment.json.properties.status.properties.readyReplicas": "이 배포가 대상으로하는 총 준비 포드 수입니다.",
    "%Deployment.json.properties.status.properties.replicas": "이 배포에서 대상으로하는 종료되지 않은 포드의 총 수입니다 (레이블이 선택기와 일치 함).",
    "%Deployment.json.properties.status.properties.unavailableReplicas": "이 배포가 대상으로하는 사용할 수없는 포드의 총 수입니다. 이는 배포에서 사용 가능한 용량을 100 % 확보하는 데 여전히 필요한 총 포드 수입니다. 실행 중이지만 아직 사용할 수없는 포드이거나 아직 생성되지 않은 포드 일 수 있습니다.",
    "%Deployment.json.properties.status.properties.updatedReplicas": "원하는 템플릿 사양이있는이 배포에서 대상으로하는 종료되지 않은 포드의 총 수입니다.",
    "%Pod.json": "Pod는 호스트에서 실행할 수있는 컨테이너 모음입니다. 이 리소스는 클라이언트에 의해 생성되고 호스트에 예약됩니다.",
    "%Pod.json.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%Pod.json.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%Pod.json.properties.metadata": "표준 개체의 메타 데이터. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    "%Pod.json.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%Pod.json.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%Pod.json.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%Pod.json.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%Pod.json.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%Pod.json.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%Pod.json.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%Pod.json.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%Pod.json.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%Pod.json.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%Pod.json.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%Pod.json.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%Pod.json.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Pod.json.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%Pod.json.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%Pod.json.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%Pod.json.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%Pod.json.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%Pod.json.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%Pod.json.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%Pod.json.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Pod.json.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%Pod.json.properties.spec": "pod의 원하는 동작에 대한 사양입니다. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%Pod.json.properties.spec.properties.activeDeadlineSeconds": "시스템이 실패로 표시하고 연관된 컨테이너를 강제 종료하기 전에 팟 (Pod)이 StartTime에 상대적으로 노드에서 활성화 될 수있는 선택적 기간 (초)입니다. 값은 양의 정수 여야합니다.",
    "%Pod.json.properties.spec.properties.affinity": "지정된 경우 포드의 예약 제약",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity": "포드에 대한 노드 선호도 예약 규칙을 설명합니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 노드가 대응하는 matchExpressions와 일치하면 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "빈 선호 스케줄링 용어는 암시 적 가중치가 0 인 모든 개체와 일치합니다 (즉, 작동하지 않음). null 선호 스케줄링 용어는 객체와 일치하지 않습니다 (즉, 작동하지 않음).",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference": "해당 가중치와 관련된 노드 선택기 용어입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 nodeSelectorTerm 일치와 관련된 가중치입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms": "필수입니다. 노드 선택기 용어 목록입니다. 용어는 OR로 연결됩니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items": "null 또는 빈 노드 선택기 용어는 개체와 일치하지 않습니다. 이들의 요구 사항은 AND입니다. TopologySelectorTerm 유형은 NodeSelectorTerm의 하위 집합을 구현합니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%Pod.json.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity": "포드 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 배치).",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 및 노드가 대응하는 podAffinityTerm과 일치하는 포드를 갖는 경우 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity": "포드 반 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 두지 않음).",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 반친 화성 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치의 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 반친 화성 표현식 등)을 충족하는 각 노드에 대해 다음 요소를 반복하여 합계를 계산합니다. 이 필드와 노드에 해당 podAffinityTerm과 일치하는 포드가있는 경우 합계에 &quot;weight&quot;를 추가합니다. 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 반친 화성 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 반친 화성 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않는 경우 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%Pod.json.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%Pod.json.properties.spec.properties.automountServiceAccountToken": "AutomountServiceAccountToken은 서비스 계정 토큰을 자동으로 마운트해야하는지 여부를 나타냅니다.",
    "%Pod.json.properties.spec.properties.containers": "포드에 속한 컨테이너 목록입니다. 현재 컨테이너를 추가하거나 제거 할 수 없습니다. 포드에는 컨테이너가 하나 이상 있어야합니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.containers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Pod.json.properties.spec.properties.containers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Pod.json.properties.spec.properties.containers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%Pod.json.properties.spec.properties.containers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%Pod.json.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%Pod.json.properties.spec.properties.containers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%Pod.json.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%Pod.json.properties.spec.properties.containers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.containers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.containers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Pod.json.properties.spec.properties.containers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Pod.json.properties.spec.properties.containers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업보다 데이터를로드하거나 캐시를 워밍하는 데 오랜 시간이 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.containers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%Pod.json.properties.spec.properties.containers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.dnsConfig": "포드의 DNS 매개 변수를 지정합니다. 여기에 지정된 매개 변수는 DNSPolicy를 기반으로 생성 된 DNS 구성에 병합됩니다.",
    "%Pod.json.properties.spec.properties.dnsConfig.properties.nameservers": "DNS 이름 서버 IP 주소 목록입니다. 이는 DNSPolicy에서 생성 된 기본 네임 서버에 추가됩니다. 중복 된 네임 서버는 제거됩니다.",
    "%Pod.json.properties.spec.properties.dnsConfig.properties.options": "DNS 확인자 옵션 목록입니다. 이것은 DNSPolicy에서 생성 된 기본 옵션과 병합됩니다. 중복 된 항목은 제거됩니다. 옵션에 제공된 해결 옵션은 기본 DNSPolicy에 표시되는 옵션보다 우선합니다.",
    "%Pod.json.properties.spec.properties.dnsConfig.properties.options.items": "PodDNSConfigOption은 포드의 DNS 확인자 옵션을 정의합니다.",
    "%Pod.json.properties.spec.properties.dnsConfig.properties.options.items.properties.name": "필수입니다.",
    "%Pod.json.properties.spec.properties.dnsConfig.properties.searches": "호스트 이름 조회를위한 DNS 검색 도메인 목록입니다. 이는 DNSPolicy에서 생성 된 기본 검색 경로에 추가됩니다. 중복 된 검색 경로는 제거됩니다.",
    "%Pod.json.properties.spec.properties.dnsPolicy": "포드에 대한 DNS 정책을 설정합니다. 기본값은 &quot;ClusterFirst&quot;입니다. 유효한 값은 &#39;ClusterFirstWithHostNet&#39;, &#39;ClusterFirst&#39;, &#39;Default&#39;또는 &#39;None&#39;입니다. DNSConfig에 제공된 DNS 매개 변수는 DNSPolicy로 선택한 정책과 병합됩니다. hostNetwork와 함께 DNS 옵션을 설정하려면 DNS 정책을 명시 적으로 &#39;ClusterFirstWithHostNet&#39;으로 지정해야합니다.",
    "%Pod.json.properties.spec.properties.enableServiceLinks": "EnableServiceLinks는 서비스에 대한 정보를 Docker 링크의 구문과 일치하는 포드의 환경 변수에 삽입해야하는지 여부를 나타냅니다. 선택 사항 : 기본값은 true입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers": "이 포드에서 실행되는 임시 컨테이너 목록입니다. 임시 컨테이너는 디버깅과 같은 사용자 시작 작업을 수행하기 위해 기존 포드에서 실행될 수 있습니다. 이 목록은 포드를 만들 때 지정할 수 없으며 포드 사양을 업데이트하여 수정할 수 없습니다. 기존 포드에 임시 컨테이너를 추가하려면 포드의 ephemeralcontainers 하위 리소스를 사용합니다. 이 필드는 알파 수준이며 EphemeralContainers 기능을 활성화하는 서버에서만 적용됩니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items": "EphemeralContainer는 디버깅과 같이 사용자가 시작한 활동을 위해 기존 포드에 임시로 추가 할 수있는 컨테이너입니다. 임시 컨테이너에는 리소스 또는 예약 보장이 없으며 종료시 또는 포드가 제거되거나 다시 시작될 때 다시 시작되지 않습니다. 임시 컨테이너로 인해 포드가 리소스 할당을 초과하는 경우 포드가 제거 될 수 있습니다. 포드 사양을 직접 업데이트하여 임시 컨테이너를 추가 할 수 없습니다. 포드의 ephemeralcontainers 하위 리소스를 통해 추가해야하며 추가되면 포드 사양에 나타납니다. 이것은 EphemeralContainers 기능 플래그로 활성화 된 알파 기능입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle": "임시 컨테이너에는 수명주기가 허용되지 않습니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.name": "DNS_LABEL로 지정된 임시 컨테이너의 이름입니다. 이 이름은 모든 컨테이너, 초기화 컨테이너 및 임시 컨테이너간에 고유해야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.ports": "임시 컨테이너에는 포트가 허용되지 않습니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.resources": "임시 컨테이너에는 리소스가 허용되지 않습니다. 임시 컨테이너는 포드에 이미 할당 된 예비 리소스를 사용합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext": "임시 컨테이너에는 SecurityContext가 허용되지 않습니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.targetContainerName": "설정된 경우이 임시 컨테이너가 대상으로하는 PodSpec의 컨테이너 이름입니다. 임시 컨테이너는이 컨테이너의 네임 스페이스 (IPC, PID 등)에서 실행됩니다. 설정되지 않은 경우 팟 (Pod)에 대해 공유되는 네임 스페이스에서 임시 컨테이너가 실행됩니다. 컨테이너 런타임은이 기능을 지원해야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%Pod.json.properties.spec.properties.ephemeralContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.hostAliases": "HostAliases는 지정된 경우 포드의 호스트 파일에 삽입 될 호스트 및 IP의 선택적 목록입니다. 이는 hostNetwork가 아닌 포드에만 유효합니다.",
    "%Pod.json.properties.spec.properties.hostAliases.items": "HostAlias는 포드의 호스트 파일에 항목으로 삽입 될 IP와 호스트 이름 간의 매핑을 보유합니다.",
    "%Pod.json.properties.spec.properties.hostAliases.items.properties.hostnames": "위 IP 주소의 호스트 이름입니다.",
    "%Pod.json.properties.spec.properties.hostAliases.items.properties.ip": "호스트 파일 항목의 IP 주소입니다.",
    "%Pod.json.properties.spec.properties.hostIPC": "호스트의 ipc 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%Pod.json.properties.spec.properties.hostNetwork": "이 포드에 대해 요청 된 호스트 네트워킹입니다. 호스트의 네트워크 네임 스페이스를 사용합니다. 이 옵션을 설정하면 사용할 포트를 지정해야합니다. 기본값은 false입니다.",
    "%Pod.json.properties.spec.properties.hostPID": "호스트의 pid 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%Pod.json.properties.spec.properties.hostname": "포드의 호스트 이름을 지정합니다. 지정하지 않으면 포드의 호스트 이름이 시스템 정의 값으로 설정됩니다.",
    "%Pod.json.properties.spec.properties.imagePullSecrets": "ImagePullSecrets는이 PodSpec에서 사용하는 이미지를 가져 오는 데 사용할 동일한 네임 스페이스의 보안 비밀에 대한 선택적 참조 목록입니다. 지정된 경우 이러한 비밀은 사용할 개별 풀러 구현에 전달됩니다. 예를 들어 docker의 경우 DockerConfig 유형 비밀 만 적용됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
    "%Pod.json.properties.spec.properties.imagePullSecrets.items": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Pod.json.properties.spec.properties.imagePullSecrets.items.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.initContainers": "포드에 속한 초기화 컨테이너 목록입니다. Init 컨테이너는 컨테이너가 시작되기 전에 순서대로 실행됩니다. 초기화 컨테이너가 실패하면 포드는 실패한 것으로 간주되며 restartPolicy에 따라 처리됩니다. 초기화 컨테이너 또는 일반 컨테이너의 이름은 모든 컨테이너에서 고유해야합니다. Init 컨테이너에는 수명주기 작업, 준비 상태 프로브, 활성 상태 프로브 또는 시작 프로브가 없을 수 있습니다. init 컨테이너의 resourceRequirements는 각 리소스 유형에 대해 가장 높은 요청 / 한계를 찾은 다음 해당 값의 최대 값 또는 일반 컨테이너의 합계를 사용하여 스케줄링 중에 고려됩니다. 제한은 비슷한 방식으로 초기화 컨테이너에 적용됩니다. Init 컨테이너는 현재 추가하거나 제거 할 수 없습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
    "%Pod.json.properties.spec.properties.initContainers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업보다 데이터를로드하거나 캐시를 워밍하는 데 오랜 시간이 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%Pod.json.properties.spec.properties.initContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.spec.properties.nodeName": "NodeName은이 포드를 특정 노드에 예약하기위한 요청입니다. 비어 있지 않은 경우 스케줄러는 리소스 요구 사항에 적합하다고 가정하여이 포드를 해당 노드에 예약합니다.",
    "%Pod.json.properties.spec.properties.nodeSelector": "NodeSelector는 포드가 노드에 맞도록 true 여야하는 선택기입니다. 포드가 해당 노드에서 예약되도록하려면 노드의 라벨과 일치해야하는 선택기입니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
    "%Pod.json.properties.spec.properties.overhead": "오버 헤드는 주어진 RuntimeClass에 대한 포드 실행과 관련된 리소스 오버 헤드를 나타냅니다. 이 필드는 RuntimeClass 승인 컨트롤러에 의해 승인 시간에 자동으로 채워집니다. RuntimeClass 승인 컨트롤러가 사용 설정된 경우 Pod 생성 요청에 오버 헤드를 설정하면 안됩니다. RuntimeClass 승인 컨트롤러는 오버 헤드가 이미 설정된 포드 생성 요청을 거부합니다. RuntimeClass가 PodSpec에서 구성되고 선택되면 오버 헤드는 해당 RuntimeClass에 정의 된 값으로 설정됩니다. 그렇지 않으면 설정되지 않은 상태로 유지되고 0으로 처리됩니다. 추가 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/688-pod-overhead/README.md이 필드는 Kubernetes v1.16부터 알파 수준이며 PodOverhead 기능을 활성화하는 서버에서 인정합니다.",
    "%Pod.json.properties.spec.properties.preemptionPolicy": "PreemptionPolicy는 우선 순위가 낮은 포드를 선점하기위한 정책입니다. Never 중 하나, PreemptLowerPriority. 설정되지 않은 경우 기본값은 PreemptLowerPriority입니다. 이 필드는 베타 수준이며 NonPreemptingPriority 기능 게이트에 의해 제어됩니다.",
    "%Pod.json.properties.spec.properties.priority": "우선 순위 값입니다. 다양한 시스템 구성 요소가이 필드를 사용하여 포드의 우선 순위를 찾습니다. Priority Admission Controller가 활성화되면 사용자가이 필드를 설정할 수 없습니다. 승인 컨트롤러는 PriorityClassName에서이 필드를 채 웁니다. 값이 높을수록 우선 순위가 높아집니다.",
    "%Pod.json.properties.spec.properties.priorityClassName": "지정된 경우 포드의 우선 순위를 나타냅니다. &quot;system-node-critical&quot;및 &quot;system-cluster-critical&quot;은 가장 높은 우선 순위를 나타내는 두 개의 특수 키워드이며 전자가 가장 높은 우선 순위입니다. 다른 이름은 해당 이름으로 PriorityClass 개체를 만들어 정의해야합니다. 지정되지 않은 경우 포드 우선 순위는 기본값이되거나 기본값이없는 경우 0이됩니다.",
    "%Pod.json.properties.spec.properties.readinessGates": "지정된 경우 모든 준비 게이트에서 포드 준비 상태를 평가합니다. 모든 컨테이너가 준비되고 준비 게이트에 지정된 모든 조건의 상태가 &quot;True&quot;이면 포드가 준비된 것입니다. 자세한 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/ 580-pod-readiness-gates / README.md",
    "%Pod.json.properties.spec.properties.readinessGates.items": "PodReadinessGate에는 포드 조건에 대한 참조가 포함됩니다.",
    "%Pod.json.properties.spec.properties.readinessGates.items.properties.conditionType": "ConditionType은 유형이 일치하는 pod의 조건 목록에있는 조건을 나타냅니다.",
    "%Pod.json.properties.spec.properties.restartPolicy": "포드 내의 모든 컨테이너에 대한 정책을 다시 시작합니다. Always, OnFailure, Never 중 하나입니다. 기본값은 항상입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
    "%Pod.json.properties.spec.properties.runtimeClassName": "RuntimeClassName은 node.k8s.io 그룹의 RuntimeClass 객체를 참조하며이 pod를 실행하는 데 사용해야합니다. RuntimeClass 리소스가 명명 된 클래스와 일치하지 않으면 포드가 실행되지 않습니다. 설정되지 않거나 비어있는 경우 기본 런타임 핸들러를 사용하는 비어있는 정의가있는 암시 적 클래스 인 &quot;레거시&quot;RuntimeClass가 사용됩니다. 추가 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/585-runtime-class/README.md 이것은 Kubernetes v1.14의 베타 기능입니다.",
    "%Pod.json.properties.spec.properties.schedulerName": "지정된 경우 지정된 스케줄러가 포드를 발송합니다. 지정하지 않으면 포드가 기본 스케줄러에 의해 발송됩니다.",
    "%Pod.json.properties.spec.properties.securityContext": "SecurityContext는 포드 수준 보안 속성 및 공통 컨테이너 설정을 보유합니다. 옵션 : 기본값은 비어 있습니다. 각 필드의 기본값은 유형 설명을 참조하십시오.",
    "%Pod.json.properties.spec.properties.securityContext.properties.fsGroup": "포드의 모든 컨테이너에 적용되는 특수 보조 그룹입니다. 일부 볼륨 유형을 사용하면 Kubelet이 포드가 소유 할 해당 볼륨의 소유권을 변경할 수 있습니다. 1. 소유 GID는 FSGroup이됩니다. 2. setgid 비트가 설정됩니다 (볼륨에 생성 된 새 파일은 FSGroup이 소유 함) 3 권한 비트는 rw-rw ----와 OR로 연결됩니다. 설정되지 않은 경우 Kubelet은 볼륨의 소유권 및 권한을 수정하지 않습니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.fsGroupChangePolicy": "fsGroupChangePolicy는 Pod 내부에 노출되기 전에 볼륨의 소유권 및 권한을 변경하는 동작을 정의합니다. 이 필드는 fsGroup 기반 소유권 (및 권한)을 지원하는 볼륨 유형에만 적용됩니다. secret, configmaps 및 emptydir과 같은 임시 볼륨 유형에는 영향을 미치지 않습니다. 유효한 값은 &quot;OnRootMismatch&quot;및 &quot;Always&quot;입니다. 지정하지 않으면 기본값은 &quot;항상&quot;입니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.seLinuxOptions": "모든 컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.seccompProfile": "이 포드의 컨테이너에서 사용할 seccomp 옵션입니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.supplementalGroups": "컨테이너의 기본 GID와 함께 각 컨테이너에서 실행되는 첫 번째 프로세스에 적용된 그룹 목록입니다. 지정하지 않으면 컨테이너에 그룹이 추가되지 않습니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.sysctls": "Sysctls에는 포드에 사용되는 네임 스페이스가 지정된 sysctls 목록이 있습니다. 컨테이너 런타임에 의해 지원되지 않는 sysctls가있는 포드가 시작되지 않을 수 있습니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.sysctls.items": "Sysctl은 설정할 커널 매개 변수를 정의합니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.sysctls.items.properties.name": "설정할 속성의 이름",
    "%Pod.json.properties.spec.properties.securityContext.properties.sysctls.items.properties.value": "설정할 속성 값",
    "%Pod.json.properties.spec.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 컨테이너의 SecurityContext 내의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%Pod.json.properties.spec.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Pod.json.properties.spec.properties.serviceAccountName": "ServiceAccountName은이 포드를 실행하는 데 사용할 ServiceAccount의 이름입니다. 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
    "%Pod.json.properties.spec.properties.setHostnameAsFQDN": "true이면 포드의 호스트 이름이 리프 이름 (기본값)이 아닌 포드의 FQDN으로 구성됩니다. Linux 컨테이너에서 이는 커널의 hostname 필드 (struct utsname의 nodename 필드)에 FQDN을 설정하는 것을 의미합니다. Windows 컨테이너에서 이는 레지스트리 키 HKEY_LOCAL_MACHINE \\ SYSTEM \\ CurrentControlSet \\ Services \\ Tcpip \\ Parameters에 대한 호스트 이름의 레지스트리 값을 FQDN으로 설정하는 것을 의미합니다. 포드에 FQDN이 없으면 아무 효과가 없습니다. 기본값은 false입니다.",
    "%Pod.json.properties.spec.properties.shareProcessNamespace": "pod의 모든 컨테이너간에 단일 프로세스 네임 스페이스를 공유합니다. 이것이 설정되면 컨테이너는 동일한 포드의 다른 컨테이너에서 프로세스를보고 신호를 보낼 수 있으며 각 컨테이너의 첫 번째 프로세스에는 PID 1이 할당되지 않습니다. HostPID와 ShareProcessNamespace를 둘 다 설정할 수는 없습니다. 선택 사항 : 기본값은 false입니다.",
    "%Pod.json.properties.spec.properties.subdomain": "지정된 경우 정규화 된 포드 호스트 이름은 &quot;<hostname> .<subdomain> .<pod namespace> .svc.<cluster domain> &quot;. 지정하지 않으면 포드에 도메인 이름이 전혀 없습니다.",
    "%Pod.json.properties.spec.properties.terminationGracePeriodSeconds": "포드가 정상적으로 종료되어야하는 선택적 기간 (초)입니다. 삭제 요청시 감소 될 수 있습니다. 값은 음이 아닌 정수 여야합니다. 값 0은 즉시 삭제를 나타냅니다. 이 값이 nil이면 기본 유예 기간이 대신 사용됩니다. 유예 기간은 포드에서 실행중인 프로세스가 종료 신호를 보낸 후의 기간 (초)과 프로세스가 강제 종료 신호로 중단되는 시간입니다. 이 값을 프로세스의 예상 정리 시간보다 길게 설정하십시오. 기본값은 30 초입니다.",
    "%Pod.json.properties.spec.properties.tolerations": "지정된 경우 포드의 허용 오차입니다.",
    "%Pod.json.properties.spec.properties.tolerations.items": "이 Toleration이 연결된 포드는 트리플과 일치하는 모든 오염을 견뎌냅니다.<key,value,effect> 일치 연산자 사용<operator> .",
    "%Pod.json.properties.spec.properties.tolerations.items.properties.effect": "효과는 일치시킬 오염 효과를 나타냅니다. 비어 있음은 모든 오염 효과와 일치 함을 의미합니다. 지정된 경우 허용되는 값은 NoSchedule, PreferNoSchedule 및 NoExecute입니다.",
    "%Pod.json.properties.spec.properties.tolerations.items.properties.key": "키는 관용이 적용되는 오염 키입니다. 비어 있음은 모든 오염 키와 일치 함을 의미합니다. 키가 비어 있으면 연산자가 존재해야합니다. 이 조합은 모든 값과 모든 키와 일치 함을 의미합니다.",
    "%Pod.json.properties.spec.properties.tolerations.items.properties.operator": "연산자는 값에 대한 키의 관계를 나타냅니다. 유효한 연산자는 Exists 및 Equal입니다. 기본값은 Equal입니다. Exists는 값에 대한 와일드 카드와 동일하므로 포드가 특정 카테고리의 모든 taint를 허용 할 수 있습니다.",
    "%Pod.json.properties.spec.properties.tolerations.items.properties.tolerationSeconds": "TolerationSeconds는 허용 범위 (NoExecute가 유효해야하며 그렇지 않으면이 필드는 무시 됨)가 taint를 허용하는 기간을 나타냅니다. 기본적으로 설정되어 있지 않으므로 오염을 영원히 견딜 수 있습니다 (제거하지 마십시오). 0 및 음수 값은 시스템에서 0 (즉시 제거)으로 처리됩니다.",
    "%Pod.json.properties.spec.properties.tolerations.items.properties.value": "Value는 허용치가 일치하는 오염 값입니다. 연산자가 Exists이면 값은 비어 있어야하고 그렇지 않으면 일반 문자열이어야합니다.",
    "%Pod.json.properties.spec.properties.topologySpreadConstraints": "TopologySpreadConstraints는 pod 그룹이 토폴로지 도메인에 어떻게 분산되어야하는지 설명합니다. 스케줄러는 제약 조건을 준수하는 방식으로 포드를 예약합니다. 모든 topologySpreadConstraint는 AND 처리됩니다.",
    "%Pod.json.properties.spec.properties.topologySpreadConstraints.items": "TopologySpreadConstraint는 지정된 토폴로지간에 일치하는 포드를 분산하는 방법을 지정합니다.",
    "%Pod.json.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector": "LabelSelector는 일치하는 포드를 찾는 데 사용됩니다. 이 라벨 선택기와 일치하는 포드는 해당 토폴로지 도메인의 포드 수를 결정하기 위해 계산됩니다.",
    "%Pod.json.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Pod.json.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Pod.json.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Pod.json.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Pod.json.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Pod.json.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Pod.json.properties.spec.properties.topologySpreadConstraints.items.properties.maxSkew": "MaxSkew는 포드가 고르지 않게 분산 될 수있는 정도를 설명합니다. `whenUnsatisfiable = DoNotSchedule` 인 경우 대상 토폴로지에서 일치하는 포드 수와 전역 최소값간에 허용되는 최대 차이입니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 1/1/0으로 확산되는 포드 : | zone1 | zone2 | zone3 | | P | P | | -MaxSkew가 1이면 들어오는 포드는 zone3에 1/1/1이되도록 예약 할 수 있습니다. zone1 (zone2)로 예약하면 zone1 (zone2)의 ActualSkew (2-0)가 MaxSkew (1)을 위반하게됩니다. -MaxSkew가 2이면 들어오는 포드를 모든 영역에 예약 할 수 있습니다. `whenUnsatisfiable = ScheduleAnyway` 인 경우이를 충족하는 토폴로지에 더 높은 우선 순위를 부여하는 데 사용됩니다. 필수 필드입니다. 기본값은 1이고 0은 허용되지 않습니다.",
    "%Pod.json.properties.spec.properties.topologySpreadConstraints.items.properties.topologyKey": "TopologyKey는 노드 레이블의 키입니다. 이 키와 동일한 값이있는 레이블이있는 노드는 동일한 토폴로지에있는 것으로 간주됩니다. 우리는 각각을 고려합니다<key, value> &quot;버킷&quot;으로 각 버킷에 균형 잡힌 수의 포드를 넣으십시오. 필수 필드입니다.",
    "%Pod.json.properties.spec.properties.topologySpreadConstraints.items.properties.whenUnsatisfiable": "WhenUnsatisfiable은 스프레드 제약 조건을 충족하지 않는 경우 포드를 처리하는 방법을 나타냅니다. -DoNotSchedule (기본값)은 스케줄러가 스케줄하지 않도록 지시합니다. -ScheduleAnyway는 스케줄러에게 임의의 위치에서 포드를 예약하도록 지시하지만, 왜곡을 줄이는 데 도움이되는 토폴로지에 더 높은 우선 순위를 부여합니다. 해당 포드에 대해 가능한 모든 노드 할당이 일부 토폴로지에서 &quot;MaxSkew&quot;를 위반하는 경우에만 수신 포드에 대한 제약 조건이 &quot;불만족&quot;으로 간주됩니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 3/1/1로 확산되는 포드 : | zone1 | zone2 | zone3 | | PPP | P | P | WhenUnsatisfiable이 DoNotSchedule로 설정된 경우 들어오는 pod는 zone2 (zone3)의 ActualSkew (2-1)가 MaxSkew (1)를 충족하므로 zone2 (zone3) 만 3/2/1 (3/1/2)가되도록 예약 할 수 있습니다. 즉, 클러스터는 여전히 불균형 상태 일 수 있지만 스케줄러는 * 더 * 불균형 상태로 만들지 않습니다. 필수 필드입니다.",
    "%Pod.json.properties.spec.properties.volumes": "포드에 속한 컨테이너로 마운트 할 수있는 볼륨 목록입니다. 자세한 정보 : https://kubernetes.io/docs/concepts/storage/volumes",
    "%Pod.json.properties.spec.properties.volumes.items": "볼륨은 포드의 모든 컨테이너에서 액세스 할 수있는 포드의 명명 된 볼륨을 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.awsElasticBlockStore": "AWSElasticBlockStore는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 AWS 디스크 리소스를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%Pod.json.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%Pod.json.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다).",
    "%Pod.json.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.readOnly": "VolumeMounts의 ReadOnly 속성을 &quot;true&quot;로 강제 설정하려면 &quot;true&quot;를 지정합니다. 생략하면 기본값은 &quot;false&quot;입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%Pod.json.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.volumeID": "AWS에있는 영구 디스크 리소스의 고유 ID (Amazon EBS 볼륨). 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%Pod.json.properties.spec.properties.volumes.items.properties.azureDisk": "AzureDisk는 호스트의 Azure 데이터 디스크 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.azureDisk.properties.cachingMode": "호스트 캐싱 모드 : 없음, 읽기 전용, 읽기 쓰기.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskName": "Blob 저장소에있는 데이터 디스크의 이름",
    "%Pod.json.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskURI": "Blob 저장소의 데이터 디스크 URI",
    "%Pod.json.properties.spec.properties.volumes.items.properties.azureDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.azureDisk.properties.kind": "예상 값 공유 : 스토리지 계정 당 여러 Blob 디스크 전용 : 스토리지 계정 당 단일 Blob 디스크 관리 : Azure 관리 데이터 디스크 (관리되는 가용성 집합에서만). 기본적으로 공유 됨",
    "%Pod.json.properties.spec.properties.volumes.items.properties.azureDisk.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.azureFile": "AzureFile은 호스트의 Azure 파일 서비스 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.azureFile.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.azureFile.properties.secretName": "Azure Storage 계정 이름 및 키가 포함 된 비밀의 이름",
    "%Pod.json.properties.spec.properties.volumes.items.properties.azureFile.properties.shareName": "이름 공유",
    "%Pod.json.properties.spec.properties.volumes.items.properties.cephfs": "CephFS는 포드의 수명을 공유하는 호스트의 Ceph FS 마운트를 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.cephfs.properties.monitors": "필수 : Monitors는 Ceph 모니터 모음입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%Pod.json.properties.spec.properties.volumes.items.properties.cephfs.properties.path": "선택 사항 : 전체 Ceph 트리가 아닌 마운트 된 루트로 사용되며 기본값은 /입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.cephfs.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%Pod.json.properties.spec.properties.volumes.items.properties.cephfs.properties.secretFile": "선택 사항 : SecretFile은 사용자의 키 링 경로이며 기본값은 /etc/ceph/user.secret입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%Pod.json.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.volumes.items.properties.cephfs.properties.user": "선택 사항 : 사용자는 rados 사용자 이름, 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%Pod.json.properties.spec.properties.volumes.items.properties.cinder": "Cinder는 kubelets 호스트 머신에 연결되고 마운트 된 cinder 볼륨을 나타냅니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%Pod.json.properties.spec.properties.volumes.items.properties.cinder.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%Pod.json.properties.spec.properties.volumes.items.properties.cinder.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%Pod.json.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.volumes.items.properties.cinder.properties.volumeID": "cinder에서 볼륨을 식별하는 데 사용되는 볼륨 ID입니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%Pod.json.properties.spec.properties.volumes.items.properties.configMap": "ConfigMap은이 볼륨을 채워야하는 configMap을 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.configMap.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.volumes.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.csi": "CSI (Container Storage Interface)는 특정 외부 CSI 드라이버 (베타 기능)에서 처리하는 임시 저장소를 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.csi.properties.driver": "Driver는이 볼륨을 처리하는 CSI 드라이버의 이름입니다. 클러스터에 등록 된 올바른 이름은 관리자에게 문의하십시오.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.csi.properties.fsType": "마운트 할 파일 시스템 유형입니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 제공되지 않으면 적용 할 기본 파일 시스템을 결정하는 관련 CSI 드라이버에 빈 값이 전달됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.volumes.items.properties.csi.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.csi.properties.volumeAttributes": "VolumeAttributes는 CSI 드라이버에 전달되는 드라이버 별 속성을 저장합니다. 지원되는 값은 드라이버 설명서를 참조하십시오.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.downwardAPI": "DownwardAPI는이 볼륨을 채워야하는 포드에 대한 하향 API를 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.downwardAPI.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 사용할 모드 비트. 선택 사항이어야합니다. 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items": "항목은 하향 API 볼륨 파일 목록입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트는 0000과 0777 사이의 8 진수 값이거나 0과 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%Pod.json.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%Pod.json.properties.spec.properties.volumes.items.properties.emptyDir": "EmptyDir는 포드의 수명을 공유하는 임시 디렉터리를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%Pod.json.properties.spec.properties.volumes.items.properties.emptyDir.properties.medium": "이 디렉토리를 백업해야하는 저장 매체 유형입니다. 기본값은 노드의 기본 매체를 사용함을 의미하는 &quot;&quot;입니다. 빈 문자열 (기본값) 또는 메모리 여야합니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%Pod.json.properties.spec.properties.volumes.items.properties.emptyDir.properties.sizeLimit": "이 EmptyDir 볼륨에 필요한 총 로컬 스토리지 양입니다. 크기 제한은 메모리 매체에도 적용됩니다. 메모리 매체 EmptyDir의 최대 사용량은 여기에 지정된 SizeLimit와 포드에있는 모든 컨테이너의 메모리 제한 합계 사이의 최소값입니다. 기본값은 제한이 정의되지 않았 음을 의미하는 nil입니다. 추가 정보 : http://kubernetes.io/docs/user-guide/volumes#emptydir",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral": "Ephemeral은 클러스터 스토리지 드라이버 (알파 기능)에서 처리하는 볼륨을 나타냅니다. 볼륨의 수명주기는 볼륨을 정의하는 포드에 연결되어 있습니다. 볼륨은 포드가 시작되기 전에 생성되고 포드가 제거되면 삭제됩니다. a) 포드가 실행되는 동안에 만 볼륨이 필요한 경우, b) 스냅 샷에서 복원 또는 용량 추적과 같은 일반 볼륨의 기능이 필요한 경우, c) 스토리지 클래스를 통해 스토리지 드라이버가 지정된 경우, d) 스토리지 드라이버 PersistentVolumeClaim을 통한 동적 볼륨 프로비저닝을 지원합니다 (이 볼륨 유형과 PersistentVolumeClaim 간의 연결에 대한 자세한 내용은 EphemeralVolumeSource 참조). 개별 포드의 수명주기보다 오래 지속되는 볼륨에 대해 PersistentVolumeClaim 또는 공급 업체별 API 중 하나를 사용합니다. CSI 드라이버가 그런 방식으로 사용되는 경우 경량 로컬 임시 볼륨에 CSI를 사용하십시오. 자세한 내용은 드라이버 설명서를 참조하십시오. 포드는 두 유형의 임시 볼륨과 영구 볼륨을 동시에 사용할 수 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate": "볼륨을 프로비저닝하기 위해 독립형 PVC를 작성하는 데 사용됩니다. 이 EphemeralVolumeSource가 포함 된 포드가 PVC의 소유자가됩니다. 즉, PVC가 포드와 함께 삭제됩니다. PVC의 이름은`<pod name> -<volume name> `여기서`<volume name> `는`PodSpec.Volumes` 배열 항목의 이름입니다. 연결된 이름이 PVC에 유효하지 않은 경우 (예 : 너무 긴 경우) 포드 유효성 검사는 포드를 거부합니다. 팟 (Pod)이 소유하지 않은 이름을 가진 기존 PVC는 실수로 관련없는 볼륨을 사용하지 않도록 팟 (Pod)에 사용되지 * 않습니다 *. 그런 다음 관련없는 PVC가 제거 될 때까지 포드 시작이 차단됩니다. 이러한 사전 생성 된 PVC를 포드에서 사용하려는 경우 포드가 존재하면 PVC를 포드에 대한 소유자 참조로 업데이트해야합니다. 일반적으로이 작업은 필요하지 않지만 손상된 클러스터를 수동으로 재구성 할 때 유용 할 수 있습니다. 이 필드는 읽기 전용이며 생성 된 후에는 Kubernetes에서 PVC를 변경하지 않습니다. 필수 항목이며 nil이 아니어야합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata": "PVC를 만들 때 PVC에 복사 할 레이블 및 주석을 포함 할 수 있습니다. 다른 필드는 허용되지 않으며 유효성 검사 중에 거부됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec": "PersistentVolumeClaim의 사양입니다. 전체 콘텐츠는이 템플릿에서 생성 된 PVC에 변경되지 않고 복사됩니다. PersistentVolumeClaim에서와 동일한 필드가 여기에서도 유효합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.accessModes": "AccessModes에는 볼륨에 필요한 액세스 모드가 포함되어 있습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource": "이 필드는 다음 중 하나를 지정하는 데 사용할 수 있습니다. * 기존 VolumeSnapshot 객체 (snapshot.storage.k8s.io/VolumeSnapshot-베타) * 기존 PVC (PersistentVolumeClaim) * 데이터 채우기 (알파)를 순서대로 구현하는 기존 사용자 지정 리소스 / 객체 VolumeSnapshot 개체 유형을 사용하려면 적절한 기능 게이트를 활성화해야합니다 (VolumeSnapshotDataSource 또는 AnyVolumeDataSource) 프로비저닝 도구 또는 외부 컨트롤러가 지정된 데이터 소스를 지원할 수있는 경우 지정된 데이터 소스의 내용을 기반으로 새 볼륨을 생성합니다. 지정된 데이터 소스가 지원되지 않는 경우 볼륨이 생성되지 않고 오류가 이벤트로보고됩니다. 앞으로 더 많은 데이터 소스 유형을 지원할 계획이며 제공자의 동작이 변경 될 수 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.apiGroup": "APIGroup은 참조되는 리소스에 대한 그룹입니다. APIGroup이 지정되지 않은 경우 지정된 종류가 코어 API 그룹에 있어야합니다. 다른 타사 유형의 경우 APIGroup이 필요합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.kind": "Kind는 참조되는 리소스 유형입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.name": "이름은 참조되는 리소스의 이름입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources": "리소스는 볼륨에 있어야하는 최소 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector": "바인딩을 고려할 볼륨에 대한 레이블 쿼리입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.storageClassName": "클레임에 필요한 StorageClass의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.volumeMode": "volumeMode는 클레임에 필요한 볼륨 유형을 정의합니다. 클레임 사양에 포함되지 않은 경우 파일 시스템의 가치가 암시됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.volumeName": "VolumeName은이 클레임을 뒷받침하는 PersistentVolume에 대한 바인딩 참조입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.fc": "FC는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 파이버 채널 리소스를 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.fc.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.fc.properties.lun": "선택 사항 : FC 대상 LUN 번호",
    "%Pod.json.properties.spec.properties.volumes.items.properties.fc.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.fc.properties.targetWWNs": "선택 사항 : FC 대상 월드 와이드 이름 (WWN)",
    "%Pod.json.properties.spec.properties.volumes.items.properties.fc.properties.wwids": "선택 사항 : FC 볼륨 월드 와이드 식별자 (wwids) wwids 또는 targetWWN과 lun의 조합을 설정해야하지만 둘 다 동시에 설정할 수는 없습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.flexVolume": "FlexVolume은 exec 기반 플러그인을 사용하여 프로비저닝 / 연결된 일반 볼륨 리소스를 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.flexVolume.properties.driver": "Driver는이 볼륨에 사용할 드라이버의 이름입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.flexVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본 파일 시스템은 FlexVolume 스크립트에 따라 다릅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.flexVolume.properties.options": "옵션 : 추가 명령 옵션 (있는 경우).",
    "%Pod.json.properties.spec.properties.volumes.items.properties.flexVolume.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.volumes.items.properties.flocker": "Flocker는 kubelet의 호스트 머신에 연결된 Flocker 볼륨을 나타냅니다. 이것은 실행중인 Flocker 제어 서비스에 따라 다릅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.flocker.properties.datasetName": "메타 데이터로 저장된 데이터 세트의 이름-&gt; Flocker 용 데이터 세트의 이름은 더 이상 사용되지 않는 것으로 간주되어야합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.flocker.properties.datasetUUID": "데이터 세트의 UUID입니다. 이것은 Flocker 데이터 세트의 고유 식별자입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.gcePersistentDisk": "GCEPersistentDisk는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 GCE 디스크 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%Pod.json.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%Pod.json.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다). 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%Pod.json.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.pdName": "GCE에있는 PD 리소스의 고유 이름입니다. GCE에서 디스크를 식별하는 데 사용됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%Pod.json.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%Pod.json.properties.spec.properties.volumes.items.properties.gitRepo": "GitRepo는 특정 개정판의 git 저장소를 나타냅니다. DEPRECATED : GitRepo는 더 이상 사용되지 않습니다. git 저장소로 컨테이너를 프로비저닝하려면 git을 사용하여 저장소를 복제하는 InitContainer에 EmptyDir을 마운트 한 다음 Pod의 컨테이너에 EmptyDir을 마운트합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.gitRepo.properties.directory": "대상 디렉토리 이름. &#39;..&#39;을 포함하거나 시작하지 않아야합니다. 만약 &#39;.&#39; 제공되면 볼륨 디렉토리는 git 저장소가됩니다. 그렇지 않으면 지정된 경우 볼륨은 지정된 이름의 하위 디렉토리에 git 저장소를 포함합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.gitRepo.properties.repository": "저장소 URL",
    "%Pod.json.properties.spec.properties.volumes.items.properties.gitRepo.properties.revision": "지정된 개정에 대한 커밋 해시입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.glusterfs": "Glusterfs는 포드의 수명을 공유하는 호스트의 Glusterfs 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md",
    "%Pod.json.properties.spec.properties.volumes.items.properties.glusterfs.properties.endpoints": "EndpointsName은 Glusterfs 토폴로지를 자세히 설명하는 엔드 포인트 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%Pod.json.properties.spec.properties.volumes.items.properties.glusterfs.properties.path": "Path는 Glusterfs 볼륨 경로입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%Pod.json.properties.spec.properties.volumes.items.properties.glusterfs.properties.readOnly": "여기서 ReadOnly는 Glusterfs 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%Pod.json.properties.spec.properties.volumes.items.properties.hostPath": "HostPath는 컨테이너에 직접 노출되는 호스트 시스템의 기존 파일 또는 디렉터리를 나타냅니다. 이것은 일반적으로 호스트 시스템을 볼 수있는 시스템 에이전트 또는 기타 권한있는 항목에 사용됩니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%Pod.json.properties.spec.properties.volumes.items.properties.hostPath.properties.path": "호스트의 디렉토리 경로입니다. 경로가 심볼릭 링크이면 실제 경로에 대한 링크를 따릅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%Pod.json.properties.spec.properties.volumes.items.properties.hostPath.properties.type": "HostPath 볼륨의 유형 기본값은 &quot;&quot;입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%Pod.json.properties.spec.properties.volumes.items.properties.iscsi": "ISCSI는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 ISCSI 디스크 리소스를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/iscsi/README.md",
    "%Pod.json.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthDiscovery": "iSCSI 검색 CHAP 인증 지원 여부",
    "%Pod.json.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthSession": "iSCSI 세션 CHAP 인증 지원 여부",
    "%Pod.json.properties.spec.properties.volumes.items.properties.iscsi.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
    "%Pod.json.properties.spec.properties.volumes.items.properties.iscsi.properties.initiatorName": "사용자 지정 iSCSI 이니시에이터 이름. initiatorName이 iscsiInterface와 동시에 지정되면 새로운 iSCSI 인터페이스<target portal> :<volume name> 연결을 위해 생성됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.iscsi.properties.iqn": "대상 iSCSI 정규화 이름.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.iscsi.properties.iscsiInterface": "iSCSI 전송을 사용하는 iSCSI 인터페이스 이름입니다. 기본값은 &#39;default&#39;(tcp)입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.iscsi.properties.lun": "iSCSI 대상 LUN 번호.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.iscsi.properties.portals": "iSCSI 대상 포털 목록. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.iscsi.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.volumes.items.properties.iscsi.properties.targetPortal": "iSCSI 대상 포털. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.name": "볼륨의 이름. DNS_LABEL이어야하며 포드 내에서 고유해야합니다. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.volumes.items.properties.nfs": "NFS는 포드의 수명을 공유하는 호스트의 NFS 마운트를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%Pod.json.properties.spec.properties.volumes.items.properties.nfs.properties.path": "NFS 서버에서 내 보낸 경로입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%Pod.json.properties.spec.properties.volumes.items.properties.nfs.properties.readOnly": "여기서 ReadOnly는 읽기 전용 권한으로 NFS 내보내기를 강제로 마운트합니다. 기본값은 false입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%Pod.json.properties.spec.properties.volumes.items.properties.nfs.properties.server": "Server는 NFS 서버의 호스트 이름 또는 IP 주소입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%Pod.json.properties.spec.properties.volumes.items.properties.persistentVolumeClaim": "PersistentVolumeClaimVolumeSource는 동일한 네임 스페이스에있는 PersistentVolumeClaim에 대한 참조를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%Pod.json.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.claimName": "ClaimName은이 볼륨을 사용하는 pod와 동일한 네임 스페이스에있는 PersistentVolumeClaim의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%Pod.json.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.readOnly": "VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.photonPersistentDisk": "PhotonPersistentDisk는 kubelets 호스트 머신에 연결되고 마운트 된 PhotonController 영구 디스크를 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.pdID": "Photon Controller 영구 디스크를 식별하는 ID",
    "%Pod.json.properties.spec.properties.volumes.items.properties.portworxVolume": "PortworxVolume은 kubelets 호스트 머신에 연결되고 마운트 된 portworx 볼륨을 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.portworxVolume.properties.fsType": "FSType은 마운트 할 파일 시스템 유형을 나타냅니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.portworxVolume.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.portworxVolume.properties.volumeID": "VolumeID는 Portworx 볼륨을 고유하게 식별합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected": "하나의 리소스 비밀, 구성 맵 및 하향 API에 대한 항목",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.defaultMode": "기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources": "볼륨 예측 목록",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items": "지원되는 다른 볼륨 유형과 함께 투영 될 수있는 투영",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap": "프로젝트 할 configMap 데이터에 대한 정보",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI": "프로젝트 할 downwardAPI 데이터에 대한 정보",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items": "Items는 DownwardAPIVolume 파일 목록입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트는 0000과 0777 사이의 8 진수 값이거나 0과 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret": "프로젝트 할 비밀 데이터에 대한 정보",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken": "프로젝트 할 serviceAccountToken 데이터에 대한 정보",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.audience": "청중은 토큰의 의도 된 청중입니다. 토큰 수신자는 토큰 대상에 지정된 식별자로 자신을 식별해야하며 그렇지 않으면 토큰을 거부해야합니다. 대상은 기본적으로 apiserver의 식별자입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.expirationSeconds": "ExpirationSeconds는 서비스 계정 토큰의 요청 된 유효 기간입니다. 토큰이 만료에 가까워지면 kubelet 볼륨 플러그인이 사전에 서비스 계정 토큰을 교체합니다. 토큰이 수명의 80 % 이상이거나 토큰이 24 시간 이상인 경우 kubelet은 토큰 순환을 시작합니다. 기본값은 1 시간이며 최소 10 분이어야합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.path": "경로는 토큰을 투영 할 파일의 마운트 지점에 상대적인 경로입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.quobyte": "Quobyte는 포드의 수명을 공유하는 호스트의 Quobyte 마운트를 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.quobyte.properties.group": "볼륨 액세스를 매핑 할 그룹 기본값은 그룹 없음입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.quobyte.properties.readOnly": "여기서 ReadOnly는 Quobyte 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.quobyte.properties.registry": "레지스트리는 볼륨의 중앙 레지스트리 역할을하는 호스트 : 포트 쌍 (여러 항목은 쉼표로 구분됨)으로 문자열로 지정된 단일 또는 다중 Quobyte Registry 서비스를 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.quobyte.properties.tenant": "백엔드에서 주어진 Quobyte 볼륨을 소유하는 테넌트는 동적으로 프로비저닝 된 Quobyte 볼륨과 함께 사용되며 값은 플러그인에 의해 설정됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.quobyte.properties.user": "볼륨 액세스를 기본값에 매핑하는 사용자를 serivceaccount 사용자에게",
    "%Pod.json.properties.spec.properties.volumes.items.properties.quobyte.properties.volume": "Volume은 이미 생성 된 Quobyte 볼륨을 이름으로 참조하는 문자열입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.rbd": "RBD는 포드의 수명을 공유하는 호스트의 Rados 블록 장치 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md",
    "%Pod.json.properties.spec.properties.volumes.items.properties.rbd.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#rbd",
    "%Pod.json.properties.spec.properties.volumes.items.properties.rbd.properties.image": "라도 스 이미지 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Pod.json.properties.spec.properties.volumes.items.properties.rbd.properties.keyring": "키링은 RBDUser의 키링 경로입니다. 기본값은 / etc / ceph / keyring입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Pod.json.properties.spec.properties.volumes.items.properties.rbd.properties.monitors": "Ceph 모니터 모음. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Pod.json.properties.spec.properties.volumes.items.properties.rbd.properties.pool": "라도 스 풀 이름. 기본값은 rbd입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Pod.json.properties.spec.properties.volumes.items.properties.rbd.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Pod.json.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.volumes.items.properties.rbd.properties.user": "rados 사용자 이름입니다. 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Pod.json.properties.spec.properties.volumes.items.properties.scaleIO": "ScaleIO는 Kubernetes 노드에 연결되고 마운트 된 ScaleIO 영구 볼륨을 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.scaleIO.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본값은 &quot;xfs&quot;입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.scaleIO.properties.gateway": "ScaleIO API 게이트웨이의 호스트 주소입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.scaleIO.properties.protectionDomain": "구성된 스토리지에 대한 ScaleIO 보호 도메인의 이름입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.scaleIO.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.volumes.items.properties.scaleIO.properties.sslEnabled": "게이트웨이와의 SSL 통신을 활성화 / 비활성화하는 플래그, 기본값은 false",
    "%Pod.json.properties.spec.properties.volumes.items.properties.scaleIO.properties.storageMode": "볼륨의 스토리지가 ThickProvisioned인지 ThinProvisioned인지 여부를 나타냅니다. 기본값은 ThinProvisioned입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.scaleIO.properties.storagePool": "보호 도메인과 연결된 ScaleIO 스토리지 풀입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.scaleIO.properties.system": "ScaleIO에 구성된 스토리지 시스템의 이름입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.scaleIO.properties.volumeName": "이 볼륨 소스와 연결된 ScaleIO 시스템에 이미 생성 된 볼륨의 이름입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.secret": "Secret은이 볼륨을 채워야하는 비밀을 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%Pod.json.properties.spec.properties.volumes.items.properties.secret.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%Pod.json.properties.spec.properties.volumes.items.properties.secret.properties.secretName": "사용할 팟 (Pod) 네임 스페이스의 시크릿 이름입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%Pod.json.properties.spec.properties.volumes.items.properties.storageos": "StorageOS는 Kubernetes 노드에 연결되고 마운트 된 StorageOS 볼륨을 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.storageos.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.storageos.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Pod.json.properties.spec.properties.volumes.items.properties.storageos.properties.volumeName": "VolumeName은 사람이 읽을 수있는 StorageOS 볼륨의 이름입니다. 볼륨 이름은 네임 스페이스 내에서만 고유합니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.storageos.properties.volumeNamespace": "VolumeNamespace는 StorageOS 내의 볼륨 범위를 지정합니다. 네임 스페이스를 지정하지 않으면 Pod의 네임 스페이스가 사용됩니다. 이를 통해보다 긴밀한 통합을 위해 Kubernetes 이름 범위를 StorageOS 내에서 미러링 할 수 있습니다. 기본 동작을 재정의하려면 VolumeName을 임의의 이름으로 설정합니다. StorageOS 내에서 네임 스페이스를 사용하지 않는 경우 &quot;default&quot;로 설정하십시오. StorageOS 내에 존재하지 않는 네임 스페이스가 생성됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.vsphereVolume": "VsphereVolume은 kubelets 호스트 시스템에 연결되고 마운트 된 vSphere 볼륨을 나타냅니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyID": "StoragePolicyName과 연결된 SPBM (스토리지 정책 기반 관리) 프로필 ID입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyName": "SPBM (스토리지 정책 기반 관리) 프로필 이름입니다.",
    "%Pod.json.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.volumePath": "vSphere 볼륨 vmdk를 식별하는 경로",
    "%Pod.json.properties.status": "가장 최근에 관찰 된 포드 상태입니다. 이 데이터는 최신이 아닐 수 있습니다. 시스템에 의해 채워집니다. 읽기 전용. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%Pod.json.properties.status.properties.conditions": "포드의 현재 서비스 상태입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
    "%Pod.json.properties.status.properties.conditions.items": "PodCondition에는이 포드의 현재 상태에 대한 세부 정보가 포함됩니다.",
    "%Pod.json.properties.status.properties.conditions.items.properties.lastProbeTime": "지난번에 우리는 조건을 조사했습니다.",
    "%Pod.json.properties.status.properties.conditions.items.properties.lastTransitionTime": "마지막으로 조건이 한 상태에서 다른 상태로 전환 된 시간입니다.",
    "%Pod.json.properties.status.properties.conditions.items.properties.message": "마지막 전환에 대한 세부 정보를 나타내는 사람이 읽을 수있는 메시지입니다.",
    "%Pod.json.properties.status.properties.conditions.items.properties.reason": "조건의 마지막 전환에 대한 고유 한 한 단어로 된 CamelCase 이유입니다.",
    "%Pod.json.properties.status.properties.conditions.items.properties.status": "상태는 조건의 상태입니다. True, False, Unknown이 될 수 있습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
    "%Pod.json.properties.status.properties.conditions.items.properties.type": "유형은 조건의 유형입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
    "%Pod.json.properties.status.properties.containerStatuses": "목록에는 매니페스트의 컨테이너 당 하나의 항목이 있습니다. 각 항목은 현재`docker inspect`의 출력입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
    "%Pod.json.properties.status.properties.containerStatuses.items": "ContainerStatus에는이 컨테이너의 현재 상태에 대한 세부 정보가 포함됩니다.",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.containerID": "&#39;docker : //&#39;형식의 컨테이너 ID<container_id> &#39;.",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.image": "컨테이너가 실행중인 이미지입니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.imageID": "컨테이너 이미지의 ImageID입니다.",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.lastState": "컨테이너의 마지막 종료 조건에 대한 세부 정보입니다.",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.lastState.properties.running": "실행중인 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.lastState.properties.running.properties.startedAt": "컨테이너가 마지막으로 (다시) 시작된 시간",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.lastState.properties.terminated": "종료 된 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.lastState.properties.terminated.properties.containerID": "&#39;docker : //&#39;형식의 컨테이너 ID<container_id> &#39;",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.lastState.properties.terminated.properties.exitCode": "컨테이너 마지막 종료의 종료 상태",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.lastState.properties.terminated.properties.finishedAt": "컨테이너가 마지막으로 종료 된 시간",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.lastState.properties.terminated.properties.message": "컨테이너의 마지막 종료에 관한 메시지",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.lastState.properties.terminated.properties.reason": "(간단한) 컨테이너의 마지막 종료 이유",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.lastState.properties.terminated.properties.signal": "컨테이너의 마지막 종료 신호",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.lastState.properties.terminated.properties.startedAt": "컨테이너의 이전 실행이 시작된 시간",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.lastState.properties.waiting": "대기 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.lastState.properties.waiting.properties.message": "컨테이너가 아직 실행되지 않은 이유에 대한 메시지입니다.",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.lastState.properties.waiting.properties.reason": "(간단한) 컨테이너가 아직 실행되지 않는 이유.",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.name": "DNS_LABEL이어야합니다. 포드의 각 컨테이너에는 고유 한 이름이 있어야합니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.ready": "컨테이너가 준비 상태 프로브를 통과했는지 여부를 지정합니다.",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.restartCount": "컨테이너가 다시 시작된 횟수, 현재 아직 제거되지 않은 죽은 컨테이너 수를 기반으로합니다. 이것은 죽은 컨테이너에서 계산됩니다. 그러나 이러한 컨테이너는 가비지 수집 대상입니다. 이 값은 GC에 의해 5로 제한됩니다.",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.started": "컨테이너가 시작 프로브를 통과했는지 여부를 지정합니다. false로 초기화되고 startupProbe가 성공한 것으로 간주되면 true가됩니다. 컨테이너가 다시 시작되거나 kubelet이 일시적으로 상태를 잃는 경우 false로 재설정됩니다. startupProbe가 정의되지 않은 경우 항상 true입니다.",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.state": "컨테이너의 현재 상태에 대한 세부 정보입니다.",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.state.properties.running": "실행중인 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.state.properties.running.properties.startedAt": "컨테이너가 마지막으로 (다시) 시작된 시간",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.state.properties.terminated": "종료 된 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.state.properties.terminated.properties.containerID": "&#39;docker : //&#39;형식의 컨테이너 ID<container_id> &#39;",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.state.properties.terminated.properties.exitCode": "컨테이너 마지막 종료의 종료 상태",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.state.properties.terminated.properties.finishedAt": "컨테이너가 마지막으로 종료 된 시간",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.state.properties.terminated.properties.message": "컨테이너의 마지막 종료에 관한 메시지",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.state.properties.terminated.properties.reason": "(간단한) 컨테이너의 마지막 종료 이유",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.state.properties.terminated.properties.signal": "컨테이너의 마지막 종료 신호",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.state.properties.terminated.properties.startedAt": "컨테이너의 이전 실행이 시작된 시간",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.state.properties.waiting": "대기 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.state.properties.waiting.properties.message": "컨테이너가 아직 실행되지 않은 이유에 대한 메시지입니다.",
    "%Pod.json.properties.status.properties.containerStatuses.items.properties.state.properties.waiting.properties.reason": "(간단한) 컨테이너가 아직 실행되지 않는 이유.",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses": "이 포드에서 실행 된 모든 임시 컨테이너의 상태입니다. 이 필드는 알파 수준이며 EphemeralContainers 기능을 활성화하는 서버에 의해서만 채워집니다.",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items": "ContainerStatus에는이 컨테이너의 현재 상태에 대한 세부 정보가 포함됩니다.",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.containerID": "&#39;docker : //&#39;형식의 컨테이너 ID<container_id> &#39;.",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.image": "컨테이너가 실행중인 이미지입니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.imageID": "컨테이너 이미지의 ImageID입니다.",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.lastState": "컨테이너의 마지막 종료 조건에 대한 세부 정보입니다.",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.lastState.properties.running": "실행중인 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.lastState.properties.running.properties.startedAt": "컨테이너가 마지막으로 (다시) 시작된 시간",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.lastState.properties.terminated": "종료 된 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.lastState.properties.terminated.properties.containerID": "&#39;docker : //&#39;형식의 컨테이너 ID<container_id> &#39;",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.lastState.properties.terminated.properties.exitCode": "컨테이너 마지막 종료의 종료 상태",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.lastState.properties.terminated.properties.finishedAt": "컨테이너가 마지막으로 종료 된 시간",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.lastState.properties.terminated.properties.message": "컨테이너의 마지막 종료에 관한 메시지",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.lastState.properties.terminated.properties.reason": "(간단한) 컨테이너의 마지막 종료 이유",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.lastState.properties.terminated.properties.signal": "컨테이너의 마지막 종료 신호",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.lastState.properties.terminated.properties.startedAt": "컨테이너의 이전 실행이 시작된 시간",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.lastState.properties.waiting": "대기 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.lastState.properties.waiting.properties.message": "컨테이너가 아직 실행되지 않은 이유에 대한 메시지입니다.",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.lastState.properties.waiting.properties.reason": "(간단한) 컨테이너가 아직 실행되지 않는 이유.",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.name": "DNS_LABEL이어야합니다. 포드의 각 컨테이너에는 고유 한 이름이 있어야합니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.ready": "컨테이너가 준비 상태 프로브를 통과했는지 여부를 지정합니다.",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.restartCount": "컨테이너가 다시 시작된 횟수, 현재 아직 제거되지 않은 죽은 컨테이너 수를 기반으로합니다. 이것은 죽은 컨테이너에서 계산됩니다. 그러나 이러한 컨테이너는 가비지 수집 대상입니다. 이 값은 GC에 의해 5로 제한됩니다.",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.started": "컨테이너가 시작 프로브를 통과했는지 여부를 지정합니다. false로 초기화되고 startupProbe가 성공한 것으로 간주되면 true가됩니다. 컨테이너가 다시 시작되거나 kubelet이 일시적으로 상태를 잃는 경우 false로 재설정됩니다. startupProbe가 정의되지 않은 경우 항상 true입니다.",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.state": "컨테이너의 현재 상태에 대한 세부 정보입니다.",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.state.properties.running": "실행중인 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.state.properties.running.properties.startedAt": "컨테이너가 마지막으로 (다시) 시작된 시간",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.state.properties.terminated": "종료 된 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.state.properties.terminated.properties.containerID": "&#39;docker : //&#39;형식의 컨테이너 ID<container_id> &#39;",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.state.properties.terminated.properties.exitCode": "컨테이너 마지막 종료의 종료 상태",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.state.properties.terminated.properties.finishedAt": "컨테이너가 마지막으로 종료 된 시간",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.state.properties.terminated.properties.message": "컨테이너의 마지막 종료에 관한 메시지",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.state.properties.terminated.properties.reason": "(간단한) 컨테이너의 마지막 종료 이유",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.state.properties.terminated.properties.signal": "컨테이너의 마지막 종료 신호",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.state.properties.terminated.properties.startedAt": "컨테이너의 이전 실행이 시작된 시간",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.state.properties.waiting": "대기 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.state.properties.waiting.properties.message": "컨테이너가 아직 실행되지 않은 이유에 대한 메시지입니다.",
    "%Pod.json.properties.status.properties.ephemeralContainerStatuses.items.properties.state.properties.waiting.properties.reason": "(간단한) 컨테이너가 아직 실행되지 않는 이유.",
    "%Pod.json.properties.status.properties.hostIP": "포드가 할당 된 호스트의 IP 주소입니다. 아직 예약되지 않은 경우 비어 있습니다.",
    "%Pod.json.properties.status.properties.initContainerStatuses": "목록에는 매니페스트의 init 컨테이너 당 하나의 항목이 있습니다. 가장 최근에 성공한 init 컨테이너는 ready = true이고 가장 최근에 시작된 컨테이너에는 startTime이 설정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
    "%Pod.json.properties.status.properties.initContainerStatuses.items": "ContainerStatus에는이 컨테이너의 현재 상태에 대한 세부 정보가 포함됩니다.",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.containerID": "&#39;docker : //&#39;형식의 컨테이너 ID<container_id> &#39;.",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.image": "컨테이너가 실행중인 이미지입니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.imageID": "컨테이너 이미지의 ImageID입니다.",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.lastState": "컨테이너의 마지막 종료 조건에 대한 세부 정보입니다.",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.lastState.properties.running": "실행중인 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.lastState.properties.running.properties.startedAt": "컨테이너가 마지막으로 (다시) 시작된 시간",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.lastState.properties.terminated": "종료 된 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.lastState.properties.terminated.properties.containerID": "&#39;docker : //&#39;형식의 컨테이너 ID<container_id> &#39;",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.lastState.properties.terminated.properties.exitCode": "컨테이너 마지막 종료의 종료 상태",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.lastState.properties.terminated.properties.finishedAt": "컨테이너가 마지막으로 종료 된 시간",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.lastState.properties.terminated.properties.message": "컨테이너의 마지막 종료에 관한 메시지",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.lastState.properties.terminated.properties.reason": "(간단한) 컨테이너의 마지막 종료 이유",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.lastState.properties.terminated.properties.signal": "컨테이너의 마지막 종료 신호",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.lastState.properties.terminated.properties.startedAt": "컨테이너의 이전 실행이 시작된 시간",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.lastState.properties.waiting": "대기 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.lastState.properties.waiting.properties.message": "컨테이너가 아직 실행되지 않은 이유에 대한 메시지입니다.",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.lastState.properties.waiting.properties.reason": "(간단한) 컨테이너가 아직 실행되지 않는 이유.",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.name": "DNS_LABEL이어야합니다. 포드의 각 컨테이너에는 고유 한 이름이 있어야합니다. 업데이트 할 수 없습니다.",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.ready": "컨테이너가 준비 상태 프로브를 통과했는지 여부를 지정합니다.",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.restartCount": "컨테이너가 다시 시작된 횟수, 현재 아직 제거되지 않은 죽은 컨테이너 수를 기반으로합니다. 이것은 죽은 컨테이너에서 계산됩니다. 그러나 이러한 컨테이너는 가비지 수집 대상입니다. 이 값은 GC에 의해 5로 제한됩니다.",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.started": "컨테이너가 시작 프로브를 통과했는지 여부를 지정합니다. false로 초기화되고 startupProbe가 성공한 것으로 간주되면 true가됩니다. 컨테이너가 다시 시작되거나 kubelet이 일시적으로 상태를 잃는 경우 false로 재설정됩니다. startupProbe가 정의되지 않은 경우 항상 true입니다.",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.state": "컨테이너의 현재 상태에 대한 세부 정보입니다.",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.state.properties.running": "실행중인 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.state.properties.running.properties.startedAt": "컨테이너가 마지막으로 (다시) 시작된 시간",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.state.properties.terminated": "종료 된 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.state.properties.terminated.properties.containerID": "&#39;docker : //&#39;형식의 컨테이너 ID<container_id> &#39;",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.state.properties.terminated.properties.exitCode": "컨테이너 마지막 종료의 종료 상태",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.state.properties.terminated.properties.finishedAt": "컨테이너가 마지막으로 종료 된 시간",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.state.properties.terminated.properties.message": "컨테이너의 마지막 종료에 관한 메시지",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.state.properties.terminated.properties.reason": "(간단한) 컨테이너의 마지막 종료 이유",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.state.properties.terminated.properties.signal": "컨테이너의 마지막 종료 신호",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.state.properties.terminated.properties.startedAt": "컨테이너의 이전 실행이 시작된 시간",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.state.properties.waiting": "대기 컨테이너에 대한 세부 정보",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.state.properties.waiting.properties.message": "컨테이너가 아직 실행되지 않은 이유에 대한 메시지입니다.",
    "%Pod.json.properties.status.properties.initContainerStatuses.items.properties.state.properties.waiting.properties.reason": "(간단한) 컨테이너가 아직 실행되지 않는 이유.",
    "%Pod.json.properties.status.properties.message": "포드가이 상태에있는 이유에 대한 세부 정보를 나타내는 사람이 읽을 수있는 메시지입니다.",
    "%Pod.json.properties.status.properties.nominatedNodeName": "nominatedNodeName은이 포드가 노드의 다른 포드를 선점 할 때만 설정되지만 선점 피해자가 정상적인 종료 기간을 받기 때문에 즉시 예약 할 수 없습니다. 이 필드는 포드가이 노드에서 예약된다는 것을 보장하지 않습니다. 스케줄러는 다른 노드가 더 빨리 사용 가능 해지면 다른 곳에 포드를 배치하기로 결정할 수 있습니다. 스케줄러는 또한이 노드의 리소스를 선점 후 생성 된 더 높은 우선 순위 포드에 제공하기로 결정할 수 있습니다. 결과적으로이 필드는 포드가 예약 될 때 PodSpec.nodeName과 다를 수 있습니다.",
    "%Pod.json.properties.status.properties.phase": "Pod의 단계는 Pod의 수명주기에 대한 간단하고 높은 수준의 요약입니다. 조건 배열, 이유 및 메시지 필드, 개별 컨테이너 상태 배열에는 포드 상태에 대한 자세한 정보가 포함되어 있습니다. 5 개의 가능한 단계 값이 있습니다. 보류 중 : Kubernetes 시스템에서 포드를 수락했지만 하나 이상의 컨테이너 이미지가 생성되지 않았습니다. 여기에는 일정이 잡히기 전의 시간과 네트워크를 통해 이미지를 다운로드하는 데 소요 된 시간이 포함됩니다. 실행 중 : 포드가 노드에 바인딩되었으며 모든 컨테이너가 생성되었습니다. 하나 이상의 컨테이너가 아직 실행 중이거나 시작 또는 다시 시작하는 중입니다. 성공 : 포드의 모든 컨테이너가 성공적으로 종료되었으며 다시 시작되지 않습니다. 실패 : 포드의 모든 컨테이너가 종료되었으며 하나 이상의 컨테이너가 실패로 종료되었습니다. 컨테이너가 0이 아닌 상태로 종료되었거나 시스템에 의해 종료되었습니다. 알 수 없음 : 어떤 이유로 포드의 상태를 가져올 수 없습니다. 일반적으로 포드 호스트와의 통신 오류로 인해 발생합니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase",
    "%Pod.json.properties.status.properties.podIP": "포드에 할당 된 IP 주소입니다. 적어도 클러스터 내에서 라우팅 가능합니다. 아직 할당되지 않은 경우 비어 있습니다.",
    "%Pod.json.properties.status.properties.podIPs": "podIP는 포드에 할당 된 IP 주소를 보유합니다. 이 필드가 지정되면 0 번째 항목이 podIP 필드와 일치해야합니다. 포드는 IPv4 및 IPv6 각각에 대해 최대 1 개의 값을 할당 할 수 있습니다. 아직 IP가 할당되지 않은 경우이 목록은 비어 있습니다.",
    "%Pod.json.properties.status.properties.podIPs.items": "(복수) PodIPs 필드의 항목에 대한 IP 주소 정보입니다. 각 항목에는 다음이 포함됩니다. IP : 포드에 할당 된 IP 주소. 적어도 클러스터 내에서 라우팅 가능합니다.",
    "%Pod.json.properties.status.properties.podIPs.items.properties.ip": "ip는 포드에 할당 된 IP 주소 (IPv4 또는 IPv6)입니다.",
    "%Pod.json.properties.status.properties.qosClass": "리소스 요구 사항에 따라 포드에 할당 된 서비스 품질 (QOS) 분류 사용 가능한 QOS 클래스는 PodQOSClass 유형을 참조하십시오. 추가 정보 : https://git.k8s.io/community/contributors/design-proposals/node/resource-qos. md",
    "%Pod.json.properties.status.properties.reason": "포드가이 상태에있는 이유에 대한 세부 정보를 나타내는 간단한 CamelCase 메시지입니다. 예 : &#39;퇴거&#39;",
    "%Pod.json.properties.status.properties.startTime": "RFC 3339 Kubelet에서 객체를 확인한 날짜 및 시간입니다. 이는 Kubelet이 포드의 컨테이너 이미지를 가져 오기 전입니다.",
    "%CronJob.json": "CronJob은 단일 크론 작업의 구성을 나타냅니다.",
    "%CronJob.json.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%CronJob.json.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%CronJob.json.properties.metadata": "표준 개체의 메타 데이터. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    "%CronJob.json.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%CronJob.json.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%CronJob.json.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%CronJob.json.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%CronJob.json.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%CronJob.json.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%CronJob.json.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%CronJob.json.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%CronJob.json.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%CronJob.json.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%CronJob.json.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%CronJob.json.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%CronJob.json.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%CronJob.json.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%CronJob.json.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%CronJob.json.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%CronJob.json.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%CronJob.json.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%CronJob.json.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%CronJob.json.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%CronJob.json.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%CronJob.json.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%CronJob.json.properties.spec": "일정을 포함하여 cron 작업의 원하는 동작을 지정합니다. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%CronJob.json.properties.spec.properties.concurrencyPolicy": "Job의 동시 실행을 처리하는 방법을 지정합니다. 유효한 값은 다음과 같습니다.- &quot;Allow&quot;(기본값) : CronJob을 동시에 실행할 수 있습니다. - &quot;Forbid&quot;: 동시 실행을 금지하고 이전 실행이 아직 완료되지 않은 경우 다음 실행을 건너 뜁니다. - &quot;바꾸기&quot;: 현재 실행중인 작업을 취소하고 새 작업으로 바꿉니다.",
    "%CronJob.json.properties.spec.properties.failedJobsHistoryLimit": "유지할 실패한 완료된 작업의 수입니다. 명시 적 0과 지정되지 않음을 구별하기위한 포인터입니다. 기본값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate": "CronJob을 실행할 때 생성 될 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata": "이 템플릿에서 생성 된 작업에 대한 표준 개체의 메타 데이터입니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec": "원하는 작업 동작의 지정. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.activeDeadlineSeconds": "시스템이 종료를 시도하기 전에 작업이 활성화 될 수있는 startTime에 상대적인 기간 (초)을 지정합니다. 값은 양의 정수 여야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.backoffLimit": "이 작업이 실패한 것으로 표시하기 전에 재시도 횟수를 지정합니다. 기본값은 6입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.completions": "작업을 실행해야하는 성공적으로 완료된 포드의 원하는 수를 지정합니다. nil로 설정하면 모든 pod의 성공은 모든 pod의 성공을 나타내며 병렬 처리가 양수 값을 가질 수 있음을 의미합니다. 1로 설정하면 병렬 처리가 1로 제한되고 해당 포드의 성공은 작업의 성공을 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.manualSelector": "manualSelector는 포드 레이블 및 포드 선택기 생성을 제어합니다. 수행중인 작업이 확실하지 않으면 &#39;manualSelector&#39;를 설정하지 않은 상태로 둡니다. false이거나 설정되지 않은 경우 시스템은이 작업에 고유 한 레이블을 선택하고 해당 레이블을 포드 템플릿에 추가합니다. true이면 사용자가 고유 한 레이블을 선택하고 선택기를 지정해야합니다. 고유 한 레이블을 선택하지 않으면이 작업과 다른 작업이 제대로 작동하지 않을 수 있습니다. 그러나 이전`extensions / v1beta1` API로 생성 된 작업에는`manualSelector = true`가 표시 될 수 있습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.parallelism": "주어진 시간에 작업이 실행되어야하는 최대 원하는 포드 수를 지정합니다. 정상 상태에서 실행중인 포드의 실제 수는 ((.spec.completions-.status.successful) &lt;.spec.parallelism), 즉 남은 작업이 최대 병렬 처리보다 적을 때이 숫자보다 적습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.selector": "포드 수와 일치해야하는 포드에 대한 라벨 쿼리입니다. 일반적으로 시스템은이 필드를 설정합니다. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template": "작업을 실행할 때 생성 될 포드를 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata": "표준 개체의 메타 데이터. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec": "pod의 원하는 동작에 대한 사양입니다. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.activeDeadlineSeconds": "시스템이 실패로 표시하고 연관된 컨테이너를 강제 종료하기 전에 팟 (Pod)이 StartTime에 상대적으로 노드에서 활성화 될 수있는 선택적 기간 (초)입니다. 값은 양의 정수 여야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity": "지정된 경우 포드의 예약 제약",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity": "포드에 대한 노드 선호도 예약 규칙을 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 노드가 대응하는 matchExpressions와 일치하면 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "빈 선호 스케줄링 용어는 암시 적 가중치가 0 인 모든 개체와 일치합니다 (즉, 작동하지 않음). null 선호 스케줄링 용어는 객체와 일치하지 않습니다 (즉, 작동하지 않음).",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference": "해당 가중치와 관련된 노드 선택기 용어입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 nodeSelectorTerm 일치와 관련된 가중치입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms": "필수입니다. 노드 선택기 용어 목록입니다. 용어는 OR로 연결됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items": "null 또는 빈 노드 선택기 용어는 개체와 일치하지 않습니다. 이들의 요구 사항은 AND입니다. TopologySelectorTerm 유형은 NodeSelectorTerm의 하위 집합을 구현합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity": "포드 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 배치).",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 및 노드가 대응하는 podAffinityTerm과 일치하는 포드를 갖는 경우 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity": "포드 반 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 두지 않음).",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 반친 화성 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치의 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 반친 화성 표현식 등)을 충족하는 각 노드에 대해 다음 요소를 반복하여 합계를 계산합니다. 이 필드와 노드에 해당 podAffinityTerm과 일치하는 포드가있는 경우 합계에 &quot;weight&quot;를 추가합니다. 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 반친 화성 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 반친 화성 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않는 경우 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.automountServiceAccountToken": "AutomountServiceAccountToken은 서비스 계정 토큰을 자동으로 마운트해야하는지 여부를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers": "포드에 속한 컨테이너 목록입니다. 현재 컨테이너를 추가하거나 제거 할 수 없습니다. 포드에는 컨테이너가 하나 이상 있어야합니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업보다 데이터를로드하거나 캐시를 워밍하는 데 오랜 시간이 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.containers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.dnsConfig": "포드의 DNS 매개 변수를 지정합니다. 여기에 지정된 매개 변수는 DNSPolicy를 기반으로 생성 된 DNS 구성에 병합됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.nameservers": "DNS 이름 서버 IP 주소 목록입니다. 이는 DNSPolicy에서 생성 된 기본 네임 서버에 추가됩니다. 중복 된 네임 서버는 제거됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options": "DNS 확인자 옵션 목록입니다. 이것은 DNSPolicy에서 생성 된 기본 옵션과 병합됩니다. 중복 된 항목은 제거됩니다. 옵션에 제공된 해결 옵션은 기본 DNSPolicy에 표시되는 옵션보다 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options.items": "PodDNSConfigOption은 포드의 DNS 확인자 옵션을 정의합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options.items.properties.name": "필수입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.searches": "호스트 이름 조회를위한 DNS 검색 도메인 목록입니다. 이는 DNSPolicy에서 생성 된 기본 검색 경로에 추가됩니다. 중복 된 검색 경로는 제거됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.dnsPolicy": "포드에 대한 DNS 정책을 설정합니다. 기본값은 &quot;ClusterFirst&quot;입니다. 유효한 값은 &#39;ClusterFirstWithHostNet&#39;, &#39;ClusterFirst&#39;, &#39;Default&#39;또는 &#39;None&#39;입니다. DNSConfig에 제공된 DNS 매개 변수는 DNSPolicy로 선택한 정책과 병합됩니다. hostNetwork와 함께 DNS 옵션을 설정하려면 DNS 정책을 명시 적으로 &#39;ClusterFirstWithHostNet&#39;으로 지정해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.enableServiceLinks": "EnableServiceLinks는 서비스에 대한 정보를 Docker 링크의 구문과 일치하는 포드의 환경 변수에 삽입해야하는지 여부를 나타냅니다. 선택 사항 : 기본값은 true입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers": "이 포드에서 실행되는 임시 컨테이너 목록입니다. 임시 컨테이너는 디버깅과 같은 사용자 시작 작업을 수행하기 위해 기존 포드에서 실행될 수 있습니다. 이 목록은 포드를 만들 때 지정할 수 없으며 포드 사양을 업데이트하여 수정할 수 없습니다. 기존 포드에 임시 컨테이너를 추가하려면 포드의 ephemeralcontainers 하위 리소스를 사용합니다. 이 필드는 알파 수준이며 EphemeralContainers 기능을 활성화하는 서버에서만 적용됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items": "EphemeralContainer는 디버깅과 같이 사용자가 시작한 활동을 위해 기존 포드에 임시로 추가 할 수있는 컨테이너입니다. 임시 컨테이너에는 리소스 또는 예약 보장이 없으며 종료시 또는 포드가 제거되거나 다시 시작될 때 다시 시작되지 않습니다. 임시 컨테이너로 인해 포드가 리소스 할당을 초과하는 경우 포드가 제거 될 수 있습니다. 포드 사양을 직접 업데이트하여 임시 컨테이너를 추가 할 수 없습니다. 포드의 ephemeralcontainers 하위 리소스를 통해 추가해야하며 추가되면 포드 사양에 나타납니다. 이것은 EphemeralContainers 기능 플래그로 활성화 된 알파 기능입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle": "임시 컨테이너에는 수명주기가 허용되지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.name": "DNS_LABEL로 지정된 임시 컨테이너의 이름입니다. 이 이름은 모든 컨테이너, 초기화 컨테이너 및 임시 컨테이너간에 고유해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports": "임시 컨테이너에는 포트가 허용되지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources": "임시 컨테이너에는 리소스가 허용되지 않습니다. 임시 컨테이너는 포드에 이미 할당 된 예비 리소스를 사용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext": "임시 컨테이너에는 SecurityContext가 허용되지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.targetContainerName": "설정된 경우이 임시 컨테이너가 대상으로하는 PodSpec의 컨테이너 이름입니다. 임시 컨테이너는이 컨테이너의 네임 스페이스 (IPC, PID 등)에서 실행됩니다. 설정되지 않은 경우 팟 (Pod)에 대해 공유되는 네임 스페이스에서 임시 컨테이너가 실행됩니다. 컨테이너 런타임은이 기능을 지원해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.hostAliases": "HostAliases는 지정된 경우 포드의 호스트 파일에 삽입 될 호스트 및 IP의 선택적 목록입니다. 이는 hostNetwork가 아닌 포드에만 유효합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.hostAliases.items": "HostAlias는 포드의 호스트 파일에 항목으로 삽입 될 IP와 호스트 이름 간의 매핑을 보유합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.hostAliases.items.properties.hostnames": "위 IP 주소의 호스트 이름입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.hostAliases.items.properties.ip": "호스트 파일 항목의 IP 주소입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.hostIPC": "호스트의 ipc 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.hostNetwork": "이 포드에 대해 요청 된 호스트 네트워킹입니다. 호스트의 네트워크 네임 스페이스를 사용합니다. 이 옵션을 설정하면 사용할 포트를 지정해야합니다. 기본값은 false입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.hostPID": "호스트의 pid 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.hostname": "포드의 호스트 이름을 지정합니다. 지정하지 않으면 포드의 호스트 이름이 시스템 정의 값으로 설정됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.imagePullSecrets": "ImagePullSecrets는이 PodSpec에서 사용하는 이미지를 가져 오는 데 사용할 동일한 네임 스페이스의 보안 비밀에 대한 선택적 참조 목록입니다. 지정된 경우 이러한 비밀은 사용할 개별 풀러 구현에 전달됩니다. 예를 들어 docker의 경우 DockerConfig 유형 비밀 만 적용됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.imagePullSecrets.items": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.imagePullSecrets.items.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers": "포드에 속한 초기화 컨테이너 목록입니다. Init 컨테이너는 컨테이너가 시작되기 전에 순서대로 실행됩니다. 초기화 컨테이너가 실패하면 포드는 실패한 것으로 간주되며 restartPolicy에 따라 처리됩니다. 초기화 컨테이너 또는 일반 컨테이너의 이름은 모든 컨테이너에서 고유해야합니다. Init 컨테이너에는 수명주기 작업, 준비 상태 프로브, 활성 상태 프로브 또는 시작 프로브가 없을 수 있습니다. init 컨테이너의 resourceRequirements는 각 리소스 유형에 대해 가장 높은 요청 / 한계를 찾은 다음 해당 값의 최대 값 또는 일반 컨테이너의 합계를 사용하여 스케줄링 중에 고려됩니다. 제한은 비슷한 방식으로 초기화 컨테이너에 적용됩니다. Init 컨테이너는 현재 추가하거나 제거 할 수 없습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업보다 데이터를로드하거나 캐시를 워밍하는 데 오랜 시간이 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.nodeName": "NodeName은이 포드를 특정 노드에 예약하기위한 요청입니다. 비어 있지 않은 경우 스케줄러는 리소스 요구 사항에 적합하다고 가정하여이 포드를 해당 노드에 예약합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.nodeSelector": "NodeSelector는 포드가 노드에 맞도록 true 여야하는 선택기입니다. 포드가 해당 노드에서 예약되도록하려면 노드의 라벨과 일치해야하는 선택기입니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.overhead": "오버 헤드는 주어진 RuntimeClass에 대한 포드 실행과 관련된 리소스 오버 헤드를 나타냅니다. 이 필드는 RuntimeClass 승인 컨트롤러에 의해 승인 시간에 자동으로 채워집니다. RuntimeClass 승인 컨트롤러가 사용 설정된 경우 Pod 생성 요청에 오버 헤드를 설정하면 안됩니다. RuntimeClass 승인 컨트롤러는 오버 헤드가 이미 설정된 포드 생성 요청을 거부합니다. RuntimeClass가 PodSpec에서 구성되고 선택되면 오버 헤드는 해당 RuntimeClass에 정의 된 값으로 설정됩니다. 그렇지 않으면 설정되지 않은 상태로 유지되고 0으로 처리됩니다. 추가 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/688-pod-overhead/README.md이 필드는 Kubernetes v1.16부터 알파 수준이며 PodOverhead 기능을 활성화하는 서버에서 인정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.preemptionPolicy": "PreemptionPolicy는 우선 순위가 낮은 포드를 선점하기위한 정책입니다. Never 중 하나, PreemptLowerPriority. 설정되지 않은 경우 기본값은 PreemptLowerPriority입니다. 이 필드는 베타 수준이며 NonPreemptingPriority 기능 게이트에 의해 제어됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.priority": "우선 순위 값입니다. 다양한 시스템 구성 요소가이 필드를 사용하여 포드의 우선 순위를 찾습니다. Priority Admission Controller가 활성화되면 사용자가이 필드를 설정할 수 없습니다. 승인 컨트롤러는 PriorityClassName에서이 필드를 채 웁니다. 값이 높을수록 우선 순위가 높아집니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.priorityClassName": "지정된 경우 포드의 우선 순위를 나타냅니다. &quot;system-node-critical&quot;및 &quot;system-cluster-critical&quot;은 가장 높은 우선 순위를 나타내는 두 개의 특수 키워드이며 전자가 가장 높은 우선 순위입니다. 다른 이름은 해당 이름으로 PriorityClass 개체를 만들어 정의해야합니다. 지정되지 않은 경우 포드 우선 순위는 기본값이되거나 기본값이없는 경우 0이됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.readinessGates": "지정된 경우 모든 준비 게이트에서 포드 준비 상태를 평가합니다. 모든 컨테이너가 준비되고 준비 게이트에 지정된 모든 조건의 상태가 &quot;True&quot;이면 포드가 준비된 것입니다. 자세한 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/ 580-pod-readiness-gates / README.md",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.readinessGates.items": "PodReadinessGate에는 포드 조건에 대한 참조가 포함됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.readinessGates.items.properties.conditionType": "ConditionType은 유형이 일치하는 pod의 조건 목록에있는 조건을 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.restartPolicy": "포드 내의 모든 컨테이너에 대한 정책을 다시 시작합니다. Always, OnFailure, Never 중 하나입니다. 기본값은 항상입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.runtimeClassName": "RuntimeClassName은 node.k8s.io 그룹의 RuntimeClass 객체를 참조하며이 pod를 실행하는 데 사용해야합니다. RuntimeClass 리소스가 명명 된 클래스와 일치하지 않으면 포드가 실행되지 않습니다. 설정되지 않거나 비어있는 경우 기본 런타임 핸들러를 사용하는 비어있는 정의가있는 암시 적 클래스 인 &quot;레거시&quot;RuntimeClass가 사용됩니다. 추가 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/585-runtime-class/README.md 이것은 Kubernetes v1.14의 베타 기능입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.schedulerName": "지정된 경우 지정된 스케줄러가 포드를 발송합니다. 지정하지 않으면 포드가 기본 스케줄러에 의해 발송됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext": "SecurityContext는 포드 수준 보안 속성 및 공통 컨테이너 설정을 보유합니다. 옵션 : 기본값은 비어 있습니다. 각 필드의 기본값은 유형 설명을 참조하십시오.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.fsGroup": "포드의 모든 컨테이너에 적용되는 특수 보조 그룹입니다. 일부 볼륨 유형을 사용하면 Kubelet이 포드가 소유 할 해당 볼륨의 소유권을 변경할 수 있습니다. 1. 소유 GID는 FSGroup이됩니다. 2. setgid 비트가 설정됩니다 (볼륨에 생성 된 새 파일은 FSGroup이 소유 함) 3 권한 비트는 rw-rw ----와 OR로 연결됩니다. 설정되지 않은 경우 Kubelet은 볼륨의 소유권 및 권한을 수정하지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.fsGroupChangePolicy": "fsGroupChangePolicy는 Pod 내부에 노출되기 전에 볼륨의 소유권 및 권한을 변경하는 동작을 정의합니다. 이 필드는 fsGroup 기반 소유권 (및 권한)을 지원하는 볼륨 유형에만 적용됩니다. secret, configmaps 및 emptydir과 같은 임시 볼륨 유형에는 영향을 미치지 않습니다. 유효한 값은 &quot;OnRootMismatch&quot;및 &quot;Always&quot;입니다. 지정하지 않으면 기본값은 &quot;항상&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions": "모든 컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile": "이 포드의 컨테이너에서 사용할 seccomp 옵션입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.supplementalGroups": "컨테이너의 기본 GID와 함께 각 컨테이너에서 실행되는 첫 번째 프로세스에 적용된 그룹 목록입니다. 지정하지 않으면 컨테이너에 그룹이 추가되지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls": "Sysctls에는 포드에 사용되는 네임 스페이스가 지정된 sysctls 목록이 있습니다. 컨테이너 런타임에 의해 지원되지 않는 sysctls가있는 포드가 시작되지 않을 수 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items": "Sysctl은 설정할 커널 매개 변수를 정의합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items.properties.name": "설정할 속성의 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items.properties.value": "설정할 속성 값",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 컨테이너의 SecurityContext 내의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.serviceAccountName": "ServiceAccountName은이 포드를 실행하는 데 사용할 ServiceAccount의 이름입니다. 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.setHostnameAsFQDN": "true이면 포드의 호스트 이름이 리프 이름 (기본값)이 아닌 포드의 FQDN으로 구성됩니다. Linux 컨테이너에서 이는 커널의 hostname 필드 (struct utsname의 nodename 필드)에 FQDN을 설정하는 것을 의미합니다. Windows 컨테이너에서 이는 레지스트리 키 HKEY_LOCAL_MACHINE \\ SYSTEM \\ CurrentControlSet \\ Services \\ Tcpip \\ Parameters에 대한 호스트 이름의 레지스트리 값을 FQDN으로 설정하는 것을 의미합니다. 포드에 FQDN이 없으면 아무 효과가 없습니다. 기본값은 false입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.shareProcessNamespace": "pod의 모든 컨테이너간에 단일 프로세스 네임 스페이스를 공유합니다. 이것이 설정되면 컨테이너는 동일한 포드의 다른 컨테이너에서 프로세스를보고 신호를 보낼 수 있으며 각 컨테이너의 첫 번째 프로세스에는 PID 1이 할당되지 않습니다. HostPID와 ShareProcessNamespace를 둘 다 설정할 수는 없습니다. 선택 사항 : 기본값은 false입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.subdomain": "지정된 경우 정규화 된 포드 호스트 이름은 &quot;<hostname> .<subdomain> .<pod namespace> .svc.<cluster domain> &quot;. 지정하지 않으면 포드에 도메인 이름이 전혀 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.terminationGracePeriodSeconds": "포드가 정상적으로 종료되어야하는 선택적 기간 (초)입니다. 삭제 요청시 감소 될 수 있습니다. 값은 음이 아닌 정수 여야합니다. 값 0은 즉시 삭제를 나타냅니다. 이 값이 nil이면 기본 유예 기간이 대신 사용됩니다. 유예 기간은 포드에서 실행중인 프로세스가 종료 신호를 보낸 후의 기간 (초)과 프로세스가 강제 종료 신호로 중단되는 시간입니다. 이 값을 프로세스의 예상 정리 시간보다 길게 설정하십시오. 기본값은 30 초입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.tolerations": "지정된 경우 포드의 허용 오차입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.tolerations.items": "이 Toleration이 연결된 포드는 트리플과 일치하는 모든 오염을 견뎌냅니다.<key,value,effect> 일치 연산자 사용<operator> .",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.effect": "효과는 일치시킬 오염 효과를 나타냅니다. 비어 있음은 모든 오염 효과와 일치 함을 의미합니다. 지정된 경우 허용되는 값은 NoSchedule, PreferNoSchedule 및 NoExecute입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.key": "키는 관용이 적용되는 오염 키입니다. 비어 있음은 모든 오염 키와 일치 함을 의미합니다. 키가 비어 있으면 연산자가 존재해야합니다. 이 조합은 모든 값과 모든 키와 일치 함을 의미합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.operator": "연산자는 값에 대한 키의 관계를 나타냅니다. 유효한 연산자는 Exists 및 Equal입니다. 기본값은 Equal입니다. Exists는 값에 대한 와일드 카드와 동일하므로 포드가 특정 카테고리의 모든 taint를 허용 할 수 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.tolerationSeconds": "TolerationSeconds는 허용 범위 (NoExecute가 유효해야하며 그렇지 않으면이 필드는 무시 됨)가 taint를 허용하는 기간을 나타냅니다. 기본적으로 설정되어 있지 않으므로 오염을 영원히 견딜 수 있습니다 (제거하지 마십시오). 0 및 음수 값은 시스템에서 0 (즉시 제거)으로 처리됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.value": "Value는 허용치가 일치하는 오염 값입니다. 연산자가 Exists이면 값은 비어 있어야하고 그렇지 않으면 일반 문자열이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints": "TopologySpreadConstraints는 pod 그룹이 토폴로지 도메인에 어떻게 분산되어야하는지 설명합니다. 스케줄러는 제약 조건을 준수하는 방식으로 포드를 예약합니다. 모든 topologySpreadConstraint는 AND 처리됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items": "TopologySpreadConstraint는 지정된 토폴로지간에 일치하는 포드를 분산하는 방법을 지정합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector": "LabelSelector는 일치하는 포드를 찾는 데 사용됩니다. 이 라벨 선택기와 일치하는 포드는 해당 토폴로지 도메인의 포드 수를 결정하기 위해 계산됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.maxSkew": "MaxSkew는 포드가 고르지 않게 분산 될 수있는 정도를 설명합니다. `whenUnsatisfiable = DoNotSchedule` 인 경우 대상 토폴로지에서 일치하는 포드 수와 전역 최소값간에 허용되는 최대 차이입니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 1/1/0으로 확산되는 포드 : | zone1 | zone2 | zone3 | | P | P | | -MaxSkew가 1이면 들어오는 포드는 zone3에 1/1/1이되도록 예약 할 수 있습니다. zone1 (zone2)로 예약하면 zone1 (zone2)의 ActualSkew (2-0)가 MaxSkew (1)을 위반하게됩니다. -MaxSkew가 2이면 들어오는 포드를 모든 영역에 예약 할 수 있습니다. `whenUnsatisfiable = ScheduleAnyway` 인 경우이를 충족하는 토폴로지에 더 높은 우선 순위를 부여하는 데 사용됩니다. 필수 필드입니다. 기본값은 1이고 0은 허용되지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.topologyKey": "TopologyKey는 노드 레이블의 키입니다. 이 키와 동일한 값이있는 레이블이있는 노드는 동일한 토폴로지에있는 것으로 간주됩니다. 우리는 각각을 고려합니다<key, value> &quot;버킷&quot;으로 각 버킷에 균형 잡힌 수의 포드를 넣으십시오. 필수 필드입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.whenUnsatisfiable": "WhenUnsatisfiable은 스프레드 제약 조건을 충족하지 않는 경우 포드를 처리하는 방법을 나타냅니다. -DoNotSchedule (기본값)은 스케줄러가 스케줄하지 않도록 지시합니다. -ScheduleAnyway는 스케줄러에게 임의의 위치에서 포드를 예약하도록 지시하지만, 왜곡을 줄이는 데 도움이되는 토폴로지에 더 높은 우선 순위를 부여합니다. 해당 포드에 대해 가능한 모든 노드 할당이 일부 토폴로지에서 &quot;MaxSkew&quot;를 위반하는 경우에만 수신 포드에 대한 제약 조건이 &quot;불만족&quot;으로 간주됩니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 3/1/1로 확산되는 포드 : | zone1 | zone2 | zone3 | | PPP | P | P | WhenUnsatisfiable이 DoNotSchedule로 설정된 경우 들어오는 pod는 zone2 (zone3)의 ActualSkew (2-1)가 MaxSkew (1)를 충족하므로 zone2 (zone3) 만 3/2/1 (3/1/2)가되도록 예약 할 수 있습니다. 즉, 클러스터는 여전히 불균형 상태 일 수 있지만 스케줄러는 * 더 * 불균형 상태로 만들지 않습니다. 필수 필드입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes": "포드에 속한 컨테이너로 마운트 할 수있는 볼륨 목록입니다. 자세한 정보 : https://kubernetes.io/docs/concepts/storage/volumes",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items": "볼륨은 포드의 모든 컨테이너에서 액세스 할 수있는 포드의 명명 된 볼륨을 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore": "AWSElasticBlockStore는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 AWS 디스크 리소스를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다).",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.readOnly": "VolumeMounts의 ReadOnly 속성을 &quot;true&quot;로 강제 설정하려면 &quot;true&quot;를 지정합니다. 생략하면 기본값은 &quot;false&quot;입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.volumeID": "AWS에있는 영구 디스크 리소스의 고유 ID (Amazon EBS 볼륨). 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk": "AzureDisk는 호스트의 Azure 데이터 디스크 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.cachingMode": "호스트 캐싱 모드 : 없음, 읽기 전용, 읽기 쓰기.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskName": "Blob 저장소에있는 데이터 디스크의 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskURI": "Blob 저장소의 데이터 디스크 URI",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.kind": "예상 값 공유 : 스토리지 계정 당 여러 Blob 디스크 전용 : 스토리지 계정 당 단일 Blob 디스크 관리 : Azure 관리 데이터 디스크 (관리되는 가용성 집합에서만). 기본적으로 공유 됨",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile": "AzureFile은 호스트의 Azure 파일 서비스 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.secretName": "Azure Storage 계정 이름 및 키가 포함 된 비밀의 이름",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.shareName": "이름 공유",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs": "CephFS는 포드의 수명을 공유하는 호스트의 Ceph FS 마운트를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.monitors": "필수 : Monitors는 Ceph 모니터 모음입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.path": "선택 사항 : 전체 Ceph 트리가 아닌 마운트 된 루트로 사용되며 기본값은 /입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretFile": "선택 사항 : SecretFile은 사용자의 키 링 경로이며 기본값은 /etc/ceph/user.secret입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.user": "선택 사항 : 사용자는 rados 사용자 이름, 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder": "Cinder는 kubelets 호스트 머신에 연결되고 마운트 된 cinder 볼륨을 나타냅니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.volumeID": "cinder에서 볼륨을 식별하는 데 사용되는 볼륨 ID입니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap": "ConfigMap은이 볼륨을 채워야하는 configMap을 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi": "CSI (Container Storage Interface)는 특정 외부 CSI 드라이버 (베타 기능)에서 처리하는 임시 저장소를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.driver": "Driver는이 볼륨을 처리하는 CSI 드라이버의 이름입니다. 클러스터에 등록 된 올바른 이름은 관리자에게 문의하십시오.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.fsType": "마운트 할 파일 시스템 유형입니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 제공되지 않으면 적용 할 기본 파일 시스템을 결정하는 관련 CSI 드라이버에 빈 값이 전달됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.volumeAttributes": "VolumeAttributes는 CSI 드라이버에 전달되는 드라이버 별 속성을 저장합니다. 지원되는 값은 드라이버 설명서를 참조하십시오.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI": "DownwardAPI는이 볼륨을 채워야하는 포드에 대한 하향 API를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 사용할 모드 비트. 선택 사항이어야합니다. 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items": "항목은 하향 API 볼륨 파일 목록입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트는 0000과 0777 사이의 8 진수 값이거나 0과 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir": "EmptyDir는 포드의 수명을 공유하는 임시 디렉터리를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir.properties.medium": "이 디렉토리를 백업해야하는 저장 매체 유형입니다. 기본값은 노드의 기본 매체를 사용함을 의미하는 &quot;&quot;입니다. 빈 문자열 (기본값) 또는 메모리 여야합니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir.properties.sizeLimit": "이 EmptyDir 볼륨에 필요한 총 로컬 스토리지 양입니다. 크기 제한은 메모리 매체에도 적용됩니다. 메모리 매체 EmptyDir의 최대 사용량은 여기에 지정된 SizeLimit와 포드에있는 모든 컨테이너의 메모리 제한 합계 사이의 최소값입니다. 기본값은 제한이 정의되지 않았 음을 의미하는 nil입니다. 추가 정보 : http://kubernetes.io/docs/user-guide/volumes#emptydir",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral": "Ephemeral은 클러스터 스토리지 드라이버 (알파 기능)에서 처리하는 볼륨을 나타냅니다. 볼륨의 수명주기는 볼륨을 정의하는 포드에 연결되어 있습니다. 볼륨은 포드가 시작되기 전에 생성되고 포드가 제거되면 삭제됩니다. a) 포드가 실행되는 동안에 만 볼륨이 필요한 경우, b) 스냅 샷에서 복원 또는 용량 추적과 같은 일반 볼륨의 기능이 필요한 경우, c) 스토리지 클래스를 통해 스토리지 드라이버가 지정된 경우, d) 스토리지 드라이버 PersistentVolumeClaim을 통한 동적 볼륨 프로비저닝을 지원합니다 (이 볼륨 유형과 PersistentVolumeClaim 간의 연결에 대한 자세한 내용은 EphemeralVolumeSource 참조). 개별 포드의 수명주기보다 오래 지속되는 볼륨에 대해 PersistentVolumeClaim 또는 공급 업체별 API 중 하나를 사용합니다. CSI 드라이버가 그런 방식으로 사용되는 경우 경량 로컬 임시 볼륨에 CSI를 사용하십시오. 자세한 내용은 드라이버 설명서를 참조하십시오. 포드는 두 유형의 임시 볼륨과 영구 볼륨을 동시에 사용할 수 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate": "볼륨을 프로비저닝하기 위해 독립형 PVC를 작성하는 데 사용됩니다. 이 EphemeralVolumeSource가 포함 된 포드가 PVC의 소유자가됩니다. 즉, PVC가 포드와 함께 삭제됩니다. PVC의 이름은`<pod name> -<volume name> `여기서`<volume name> `는`PodSpec.Volumes` 배열 항목의 이름입니다. 연결된 이름이 PVC에 유효하지 않은 경우 (예 : 너무 긴 경우) 포드 유효성 검사는 포드를 거부합니다. 팟 (Pod)이 소유하지 않은 이름을 가진 기존 PVC는 실수로 관련없는 볼륨을 사용하지 않도록 팟 (Pod)에 사용되지 * 않습니다 *. 그런 다음 관련없는 PVC가 제거 될 때까지 포드 시작이 차단됩니다. 이러한 사전 생성 된 PVC를 포드에서 사용하려는 경우 포드가 존재하면 PVC를 포드에 대한 소유자 참조로 업데이트해야합니다. 일반적으로이 작업은 필요하지 않지만 손상된 클러스터를 수동으로 재구성 할 때 유용 할 수 있습니다. 이 필드는 읽기 전용이며 생성 된 후에는 Kubernetes에서 PVC를 변경하지 않습니다. 필수 항목이며 nil이 아니어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata": "PVC를 만들 때 PVC에 복사 할 레이블 및 주석을 포함 할 수 있습니다. 다른 필드는 허용되지 않으며 유효성 검사 중에 거부됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec": "PersistentVolumeClaim의 사양입니다. 전체 콘텐츠는이 템플릿에서 생성 된 PVC에 변경되지 않고 복사됩니다. PersistentVolumeClaim에서와 동일한 필드가 여기에서도 유효합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.accessModes": "AccessModes에는 볼륨에 필요한 액세스 모드가 포함되어 있습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource": "이 필드는 다음 중 하나를 지정하는 데 사용할 수 있습니다. * 기존 VolumeSnapshot 객체 (snapshot.storage.k8s.io/VolumeSnapshot-베타) * 기존 PVC (PersistentVolumeClaim) * 데이터 채우기 (알파)를 순서대로 구현하는 기존 사용자 지정 리소스 / 객체 VolumeSnapshot 개체 유형을 사용하려면 적절한 기능 게이트를 활성화해야합니다 (VolumeSnapshotDataSource 또는 AnyVolumeDataSource) 프로비저닝 도구 또는 외부 컨트롤러가 지정된 데이터 소스를 지원할 수있는 경우 지정된 데이터 소스의 내용을 기반으로 새 볼륨을 생성합니다. 지정된 데이터 소스가 지원되지 않는 경우 볼륨이 생성되지 않고 오류가 이벤트로보고됩니다. 앞으로 더 많은 데이터 소스 유형을 지원할 계획이며 제공자의 동작이 변경 될 수 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.apiGroup": "APIGroup은 참조되는 리소스에 대한 그룹입니다. APIGroup이 지정되지 않은 경우 지정된 종류가 코어 API 그룹에 있어야합니다. 다른 타사 유형의 경우 APIGroup이 필요합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.kind": "Kind는 참조되는 리소스 유형입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.name": "이름은 참조되는 리소스의 이름입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources": "리소스는 볼륨에 있어야하는 최소 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector": "바인딩을 고려할 볼륨에 대한 레이블 쿼리입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.storageClassName": "클레임에 필요한 StorageClass의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.volumeMode": "volumeMode는 클레임에 필요한 볼륨 유형을 정의합니다. 클레임 사양에 포함되지 않은 경우 파일 시스템의 가치가 암시됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.volumeName": "VolumeName은이 클레임을 뒷받침하는 PersistentVolume에 대한 바인딩 참조입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc": "FC는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 파이버 채널 리소스를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.lun": "선택 사항 : FC 대상 LUN 번호",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.targetWWNs": "선택 사항 : FC 대상 월드 와이드 이름 (WWN)",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.wwids": "선택 사항 : FC 볼륨 월드 와이드 식별자 (wwids) wwids 또는 targetWWN과 lun의 조합을 설정해야하지만 둘 다 동시에 설정할 수는 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume": "FlexVolume은 exec 기반 플러그인을 사용하여 프로비저닝 / 연결된 일반 볼륨 리소스를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.driver": "Driver는이 볼륨에 사용할 드라이버의 이름입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본 파일 시스템은 FlexVolume 스크립트에 따라 다릅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.options": "옵션 : 추가 명령 옵션 (있는 경우).",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker": "Flocker는 kubelet의 호스트 머신에 연결된 Flocker 볼륨을 나타냅니다. 이것은 실행중인 Flocker 제어 서비스에 따라 다릅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker.properties.datasetName": "메타 데이터로 저장된 데이터 세트의 이름-&gt; Flocker 용 데이터 세트의 이름은 더 이상 사용되지 않는 것으로 간주되어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker.properties.datasetUUID": "데이터 세트의 UUID입니다. 이것은 Flocker 데이터 세트의 고유 식별자입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk": "GCEPersistentDisk는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 GCE 디스크 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다). 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.pdName": "GCE에있는 PD 리소스의 고유 이름입니다. GCE에서 디스크를 식별하는 데 사용됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo": "GitRepo는 특정 개정판의 git 저장소를 나타냅니다. DEPRECATED : GitRepo는 더 이상 사용되지 않습니다. git 저장소로 컨테이너를 프로비저닝하려면 git을 사용하여 저장소를 복제하는 InitContainer에 EmptyDir을 마운트 한 다음 Pod의 컨테이너에 EmptyDir을 마운트합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.directory": "대상 디렉토리 이름. &#39;..&#39;을 포함하거나 시작하지 않아야합니다. 만약 &#39;.&#39; 제공되면 볼륨 디렉토리는 git 저장소가됩니다. 그렇지 않으면 지정된 경우 볼륨은 지정된 이름의 하위 디렉토리에 git 저장소를 포함합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.repository": "저장소 URL",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.revision": "지정된 개정에 대한 커밋 해시입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs": "Glusterfs는 포드의 수명을 공유하는 호스트의 Glusterfs 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.endpoints": "EndpointsName은 Glusterfs 토폴로지를 자세히 설명하는 엔드 포인트 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.path": "Path는 Glusterfs 볼륨 경로입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.readOnly": "여기서 ReadOnly는 Glusterfs 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath": "HostPath는 컨테이너에 직접 노출되는 호스트 시스템의 기존 파일 또는 디렉터리를 나타냅니다. 이것은 일반적으로 호스트 시스템을 볼 수있는 시스템 에이전트 또는 기타 권한있는 항목에 사용됩니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath.properties.path": "호스트의 디렉토리 경로입니다. 경로가 심볼릭 링크이면 실제 경로에 대한 링크를 따릅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath.properties.type": "HostPath 볼륨의 유형 기본값은 &quot;&quot;입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi": "ISCSI는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 ISCSI 디스크 리소스를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/iscsi/README.md",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthDiscovery": "iSCSI 검색 CHAP 인증 지원 여부",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthSession": "iSCSI 세션 CHAP 인증 지원 여부",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.initiatorName": "사용자 지정 iSCSI 이니시에이터 이름. initiatorName이 iscsiInterface와 동시에 지정되면 새로운 iSCSI 인터페이스<target portal> :<volume name> 연결을 위해 생성됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.iqn": "대상 iSCSI 정규화 이름.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.iscsiInterface": "iSCSI 전송을 사용하는 iSCSI 인터페이스 이름입니다. 기본값은 &#39;default&#39;(tcp)입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.lun": "iSCSI 대상 LUN 번호.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.portals": "iSCSI 대상 포털 목록. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.targetPortal": "iSCSI 대상 포털. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.name": "볼륨의 이름. DNS_LABEL이어야하며 포드 내에서 고유해야합니다. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs": "NFS는 포드의 수명을 공유하는 호스트의 NFS 마운트를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.path": "NFS 서버에서 내 보낸 경로입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.readOnly": "여기서 ReadOnly는 읽기 전용 권한으로 NFS 내보내기를 강제로 마운트합니다. 기본값은 false입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.server": "Server는 NFS 서버의 호스트 이름 또는 IP 주소입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim": "PersistentVolumeClaimVolumeSource는 동일한 네임 스페이스에있는 PersistentVolumeClaim에 대한 참조를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.claimName": "ClaimName은이 볼륨을 사용하는 pod와 동일한 네임 스페이스에있는 PersistentVolumeClaim의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.readOnly": "VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk": "PhotonPersistentDisk는 kubelets 호스트 머신에 연결되고 마운트 된 PhotonController 영구 디스크를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.pdID": "Photon Controller 영구 디스크를 식별하는 ID",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume": "PortworxVolume은 kubelets 호스트 머신에 연결되고 마운트 된 portworx 볼륨을 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.fsType": "FSType은 마운트 할 파일 시스템 유형을 나타냅니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.volumeID": "VolumeID는 Portworx 볼륨을 고유하게 식별합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected": "하나의 리소스 비밀, 구성 맵 및 하향 API에 대한 항목",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.defaultMode": "기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources": "볼륨 예측 목록",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items": "지원되는 다른 볼륨 유형과 함께 투영 될 수있는 투영",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap": "프로젝트 할 configMap 데이터에 대한 정보",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI": "프로젝트 할 downwardAPI 데이터에 대한 정보",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items": "Items는 DownwardAPIVolume 파일 목록입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트는 0000과 0777 사이의 8 진수 값이거나 0과 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret": "프로젝트 할 비밀 데이터에 대한 정보",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken": "프로젝트 할 serviceAccountToken 데이터에 대한 정보",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.audience": "청중은 토큰의 의도 된 청중입니다. 토큰 수신자는 토큰 대상에 지정된 식별자로 자신을 식별해야하며 그렇지 않으면 토큰을 거부해야합니다. 대상은 기본적으로 apiserver의 식별자입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.expirationSeconds": "ExpirationSeconds는 서비스 계정 토큰의 요청 된 유효 기간입니다. 토큰이 만료에 가까워지면 kubelet 볼륨 플러그인이 사전에 서비스 계정 토큰을 교체합니다. 토큰이 수명의 80 % 이상이거나 토큰이 24 시간 이상인 경우 kubelet은 토큰 순환을 시작합니다. 기본값은 1 시간이며 최소 10 분이어야합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.path": "경로는 토큰을 투영 할 파일의 마운트 지점에 상대적인 경로입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte": "Quobyte는 포드의 수명을 공유하는 호스트의 Quobyte 마운트를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.group": "볼륨 액세스를 매핑 할 그룹 기본값은 그룹 없음입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.readOnly": "여기서 ReadOnly는 Quobyte 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.registry": "레지스트리는 볼륨의 중앙 레지스트리 역할을하는 호스트 : 포트 쌍 (여러 항목은 쉼표로 구분됨)으로 문자열로 지정된 단일 또는 다중 Quobyte Registry 서비스를 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.tenant": "백엔드에서 주어진 Quobyte 볼륨을 소유하는 테넌트는 동적으로 프로비저닝 된 Quobyte 볼륨과 함께 사용되며 값은 플러그인에 의해 설정됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.user": "볼륨 액세스를 기본값에 매핑하는 사용자를 serivceaccount 사용자에게",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.volume": "Volume은 이미 생성 된 Quobyte 볼륨을 이름으로 참조하는 문자열입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd": "RBD는 포드의 수명을 공유하는 호스트의 Rados 블록 장치 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#rbd",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.image": "라도 스 이미지 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.keyring": "키링은 RBDUser의 키링 경로입니다. 기본값은 / etc / ceph / keyring입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.monitors": "Ceph 모니터 모음. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.pool": "라도 스 풀 이름. 기본값은 rbd입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.user": "rados 사용자 이름입니다. 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO": "ScaleIO는 Kubernetes 노드에 연결되고 마운트 된 ScaleIO 영구 볼륨을 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본값은 &quot;xfs&quot;입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.gateway": "ScaleIO API 게이트웨이의 호스트 주소입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.protectionDomain": "구성된 스토리지에 대한 ScaleIO 보호 도메인의 이름입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.sslEnabled": "게이트웨이와의 SSL 통신을 활성화 / 비활성화하는 플래그, 기본값은 false",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.storageMode": "볼륨의 스토리지가 ThickProvisioned인지 ThinProvisioned인지 여부를 나타냅니다. 기본값은 ThinProvisioned입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.storagePool": "보호 도메인과 연결된 ScaleIO 스토리지 풀입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.system": "ScaleIO에 구성된 스토리지 시스템의 이름입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.volumeName": "이 볼륨 소스와 연결된 ScaleIO 시스템에 이미 생성 된 볼륨의 이름입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret": "Secret은이 볼륨을 채워야하는 비밀을 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.secretName": "사용할 팟 (Pod) 네임 스페이스의 시크릿 이름입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos": "StorageOS는 Kubernetes 노드에 연결되고 마운트 된 StorageOS 볼륨을 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.volumeName": "VolumeName은 사람이 읽을 수있는 StorageOS 볼륨의 이름입니다. 볼륨 이름은 네임 스페이스 내에서만 고유합니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.volumeNamespace": "VolumeNamespace는 StorageOS 내의 볼륨 범위를 지정합니다. 네임 스페이스를 지정하지 않으면 Pod의 네임 스페이스가 사용됩니다. 이를 통해보다 긴밀한 통합을 위해 Kubernetes 이름 범위를 StorageOS 내에서 미러링 할 수 있습니다. 기본 동작을 재정의하려면 VolumeName을 임의의 이름으로 설정합니다. StorageOS 내에서 네임 스페이스를 사용하지 않는 경우 &quot;default&quot;로 설정하십시오. StorageOS 내에 존재하지 않는 네임 스페이스가 생성됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume": "VsphereVolume은 kubelets 호스트 시스템에 연결되고 마운트 된 vSphere 볼륨을 나타냅니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyID": "StoragePolicyName과 연결된 SPBM (스토리지 정책 기반 관리) 프로필 ID입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyName": "SPBM (스토리지 정책 기반 관리) 프로필 이름입니다.",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.volumePath": "vSphere 볼륨 vmdk를 식별하는 경로",
    "%CronJob.json.properties.spec.properties.jobTemplate.properties.spec.properties.ttlSecondsAfterFinished": "ttlSecondsAfterFinished는 실행을 완료 한 (완료 또는 실패) 작업의 수명을 제한합니다. 이 필드를 설정하면 작업이 완료된 후 ttlSecondsAfterFinished가 자동으로 삭제 될 수 있습니다. 작업이 삭제 될 때 해당 수명주기 보장 (예 : 종료 자)이 적용됩니다. 이 필드가 설정되어 있지 않으면 작업이 자동으로 삭제되지 않습니다. 이 필드를 0으로 설정하면 작업이 완료된 후 즉시 삭제할 수 있습니다. 이 필드는 알파 수준이며 TTLAfterFinished 기능을 활성화하는 서버에서만 적용됩니다.",
    "%CronJob.json.properties.spec.properties.schedule": "Cron 형식의 일정은 https://en.wikipedia.org/wiki/Cron을 참조하십시오.",
    "%CronJob.json.properties.spec.properties.startingDeadlineSeconds": "어떤 이유로 든 예약 된 시간을 놓친 경우 작업 시작을위한 선택적 기한 (초)입니다. 누락 된 작업 실행은 실패한 작업으로 계산됩니다.",
    "%CronJob.json.properties.spec.properties.successfulJobsHistoryLimit": "유지할 성공적으로 완료된 작업의 수입니다. 명시 적 0과 지정되지 않음을 구별하기위한 포인터입니다. 기본값은 3입니다.",
    "%CronJob.json.properties.spec.properties.suspend": "이 플래그는 컨트롤러에 후속 실행을 일시 중지하도록 지시하며 이미 시작된 실행에는 적용되지 않습니다. 기본값은 false입니다.",
    "%CronJob.json.properties.status": "크론 작업의 현재 상태입니다. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%CronJob.json.properties.status.properties.active": "현재 실행중인 작업에 대한 포인터 목록입니다.",
    "%CronJob.json.properties.status.properties.active.items": "ObjectReference에는 참조 된 객체를 검사하거나 수정할 수있는 충분한 정보가 포함되어 있습니다.",
    "%CronJob.json.properties.status.properties.active.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%CronJob.json.properties.status.properties.active.items.properties.fieldPath": "전체 개체 대신 개체의 일부를 참조하는 경우이 문자열에는 desiredState.manifest.containers [2]와 같은 유효한 JSON / Go 필드 액세스 문이 포함되어야합니다. 예를 들어, 객체 참조가 포드 내의 컨테이너에 대한 경우 &quot;spec.containers {name}&quot;( &quot;name&quot;은 이벤트를 트리거 한 컨테이너의 이름을 나타냄)와 같은 값을 취합니다. &quot;spec.containers [2]&quot;(이 포드에 인덱스 2가있는 컨테이너)가 지정된 컨테이너 이름이 없습니다. 이 구문은 객체의 일부를 참조하는 잘 정의 된 방법을 갖도록 선택되었습니다.",
    "%CronJob.json.properties.status.properties.active.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%CronJob.json.properties.status.properties.active.items.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%CronJob.json.properties.status.properties.active.items.properties.namespace": "리퍼 런트의 네임 스페이스입니다. 자세한 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
    "%CronJob.json.properties.status.properties.active.items.properties.resourceVersion": "이 참조가 작성된 특정 resourceVersion입니다 (있는 경우). 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
    "%CronJob.json.properties.status.properties.active.items.properties.uid": "리퍼 런트의 UID. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
    "%CronJob.json.properties.status.properties.lastScheduleTime": "작업이 성공적으로 예약 된 마지막 시간의 정보입니다.",
    "%HorizontalPodAutoscaler.json": "HorizontalPodAutoscaler는 지정된 지표에 따라 확장 하위 리소스를 구현하는 모든 리소스의 복제본 수를 자동으로 관리하는 수 평형 포드 자동 확장 처리의 구성입니다.",
    "%HorizontalPodAutoscaler.json.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%HorizontalPodAutoscaler.json.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%HorizontalPodAutoscaler.json.properties.metadata": "메타 데이터는 표준 개체 메타 데이터입니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%HorizontalPodAutoscaler.json.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%HorizontalPodAutoscaler.json.properties.spec": "spec은 자동 크기 조절기의 동작에 대한 사양입니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior": "동작은 위쪽 및 아래쪽 방향 (각각 scaleUp 및 scaleDown 필드)에서 대상의 크기 조정 동작을 구성합니다. 설정하지 않으면 확장 및 축소에 대한 기본 HPAScalingRules가 사용됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleDown": "scaleDown은 축소를위한 확장 정책입니다. 설정되지 않은 경우 기본값은 300 초 안정화 기간 (즉, 마지막 300 초에 대한 가장 높은 권장 사항이 사용됨)을 사용하여 minReplicas 포드로 축소 할 수 있도록 허용하는 것입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleDown.properties.policies": "정책은 확장 중에 사용할 수있는 잠재적 확장 정책 목록입니다. 하나 이상의 정책을 지정해야합니다. 그렇지 않으면 HPAScalingRules가 유효하지 않은 것으로 삭제됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleDown.properties.policies.items": "HPAScalingPolicy는 지정된 과거 간격 동안 true를 유지해야하는 단일 정책입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleDown.properties.policies.items.properties.periodSeconds": "PeriodSeconds는 정책이 참을 유지해야하는 기간을 지정합니다. PeriodSeconds는 0보다 크고 1800 (30 분) 이하 여야합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleDown.properties.policies.items.properties.type": "유형은 조정 정책을 지정하는 데 사용됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleDown.properties.policies.items.properties.value": "값에는 정책에서 허용하는 변경 금액이 포함됩니다. 0보다 커야합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleDown.properties.selectPolicy": "selectPolicy는 사용할 정책을 지정하는 데 사용됩니다. 설정하지 않으면 기본값 MaxPolicySelect가 사용됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleDown.properties.stabilizationWindowSeconds": "StabilizationWindowSeconds는 확대 또는 축소하는 동안 과거 권장 사항을 고려해야하는 시간 (초)입니다. StabilizationWindowSeconds는 0보다 크거나 같고 3600 (1 시간)보다 작거나 같아야합니다. 설정되지 않은 경우 기본값을 사용합니다.-스케일 업의 경우 : 0 (즉, 안정화가 수행되지 않음). -축소 : 300 (즉, 안정화 기간은 300 초입니다).",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleUp": "scaleUp은 확장을위한 확장 정책입니다. 설정되지 않은 경우 기본값은 다음 중 더 높습니다. * 60 초당 4 개 이하의 포드 증가 * 60 초당 포드 수의 두 배 안정화가 사용되지 않습니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleUp.properties.policies": "정책은 확장 중에 사용할 수있는 잠재적 확장 정책 목록입니다. 하나 이상의 정책을 지정해야합니다. 그렇지 않으면 HPAScalingRules가 유효하지 않은 것으로 삭제됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleUp.properties.policies.items": "HPAScalingPolicy는 지정된 과거 간격 동안 true를 유지해야하는 단일 정책입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleUp.properties.policies.items.properties.periodSeconds": "PeriodSeconds는 정책이 참을 유지해야하는 기간을 지정합니다. PeriodSeconds는 0보다 크고 1800 (30 분) 이하 여야합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleUp.properties.policies.items.properties.type": "유형은 조정 정책을 지정하는 데 사용됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleUp.properties.policies.items.properties.value": "값에는 정책에서 허용하는 변경 금액이 포함됩니다. 0보다 커야합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleUp.properties.selectPolicy": "selectPolicy는 사용할 정책을 지정하는 데 사용됩니다. 설정하지 않으면 기본값 MaxPolicySelect가 사용됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.behavior.properties.scaleUp.properties.stabilizationWindowSeconds": "StabilizationWindowSeconds는 확대 또는 축소하는 동안 과거 권장 사항을 고려해야하는 시간 (초)입니다. StabilizationWindowSeconds는 0보다 크거나 같고 3600 (1 시간)보다 작거나 같아야합니다. 설정되지 않은 경우 기본값을 사용합니다.-스케일 업의 경우 : 0 (즉, 안정화가 수행되지 않음). -축소 : 300 (즉, 안정화 기간은 300 초입니다).",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.maxReplicas": "maxReplicas는 자동 확장 처리가 확장 할 수있는 복제본 수의 상한입니다. minReplicas보다 작을 수는 없습니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics": "메트릭에는 원하는 복제본 수를 계산하는 데 사용할 사양이 포함됩니다 (모든 메트릭에서 최대 복제본 수가 사용됨). 원하는 복제본 수는 대상 값과 현재 값 간의 비율에 현재 포드 수를 곱하여 계산됩니다. Ergo, 사용 된 메트릭은 포드 수가 증가함에 따라 감소해야하며 그 반대의 경우도 마찬가지입니다. 각 메트릭 유형이 응답해야하는 방법에 대한 자세한 내용은 개별 메트릭 소스 유형을 참조하세요. 설정되지 않은 경우 기본 메트릭은 평균 CPU 사용률의 80 %로 설정됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items": "MetricSpec은 단일 측정 항목을 기반으로 확장하는 방법을 지정합니다 ( &#39;type&#39;및 다른 일치 필드 하나만 한 번에 설정해야 함).",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.external": "외부는 Kubernetes 개체와 연결되지 않은 전역 메트릭을 나타냅니다. 클러스터 외부에서 실행되는 구성 요소 (예 : 클라우드 메시징 서비스의 대기열 길이 또는 클러스터 외부에서 실행되는로드 밸런서의 QPS)에서 오는 정보를 기반으로 자동 확장이 가능합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.external.properties.metric": "메트릭은 이름과 선택기로 대상 메트릭을 식별합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.external.properties.metric.properties.name": "name은 주어진 측정 항목의 이름입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.external.properties.metric.properties.selector": "selector는 지정된 메트릭에 대한 표준 kubernetes 레이블 선택기의 문자열로 인코딩 된 형식입니다. 설정되면보다 구체적인 메트릭 범위 지정을 위해 메트릭 서버에 추가 매개 변수로 전달됩니다. 설정하지 않으면 metricName 만 메트릭을 수집하는 데 사용됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.external.properties.metric.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.external.properties.metric.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.external.properties.metric.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.external.properties.metric.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.external.properties.metric.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.external.properties.metric.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.external.properties.target": "target은 주어진 메트릭에 대한 목표 값을 지정합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.external.properties.target.properties.averageUtilization": "averageUtilization은 모든 관련 포드에 대한 리소스 메트릭 평균의 목표 값으로, 포드에 대해 요청 된 리소스 값의 백분율로 표시됩니다. 현재 리소스 메트릭 소스 유형에만 유효합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.external.properties.target.properties.averageValue": "averageValue는 모든 관련 포드 (수량)에 대한 메트릭 평균의 목표 값입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.external.properties.target.properties.type": "type은 메트릭 유형이 Utilization, Value 또는 AverageValue인지 여부를 나타냅니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.external.properties.target.properties.value": "value는 메트릭의 목표 값 (수량)입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object": "object는 단일 kubernetes 객체를 설명하는 측정 항목을 나타냅니다 (예 : Ingress 객체의 초당 조회수).",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.describedObject": "CrossVersionObjectReference에는 참조 된 리소스를 식별 할 수있는 충분한 정보가 포함되어 있습니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.describedObject.properties.apiVersion": "리퍼 런트의 API 버전",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.describedObject.properties.kind": "대상자의 종류 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds &quot;",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.describedObject.properties.name": "대상자의 이름; 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.metric": "메트릭은 이름과 선택기로 대상 메트릭을 식별합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.metric.properties.name": "name은 주어진 측정 항목의 이름입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.metric.properties.selector": "selector는 지정된 메트릭에 대한 표준 kubernetes 레이블 선택기의 문자열로 인코딩 된 형식입니다. 설정되면보다 구체적인 메트릭 범위 지정을 위해 메트릭 서버에 추가 매개 변수로 전달됩니다. 설정하지 않으면 metricName 만 메트릭을 수집하는 데 사용됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.metric.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.metric.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.metric.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.metric.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.metric.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.metric.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.target": "target은 주어진 메트릭에 대한 목표 값을 지정합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.target.properties.averageUtilization": "averageUtilization은 모든 관련 포드에 대한 리소스 메트릭 평균의 목표 값으로, 포드에 대해 요청 된 리소스 값의 백분율로 표시됩니다. 현재 리소스 메트릭 소스 유형에만 유효합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.target.properties.averageValue": "averageValue는 모든 관련 포드 (수량)에 대한 메트릭 평균의 목표 값입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.target.properties.type": "type은 메트릭 유형이 Utilization, Value 또는 AverageValue인지 여부를 나타냅니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.object.properties.target.properties.value": "value는 메트릭의 목표 값 (수량)입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.pods": "포드는 현재 확장 대상의 각 포드를 설명하는 지표를 나타냅니다 (예 : 초당 처리 된 트랜잭션). 값은 목표 값과 비교되기 전에 함께 평균화됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.pods.properties.metric": "메트릭은 이름과 선택기로 대상 메트릭을 식별합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.pods.properties.metric.properties.name": "name은 주어진 측정 항목의 이름입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.pods.properties.metric.properties.selector": "selector는 지정된 메트릭에 대한 표준 kubernetes 레이블 선택기의 문자열로 인코딩 된 형식입니다. 설정되면보다 구체적인 메트릭 범위 지정을 위해 메트릭 서버에 추가 매개 변수로 전달됩니다. 설정하지 않으면 metricName 만 메트릭을 수집하는 데 사용됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.pods.properties.metric.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.pods.properties.metric.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.pods.properties.metric.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.pods.properties.metric.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.pods.properties.metric.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.pods.properties.metric.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.pods.properties.target": "target은 주어진 메트릭에 대한 목표 값을 지정합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.pods.properties.target.properties.averageUtilization": "averageUtilization은 모든 관련 포드에 대한 리소스 메트릭 평균의 목표 값으로, 포드에 대해 요청 된 리소스 값의 백분율로 표시됩니다. 현재 리소스 메트릭 소스 유형에만 유효합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.pods.properties.target.properties.averageValue": "averageValue는 모든 관련 포드 (수량)에 대한 메트릭 평균의 목표 값입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.pods.properties.target.properties.type": "type은 메트릭 유형이 Utilization, Value 또는 AverageValue인지 여부를 나타냅니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.pods.properties.target.properties.value": "value는 메트릭의 목표 값 (수량)입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.resource": "리소스는 현재 확장 대상 (예 : CPU 또는 메모리)의 각 포드를 설명하는 Kubernetes에 알려진 리소스 측정 항목 (예 : 요청 및 제한에 지정된 측정 항목)을 나타냅니다. 이러한 측정 항목은 Kubernetes에 내장되어 있으며 &#39;pods&#39;소스를 사용하여 일반적인 포드 별 측정 항목에 사용할 수있는 옵션 외에 특별한 확장 옵션이 있습니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.resource.properties.name": "name은 해당 리소스의 이름입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.resource.properties.target": "target은 주어진 메트릭에 대한 목표 값을 지정합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.resource.properties.target.properties.averageUtilization": "averageUtilization은 모든 관련 포드에 대한 리소스 메트릭 평균의 목표 값으로, 포드에 대해 요청 된 리소스 값의 백분율로 표시됩니다. 현재 리소스 메트릭 소스 유형에만 유효합니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.resource.properties.target.properties.averageValue": "averageValue는 모든 관련 포드 (수량)에 대한 메트릭 평균의 목표 값입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.resource.properties.target.properties.type": "type은 메트릭 유형이 Utilization, Value 또는 AverageValue인지 여부를 나타냅니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.resource.properties.target.properties.value": "value는 메트릭의 목표 값 (수량)입니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.metrics.items.properties.type": "type은 메트릭 소스의 유형입니다. &quot;Object&quot;, &quot;Pods&quot;또는 &quot;Resource&quot;중 하나 여야하며, 각각은 개체의 일치하는 필드에 매핑됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.minReplicas": "minReplicas는 자동 확장 처리가 축소 할 수있는 복제본 수의 하한입니다. 기본값은 1 개입니다. 알파 기능 게이트 HPAScaleToZero가 활성화되고 하나 이상의 개체 또는 외부 메트릭이 구성된 경우 minReplicas는 0이 될 수 있습니다. 하나 이상의 메트릭 값을 사용할 수있는 한 확장이 활성화됩니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.scaleTargetRef": "CrossVersionObjectReference에는 참조 된 리소스를 식별 할 수있는 충분한 정보가 포함되어 있습니다.",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.scaleTargetRef.properties.apiVersion": "리퍼 런트의 API 버전",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.scaleTargetRef.properties.kind": "대상자의 종류 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds &quot;",
    "%HorizontalPodAutoscaler.json.properties.spec.properties.scaleTargetRef.properties.name": "대상자의 이름; 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%HorizontalPodAutoscaler.json.properties.status": "status는 자동 확장 처리에 대한 현재 정보입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.conditions": "조건은이 자동 확장 처리가 대상을 조정하는 데 필요한 조건의 집합이며 해당 조건이 충족되는지 여부를 나타냅니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.conditions.items": "HorizontalPodAutoscalerCondition은 특정 지점에서 HorizontalPodAutoscaler의 상태를 설명합니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.conditions.items.properties.lastTransitionTime": "lastTransitionTime은 조건이 한 상태에서 다른 상태로 전환 된 마지막 시간입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.conditions.items.properties.message": "메시지는 전환에 대한 세부 정보를 포함하는 사람이 읽을 수있는 설명입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.conditions.items.properties.reason": "이유는 조건의 마지막 전환 이유입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.conditions.items.properties.status": "status는 조건의 상태 (True, False, Unknown)입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.conditions.items.properties.type": "유형은 현재 상태를 설명합니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics": "currentMetrics는이 자동 확장 처리에서 사용하는 측정 항목의 마지막 읽기 상태입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items": "MetricStatus는 단일 메트릭의 마지막 읽기 상태를 설명합니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.external": "외부는 Kubernetes 개체와 연결되지 않은 전역 메트릭을 나타냅니다. 클러스터 외부에서 실행되는 구성 요소 (예 : 클라우드 메시징 서비스의 대기열 길이 또는 클러스터 외부에서 실행되는로드 밸런서의 QPS)에서 오는 정보를 기반으로 자동 확장이 가능합니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.external.properties.current": "current는 주어진 메트릭에 대한 현재 값을 포함합니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.external.properties.current.properties.averageUtilization": "currentAverageUtilization은 모든 관련 포드에 대한 리소스 메트릭 평균의 현재 값으로, 포드에 대해 요청 된 리소스 값의 백분율로 표시됩니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.external.properties.current.properties.averageValue": "averageValue는 모든 관련 포드 (수량)에 대한 메트릭 평균의 현재 값입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.external.properties.current.properties.value": "값은 메트릭의 현재 값 (수량)입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.external.properties.metric": "메트릭은 이름과 선택기로 대상 메트릭을 식별합니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.external.properties.metric.properties.name": "name은 주어진 측정 항목의 이름입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.external.properties.metric.properties.selector": "selector는 지정된 메트릭에 대한 표준 kubernetes 레이블 선택기의 문자열로 인코딩 된 형식입니다. 설정되면보다 구체적인 메트릭 범위 지정을 위해 메트릭 서버에 추가 매개 변수로 전달됩니다. 설정하지 않으면 metricName 만 메트릭을 수집하는 데 사용됩니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.external.properties.metric.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.external.properties.metric.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.external.properties.metric.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.external.properties.metric.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.external.properties.metric.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.external.properties.metric.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object": "object는 단일 kubernetes 객체를 설명하는 측정 항목을 나타냅니다 (예 : Ingress 객체의 초당 조회수).",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.current": "current는 주어진 메트릭에 대한 현재 값을 포함합니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.current.properties.averageUtilization": "currentAverageUtilization은 모든 관련 포드에 대한 리소스 메트릭 평균의 현재 값으로, 포드에 대해 요청 된 리소스 값의 백분율로 표시됩니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.current.properties.averageValue": "averageValue는 모든 관련 포드 (수량)에 대한 메트릭 평균의 현재 값입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.current.properties.value": "값은 메트릭의 현재 값 (수량)입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.describedObject": "CrossVersionObjectReference에는 참조 된 리소스를 식별 할 수있는 충분한 정보가 포함되어 있습니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.describedObject.properties.apiVersion": "리퍼 런트의 API 버전",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.describedObject.properties.kind": "대상자의 종류 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds &quot;",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.describedObject.properties.name": "대상자의 이름; 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.metric": "메트릭은 이름과 선택기로 대상 메트릭을 식별합니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.metric.properties.name": "name은 주어진 측정 항목의 이름입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.metric.properties.selector": "selector는 지정된 메트릭에 대한 표준 kubernetes 레이블 선택기의 문자열로 인코딩 된 형식입니다. 설정되면보다 구체적인 메트릭 범위 지정을 위해 메트릭 서버에 추가 매개 변수로 전달됩니다. 설정하지 않으면 metricName 만 메트릭을 수집하는 데 사용됩니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.metric.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.metric.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.metric.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.metric.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.metric.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.object.properties.metric.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.pods": "포드는 현재 확장 대상의 각 포드를 설명하는 지표를 나타냅니다 (예 : 초당 처리 된 트랜잭션). 값은 목표 값과 비교되기 전에 함께 평균화됩니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.pods.properties.current": "current는 주어진 메트릭에 대한 현재 값을 포함합니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.pods.properties.current.properties.averageUtilization": "currentAverageUtilization은 모든 관련 포드에 대한 리소스 메트릭 평균의 현재 값으로, 포드에 대해 요청 된 리소스 값의 백분율로 표시됩니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.pods.properties.current.properties.averageValue": "averageValue는 모든 관련 포드 (수량)에 대한 메트릭 평균의 현재 값입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.pods.properties.current.properties.value": "값은 메트릭의 현재 값 (수량)입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.pods.properties.metric": "메트릭은 이름과 선택기로 대상 메트릭을 식별합니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.pods.properties.metric.properties.name": "name은 주어진 측정 항목의 이름입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.pods.properties.metric.properties.selector": "selector는 지정된 메트릭에 대한 표준 kubernetes 레이블 선택기의 문자열로 인코딩 된 형식입니다. 설정되면보다 구체적인 메트릭 범위 지정을 위해 메트릭 서버에 추가 매개 변수로 전달됩니다. 설정하지 않으면 metricName 만 메트릭을 수집하는 데 사용됩니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.pods.properties.metric.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.pods.properties.metric.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.pods.properties.metric.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.pods.properties.metric.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.pods.properties.metric.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.pods.properties.metric.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.resource": "리소스는 현재 확장 대상 (예 : CPU 또는 메모리)의 각 포드를 설명하는 Kubernetes에 알려진 리소스 측정 항목 (예 : 요청 및 제한에 지정된 측정 항목)을 나타냅니다. 이러한 측정 항목은 Kubernetes에 내장되어 있으며 &#39;pods&#39;소스를 사용하여 일반적인 포드 별 측정 항목에 사용할 수있는 옵션 외에 특별한 확장 옵션이 있습니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.resource.properties.current": "current는 주어진 메트릭에 대한 현재 값을 포함합니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.resource.properties.current.properties.averageUtilization": "currentAverageUtilization은 모든 관련 포드에 대한 리소스 메트릭 평균의 현재 값으로, 포드에 대해 요청 된 리소스 값의 백분율로 표시됩니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.resource.properties.current.properties.averageValue": "averageValue는 모든 관련 포드 (수량)에 대한 메트릭 평균의 현재 값입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.resource.properties.current.properties.value": "값은 메트릭의 현재 값 (수량)입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.resource.properties.name": "이름은 해당 리소스의 이름입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentMetrics.items.properties.type": "type은 메트릭 소스의 유형입니다. &quot;개체&quot;, &quot;포드&quot;또는 &quot;리소스&quot;중 하나이며, 각각 개체의 일치하는 필드에 해당합니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.currentReplicas": "currentReplicas는 자동 확장 처리에서 마지막으로 확인한 것처럼이 자동 확장 처리에서 관리하는 pod의 현재 복제본 수입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.desiredReplicas": "desiredReplicas는 자동 확장 처리에서 마지막으로 계산 한대로이 자동 확장 처리에서 관리하는 pod의 원하는 복제본 수입니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.lastScaleTime": "lastScaleTime은 HorizontalPodAutoscaler가 포드 수를 마지막으로 조정 한 시간으로, 자동 확장 처리에서 포드 수가 변경되는 빈도를 제어하는 데 사용됩니다.",
    "%HorizontalPodAutoscaler.json.properties.status.properties.observedGeneration": "observeGeneration은이 자동 크기 조절기에서 관찰 된 가장 최근 세대입니다.",
    "%Job.json": "작업은 단일 작업의 구성을 나타냅니다.",
    "%Job.json.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%Job.json.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%Job.json.properties.metadata": "표준 개체의 메타 데이터. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    "%Job.json.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%Job.json.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%Job.json.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%Job.json.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%Job.json.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%Job.json.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%Job.json.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%Job.json.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%Job.json.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%Job.json.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%Job.json.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%Job.json.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%Job.json.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Job.json.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%Job.json.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%Job.json.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%Job.json.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%Job.json.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%Job.json.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%Job.json.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%Job.json.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Job.json.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%Job.json.properties.spec": "원하는 작업 동작의 지정. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%Job.json.properties.spec.properties.activeDeadlineSeconds": "시스템이 종료를 시도하기 전에 작업이 활성화 될 수있는 startTime에 상대적인 기간 (초)을 지정합니다. 값은 양의 정수 여야합니다.",
    "%Job.json.properties.spec.properties.backoffLimit": "이 작업이 실패한 것으로 표시하기 전에 재시도 횟수를 지정합니다. 기본값은 6입니다.",
    "%Job.json.properties.spec.properties.completions": "작업을 실행해야하는 성공적으로 완료된 포드의 원하는 수를 지정합니다. nil로 설정하면 모든 pod의 성공은 모든 pod의 성공을 나타내며 병렬 처리가 양수 값을 가질 수 있음을 의미합니다. 1로 설정하면 병렬 처리가 1로 제한되고 해당 포드의 성공은 작업의 성공을 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
    "%Job.json.properties.spec.properties.manualSelector": "manualSelector는 포드 레이블 및 포드 선택기 생성을 제어합니다. 수행중인 작업이 확실하지 않으면 &#39;manualSelector&#39;를 설정하지 않은 상태로 둡니다. false이거나 설정되지 않은 경우 시스템은이 작업에 고유 한 레이블을 선택하고 해당 레이블을 포드 템플릿에 추가합니다. true이면 사용자가 고유 한 레이블을 선택하고 선택기를 지정해야합니다. 고유 한 레이블을 선택하지 않으면이 작업과 다른 작업이 제대로 작동하지 않을 수 있습니다. 그러나 이전`extensions / v1beta1` API로 생성 된 작업에는`manualSelector = true`가 표시 될 수 있습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector",
    "%Job.json.properties.spec.properties.parallelism": "주어진 시간에 작업이 실행되어야하는 최대 원하는 포드 수를 지정합니다. 정상 상태에서 실행중인 포드의 실제 수는 ((.spec.completions-.status.successful) &lt;.spec.parallelism), 즉 남은 작업이 최대 병렬 처리보다 적을 때이 숫자보다 적습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
    "%Job.json.properties.spec.properties.selector": "포드 수와 일치해야하는 포드에 대한 라벨 쿼리입니다. 일반적으로 시스템은이 필드를 설정합니다. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
    "%Job.json.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Job.json.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Job.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Job.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Job.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Job.json.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Job.json.properties.spec.properties.template": "작업을 실행할 때 생성 될 포드를 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
    "%Job.json.properties.spec.properties.template.properties.metadata": "표준 개체의 메타 데이터. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Job.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%Job.json.properties.spec.properties.template.properties.spec": "pod의 원하는 동작에 대한 사양입니다. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.activeDeadlineSeconds": "시스템이 실패로 표시하고 연관된 컨테이너를 강제 종료하기 전에 팟 (Pod)이 StartTime에 상대적으로 노드에서 활성화 될 수있는 선택적 기간 (초)입니다. 값은 양의 정수 여야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity": "지정된 경우 포드의 예약 제약",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity": "포드에 대한 노드 선호도 예약 규칙을 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 노드가 대응하는 matchExpressions와 일치하면 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "빈 선호 스케줄링 용어는 암시 적 가중치가 0 인 모든 개체와 일치합니다 (즉, 작동하지 않음). null 선호 스케줄링 용어는 객체와 일치하지 않습니다 (즉, 작동하지 않음).",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference": "해당 가중치와 관련된 노드 선택기 용어입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 nodeSelectorTerm 일치와 관련된 가중치입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms": "필수입니다. 노드 선택기 용어 목록입니다. 용어는 OR로 연결됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items": "null 또는 빈 노드 선택기 용어는 개체와 일치하지 않습니다. 이들의 요구 사항은 AND입니다. TopologySelectorTerm 유형은 NodeSelectorTerm의 하위 집합을 구현합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity": "포드 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 배치).",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 및 노드가 대응하는 podAffinityTerm과 일치하는 포드를 갖는 경우 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity": "포드 반 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 두지 않음).",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 반친 화성 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치의 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 반친 화성 표현식 등)을 충족하는 각 노드에 대해 다음 요소를 반복하여 합계를 계산합니다. 이 필드와 노드에 해당 podAffinityTerm과 일치하는 포드가있는 경우 합계에 &quot;weight&quot;를 추가합니다. 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 반친 화성 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 반친 화성 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않는 경우 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.automountServiceAccountToken": "AutomountServiceAccountToken은 서비스 계정 토큰을 자동으로 마운트해야하는지 여부를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers": "포드에 속한 컨테이너 목록입니다. 현재 컨테이너를 추가하거나 제거 할 수 없습니다. 포드에는 컨테이너가 하나 이상 있어야합니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업보다 데이터를로드하거나 캐시를 워밍하는 데 오랜 시간이 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.dnsConfig": "포드의 DNS 매개 변수를 지정합니다. 여기에 지정된 매개 변수는 DNSPolicy를 기반으로 생성 된 DNS 구성에 병합됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.nameservers": "DNS 이름 서버 IP 주소 목록입니다. 이는 DNSPolicy에서 생성 된 기본 네임 서버에 추가됩니다. 중복 된 네임 서버는 제거됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options": "DNS 확인자 옵션 목록입니다. 이것은 DNSPolicy에서 생성 된 기본 옵션과 병합됩니다. 중복 된 항목은 제거됩니다. 옵션에 제공된 해결 옵션은 기본 DNSPolicy에 표시되는 옵션보다 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options.items": "PodDNSConfigOption은 포드의 DNS 확인자 옵션을 정의합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options.items.properties.name": "필수입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.searches": "호스트 이름 조회를위한 DNS 검색 도메인 목록입니다. 이는 DNSPolicy에서 생성 된 기본 검색 경로에 추가됩니다. 중복 된 검색 경로는 제거됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.dnsPolicy": "포드에 대한 DNS 정책을 설정합니다. 기본값은 &quot;ClusterFirst&quot;입니다. 유효한 값은 &#39;ClusterFirstWithHostNet&#39;, &#39;ClusterFirst&#39;, &#39;Default&#39;또는 &#39;None&#39;입니다. DNSConfig에 제공된 DNS 매개 변수는 DNSPolicy로 선택한 정책과 병합됩니다. hostNetwork와 함께 DNS 옵션을 설정하려면 DNS 정책을 명시 적으로 &#39;ClusterFirstWithHostNet&#39;으로 지정해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.enableServiceLinks": "EnableServiceLinks는 서비스에 대한 정보를 Docker 링크의 구문과 일치하는 포드의 환경 변수에 삽입해야하는지 여부를 나타냅니다. 선택 사항 : 기본값은 true입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers": "이 포드에서 실행되는 임시 컨테이너 목록입니다. 임시 컨테이너는 디버깅과 같은 사용자 시작 작업을 수행하기 위해 기존 포드에서 실행될 수 있습니다. 이 목록은 포드를 만들 때 지정할 수 없으며 포드 사양을 업데이트하여 수정할 수 없습니다. 기존 포드에 임시 컨테이너를 추가하려면 포드의 ephemeralcontainers 하위 리소스를 사용합니다. 이 필드는 알파 수준이며 EphemeralContainers 기능을 활성화하는 서버에서만 적용됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items": "EphemeralContainer는 디버깅과 같이 사용자가 시작한 활동을 위해 기존 포드에 임시로 추가 할 수있는 컨테이너입니다. 임시 컨테이너에는 리소스 또는 예약 보장이 없으며 종료시 또는 포드가 제거되거나 다시 시작될 때 다시 시작되지 않습니다. 임시 컨테이너로 인해 포드가 리소스 할당을 초과하는 경우 포드가 제거 될 수 있습니다. 포드 사양을 직접 업데이트하여 임시 컨테이너를 추가 할 수 없습니다. 포드의 ephemeralcontainers 하위 리소스를 통해 추가해야하며 추가되면 포드 사양에 나타납니다. 이것은 EphemeralContainers 기능 플래그로 활성화 된 알파 기능입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle": "임시 컨테이너에는 수명주기가 허용되지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.name": "DNS_LABEL로 지정된 임시 컨테이너의 이름입니다. 이 이름은 모든 컨테이너, 초기화 컨테이너 및 임시 컨테이너간에 고유해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports": "임시 컨테이너에는 포트가 허용되지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources": "임시 컨테이너에는 리소스가 허용되지 않습니다. 임시 컨테이너는 포드에 이미 할당 된 예비 리소스를 사용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext": "임시 컨테이너에는 SecurityContext가 허용되지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.targetContainerName": "설정된 경우이 임시 컨테이너가 대상으로하는 PodSpec의 컨테이너 이름입니다. 임시 컨테이너는이 컨테이너의 네임 스페이스 (IPC, PID 등)에서 실행됩니다. 설정되지 않은 경우 팟 (Pod)에 대해 공유되는 네임 스페이스에서 임시 컨테이너가 실행됩니다. 컨테이너 런타임은이 기능을 지원해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.hostAliases": "HostAliases는 지정된 경우 포드의 호스트 파일에 삽입 될 호스트 및 IP의 선택적 목록입니다. 이는 hostNetwork가 아닌 포드에만 유효합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.hostAliases.items": "HostAlias는 포드의 호스트 파일에 항목으로 삽입 될 IP와 호스트 이름 간의 매핑을 보유합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.hostAliases.items.properties.hostnames": "위 IP 주소의 호스트 이름입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.hostAliases.items.properties.ip": "호스트 파일 항목의 IP 주소입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.hostIPC": "호스트의 ipc 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.hostNetwork": "이 포드에 대해 요청 된 호스트 네트워킹입니다. 호스트의 네트워크 네임 스페이스를 사용합니다. 이 옵션을 설정하면 사용할 포트를 지정해야합니다. 기본값은 false입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.hostPID": "호스트의 pid 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.hostname": "포드의 호스트 이름을 지정합니다. 지정하지 않으면 포드의 호스트 이름이 시스템 정의 값으로 설정됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.imagePullSecrets": "ImagePullSecrets는이 PodSpec에서 사용하는 이미지를 가져 오는 데 사용할 동일한 네임 스페이스의 보안 비밀에 대한 선택적 참조 목록입니다. 지정된 경우 이러한 비밀은 사용할 개별 풀러 구현에 전달됩니다. 예를 들어 docker의 경우 DockerConfig 유형 비밀 만 적용됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.imagePullSecrets.items": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.imagePullSecrets.items.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers": "포드에 속한 초기화 컨테이너 목록입니다. Init 컨테이너는 컨테이너가 시작되기 전에 순서대로 실행됩니다. 초기화 컨테이너가 실패하면 포드는 실패한 것으로 간주되며 restartPolicy에 따라 처리됩니다. 초기화 컨테이너 또는 일반 컨테이너의 이름은 모든 컨테이너에서 고유해야합니다. Init 컨테이너에는 수명주기 작업, 준비 상태 프로브, 활성 상태 프로브 또는 시작 프로브가 없을 수 있습니다. init 컨테이너의 resourceRequirements는 각 리소스 유형에 대해 가장 높은 요청 / 한계를 찾은 다음 해당 값의 최대 값 또는 일반 컨테이너의 합계를 사용하여 스케줄링 중에 고려됩니다. 제한은 비슷한 방식으로 초기화 컨테이너에 적용됩니다. Init 컨테이너는 현재 추가하거나 제거 할 수 없습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업보다 데이터를로드하거나 캐시를 워밍하는 데 오랜 시간이 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.nodeName": "NodeName은이 포드를 특정 노드에 예약하기위한 요청입니다. 비어 있지 않은 경우 스케줄러는 리소스 요구 사항에 적합하다고 가정하여이 포드를 해당 노드에 예약합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.nodeSelector": "NodeSelector는 포드가 노드에 맞도록 true 여야하는 선택기입니다. 포드가 해당 노드에서 예약되도록하려면 노드의 라벨과 일치해야하는 선택기입니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.overhead": "오버 헤드는 주어진 RuntimeClass에 대한 포드 실행과 관련된 리소스 오버 헤드를 나타냅니다. 이 필드는 RuntimeClass 승인 컨트롤러에 의해 승인 시간에 자동으로 채워집니다. RuntimeClass 승인 컨트롤러가 사용 설정된 경우 Pod 생성 요청에 오버 헤드를 설정하면 안됩니다. RuntimeClass 승인 컨트롤러는 오버 헤드가 이미 설정된 포드 생성 요청을 거부합니다. RuntimeClass가 PodSpec에서 구성되고 선택되면 오버 헤드는 해당 RuntimeClass에 정의 된 값으로 설정됩니다. 그렇지 않으면 설정되지 않은 상태로 유지되고 0으로 처리됩니다. 추가 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/688-pod-overhead/README.md이 필드는 Kubernetes v1.16부터 알파 수준이며 PodOverhead 기능을 활성화하는 서버에서 인정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.preemptionPolicy": "PreemptionPolicy는 우선 순위가 낮은 포드를 선점하기위한 정책입니다. Never 중 하나, PreemptLowerPriority. 설정되지 않은 경우 기본값은 PreemptLowerPriority입니다. 이 필드는 베타 수준이며 NonPreemptingPriority 기능 게이트에 의해 제어됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.priority": "우선 순위 값입니다. 다양한 시스템 구성 요소가이 필드를 사용하여 포드의 우선 순위를 찾습니다. Priority Admission Controller가 활성화되면 사용자가이 필드를 설정할 수 없습니다. 승인 컨트롤러는 PriorityClassName에서이 필드를 채 웁니다. 값이 높을수록 우선 순위가 높아집니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.priorityClassName": "지정된 경우 포드의 우선 순위를 나타냅니다. &quot;system-node-critical&quot;및 &quot;system-cluster-critical&quot;은 가장 높은 우선 순위를 나타내는 두 개의 특수 키워드이며 전자가 가장 높은 우선 순위입니다. 다른 이름은 해당 이름으로 PriorityClass 개체를 만들어 정의해야합니다. 지정되지 않은 경우 포드 우선 순위는 기본값이되거나 기본값이없는 경우 0이됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.readinessGates": "지정된 경우 모든 준비 게이트에서 포드 준비 상태를 평가합니다. 모든 컨테이너가 준비되고 준비 게이트에 지정된 모든 조건의 상태가 &quot;True&quot;이면 포드가 준비된 것입니다. 자세한 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/ 580-pod-readiness-gates / README.md",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.readinessGates.items": "PodReadinessGate에는 포드 조건에 대한 참조가 포함됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.readinessGates.items.properties.conditionType": "ConditionType은 유형이 일치하는 pod의 조건 목록에있는 조건을 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.restartPolicy": "포드 내의 모든 컨테이너에 대한 정책을 다시 시작합니다. Always, OnFailure, Never 중 하나입니다. 기본값은 항상입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.runtimeClassName": "RuntimeClassName은 node.k8s.io 그룹의 RuntimeClass 객체를 참조하며이 pod를 실행하는 데 사용해야합니다. RuntimeClass 리소스가 명명 된 클래스와 일치하지 않으면 포드가 실행되지 않습니다. 설정되지 않거나 비어있는 경우 기본 런타임 핸들러를 사용하는 비어있는 정의가있는 암시 적 클래스 인 &quot;레거시&quot;RuntimeClass가 사용됩니다. 추가 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/585-runtime-class/README.md 이것은 Kubernetes v1.14의 베타 기능입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.schedulerName": "지정된 경우 지정된 스케줄러가 포드를 발송합니다. 지정하지 않으면 포드가 기본 스케줄러에 의해 발송됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext": "SecurityContext는 포드 수준 보안 속성 및 공통 컨테이너 설정을 보유합니다. 옵션 : 기본값은 비어 있습니다. 각 필드의 기본값은 유형 설명을 참조하십시오.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.fsGroup": "포드의 모든 컨테이너에 적용되는 특수 보조 그룹입니다. 일부 볼륨 유형을 사용하면 Kubelet이 포드가 소유 할 해당 볼륨의 소유권을 변경할 수 있습니다. 1. 소유 GID는 FSGroup이됩니다. 2. setgid 비트가 설정됩니다 (볼륨에 생성 된 새 파일은 FSGroup이 소유 함) 3 권한 비트는 rw-rw ----와 OR로 연결됩니다. 설정되지 않은 경우 Kubelet은 볼륨의 소유권 및 권한을 수정하지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.fsGroupChangePolicy": "fsGroupChangePolicy는 Pod 내부에 노출되기 전에 볼륨의 소유권 및 권한을 변경하는 동작을 정의합니다. 이 필드는 fsGroup 기반 소유권 (및 권한)을 지원하는 볼륨 유형에만 적용됩니다. secret, configmaps 및 emptydir과 같은 임시 볼륨 유형에는 영향을 미치지 않습니다. 유효한 값은 &quot;OnRootMismatch&quot;및 &quot;Always&quot;입니다. 지정하지 않으면 기본값은 &quot;항상&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions": "모든 컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile": "이 포드의 컨테이너에서 사용할 seccomp 옵션입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.supplementalGroups": "컨테이너의 기본 GID와 함께 각 컨테이너에서 실행되는 첫 번째 프로세스에 적용된 그룹 목록입니다. 지정하지 않으면 컨테이너에 그룹이 추가되지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls": "Sysctls에는 포드에 사용되는 네임 스페이스가 지정된 sysctls 목록이 있습니다. 컨테이너 런타임에 의해 지원되지 않는 sysctls가있는 포드가 시작되지 않을 수 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items": "Sysctl은 설정할 커널 매개 변수를 정의합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items.properties.name": "설정할 속성의 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items.properties.value": "설정할 속성 값",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 컨테이너의 SecurityContext 내의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.serviceAccountName": "ServiceAccountName은이 포드를 실행하는 데 사용할 ServiceAccount의 이름입니다. 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.setHostnameAsFQDN": "true이면 포드의 호스트 이름이 리프 이름 (기본값)이 아닌 포드의 FQDN으로 구성됩니다. Linux 컨테이너에서 이는 커널의 hostname 필드 (struct utsname의 nodename 필드)에 FQDN을 설정하는 것을 의미합니다. Windows 컨테이너에서 이는 레지스트리 키 HKEY_LOCAL_MACHINE \\ SYSTEM \\ CurrentControlSet \\ Services \\ Tcpip \\ Parameters에 대한 호스트 이름의 레지스트리 값을 FQDN으로 설정하는 것을 의미합니다. 포드에 FQDN이 없으면 아무 효과가 없습니다. 기본값은 false입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.shareProcessNamespace": "pod의 모든 컨테이너간에 단일 프로세스 네임 스페이스를 공유합니다. 이것이 설정되면 컨테이너는 동일한 포드의 다른 컨테이너에서 프로세스를보고 신호를 보낼 수 있으며 각 컨테이너의 첫 번째 프로세스에는 PID 1이 할당되지 않습니다. HostPID와 ShareProcessNamespace를 둘 다 설정할 수는 없습니다. 선택 사항 : 기본값은 false입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.subdomain": "지정된 경우 정규화 된 포드 호스트 이름은 &quot;<hostname> .<subdomain> .<pod namespace> .svc.<cluster domain> &quot;. 지정하지 않으면 포드에 도메인 이름이 전혀 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.terminationGracePeriodSeconds": "포드가 정상적으로 종료되어야하는 선택적 기간 (초)입니다. 삭제 요청시 감소 될 수 있습니다. 값은 음이 아닌 정수 여야합니다. 값 0은 즉시 삭제를 나타냅니다. 이 값이 nil이면 기본 유예 기간이 대신 사용됩니다. 유예 기간은 포드에서 실행중인 프로세스가 종료 신호를 보낸 후의 기간 (초)과 프로세스가 강제 종료 신호로 중단되는 시간입니다. 이 값을 프로세스의 예상 정리 시간보다 길게 설정하십시오. 기본값은 30 초입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.tolerations": "지정된 경우 포드의 허용 오차입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.tolerations.items": "이 Toleration이 연결된 포드는 트리플과 일치하는 모든 오염을 견뎌냅니다.<key,value,effect> 일치 연산자 사용<operator> .",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.effect": "효과는 일치시킬 오염 효과를 나타냅니다. 비어 있음은 모든 오염 효과와 일치 함을 의미합니다. 지정된 경우 허용되는 값은 NoSchedule, PreferNoSchedule 및 NoExecute입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.key": "키는 관용이 적용되는 오염 키입니다. 비어 있음은 모든 오염 키와 일치 함을 의미합니다. 키가 비어 있으면 연산자가 존재해야합니다. 이 조합은 모든 값과 모든 키와 일치 함을 의미합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.operator": "연산자는 값에 대한 키의 관계를 나타냅니다. 유효한 연산자는 Exists 및 Equal입니다. 기본값은 Equal입니다. Exists는 값에 대한 와일드 카드와 동일하므로 포드가 특정 카테고리의 모든 taint를 허용 할 수 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.tolerationSeconds": "TolerationSeconds는 허용 범위 (NoExecute가 유효해야하며 그렇지 않으면이 필드는 무시 됨)가 taint를 허용하는 기간을 나타냅니다. 기본적으로 설정되어 있지 않으므로 오염을 영원히 견딜 수 있습니다 (제거하지 마십시오). 0 및 음수 값은 시스템에서 0 (즉시 제거)으로 처리됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.value": "Value는 허용치가 일치하는 오염 값입니다. 연산자가 Exists이면 값은 비어 있어야하고 그렇지 않으면 일반 문자열이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints": "TopologySpreadConstraints는 pod 그룹이 토폴로지 도메인에 어떻게 분산되어야하는지 설명합니다. 스케줄러는 제약 조건을 준수하는 방식으로 포드를 예약합니다. 모든 topologySpreadConstraint는 AND 처리됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items": "TopologySpreadConstraint는 지정된 토폴로지간에 일치하는 포드를 분산하는 방법을 지정합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector": "LabelSelector는 일치하는 포드를 찾는 데 사용됩니다. 이 라벨 선택기와 일치하는 포드는 해당 토폴로지 도메인의 포드 수를 결정하기 위해 계산됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.maxSkew": "MaxSkew는 포드가 고르지 않게 분산 될 수있는 정도를 설명합니다. `whenUnsatisfiable = DoNotSchedule` 인 경우 대상 토폴로지에서 일치하는 포드 수와 전역 최소값간에 허용되는 최대 차이입니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 1/1/0으로 확산되는 포드 : | zone1 | zone2 | zone3 | | P | P | | -MaxSkew가 1이면 들어오는 포드는 zone3에 1/1/1이되도록 예약 할 수 있습니다. zone1 (zone2)로 예약하면 zone1 (zone2)의 ActualSkew (2-0)가 MaxSkew (1)을 위반하게됩니다. -MaxSkew가 2이면 들어오는 포드를 모든 영역에 예약 할 수 있습니다. `whenUnsatisfiable = ScheduleAnyway` 인 경우이를 충족하는 토폴로지에 더 높은 우선 순위를 부여하는 데 사용됩니다. 필수 필드입니다. 기본값은 1이고 0은 허용되지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.topologyKey": "TopologyKey는 노드 레이블의 키입니다. 이 키와 동일한 값이있는 레이블이있는 노드는 동일한 토폴로지에있는 것으로 간주됩니다. 우리는 각각을 고려합니다<key, value> &quot;버킷&quot;으로 각 버킷에 균형 잡힌 수의 포드를 넣으십시오. 필수 필드입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.whenUnsatisfiable": "WhenUnsatisfiable은 스프레드 제약 조건을 충족하지 않는 경우 포드를 처리하는 방법을 나타냅니다. -DoNotSchedule (기본값)은 스케줄러가 스케줄하지 않도록 지시합니다. -ScheduleAnyway는 스케줄러에게 임의의 위치에서 포드를 예약하도록 지시하지만, 왜곡을 줄이는 데 도움이되는 토폴로지에 더 높은 우선 순위를 부여합니다. 해당 포드에 대해 가능한 모든 노드 할당이 일부 토폴로지에서 &quot;MaxSkew&quot;를 위반하는 경우에만 수신 포드에 대한 제약 조건이 &quot;불만족&quot;으로 간주됩니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 3/1/1로 확산되는 포드 : | zone1 | zone2 | zone3 | | PPP | P | P | WhenUnsatisfiable이 DoNotSchedule로 설정된 경우 들어오는 pod는 zone2 (zone3)의 ActualSkew (2-1)가 MaxSkew (1)를 충족하므로 zone2 (zone3) 만 3/2/1 (3/1/2)가되도록 예약 할 수 있습니다. 즉, 클러스터는 여전히 불균형 상태 일 수 있지만 스케줄러는 * 더 * 불균형 상태로 만들지 않습니다. 필수 필드입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes": "포드에 속한 컨테이너로 마운트 할 수있는 볼륨 목록입니다. 자세한 정보 : https://kubernetes.io/docs/concepts/storage/volumes",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items": "볼륨은 포드의 모든 컨테이너에서 액세스 할 수있는 포드의 명명 된 볼륨을 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore": "AWSElasticBlockStore는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 AWS 디스크 리소스를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다).",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.readOnly": "VolumeMounts의 ReadOnly 속성을 &quot;true&quot;로 강제 설정하려면 &quot;true&quot;를 지정합니다. 생략하면 기본값은 &quot;false&quot;입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.volumeID": "AWS에있는 영구 디스크 리소스의 고유 ID (Amazon EBS 볼륨). 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk": "AzureDisk는 호스트의 Azure 데이터 디스크 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.cachingMode": "호스트 캐싱 모드 : 없음, 읽기 전용, 읽기 쓰기.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskName": "Blob 저장소에있는 데이터 디스크의 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskURI": "Blob 저장소의 데이터 디스크 URI",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.kind": "예상 값 공유 : 스토리지 계정 당 여러 Blob 디스크 전용 : 스토리지 계정 당 단일 Blob 디스크 관리 : Azure 관리 데이터 디스크 (관리되는 가용성 집합에서만). 기본적으로 공유 됨",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile": "AzureFile은 호스트의 Azure 파일 서비스 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.secretName": "Azure Storage 계정 이름 및 키가 포함 된 비밀의 이름",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.shareName": "이름 공유",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs": "CephFS는 포드의 수명을 공유하는 호스트의 Ceph FS 마운트를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.monitors": "필수 : Monitors는 Ceph 모니터 모음입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.path": "선택 사항 : 전체 Ceph 트리가 아닌 마운트 된 루트로 사용되며 기본값은 /입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretFile": "선택 사항 : SecretFile은 사용자의 키 링 경로이며 기본값은 /etc/ceph/user.secret입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.user": "선택 사항 : 사용자는 rados 사용자 이름, 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder": "Cinder는 kubelets 호스트 머신에 연결되고 마운트 된 cinder 볼륨을 나타냅니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.volumeID": "cinder에서 볼륨을 식별하는 데 사용되는 볼륨 ID입니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap": "ConfigMap은이 볼륨을 채워야하는 configMap을 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi": "CSI (Container Storage Interface)는 특정 외부 CSI 드라이버 (베타 기능)에서 처리하는 임시 저장소를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.driver": "Driver는이 볼륨을 처리하는 CSI 드라이버의 이름입니다. 클러스터에 등록 된 올바른 이름은 관리자에게 문의하십시오.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.fsType": "마운트 할 파일 시스템 유형입니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 제공되지 않으면 적용 할 기본 파일 시스템을 결정하는 관련 CSI 드라이버에 빈 값이 전달됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.volumeAttributes": "VolumeAttributes는 CSI 드라이버에 전달되는 드라이버 별 속성을 저장합니다. 지원되는 값은 드라이버 설명서를 참조하십시오.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI": "DownwardAPI는이 볼륨을 채워야하는 포드에 대한 하향 API를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 사용할 모드 비트. 선택 사항이어야합니다. 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items": "항목은 하향 API 볼륨 파일 목록입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트는 0000과 0777 사이의 8 진수 값이거나 0과 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir": "EmptyDir는 포드의 수명을 공유하는 임시 디렉터리를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir.properties.medium": "이 디렉토리를 백업해야하는 저장 매체 유형입니다. 기본값은 노드의 기본 매체를 사용함을 의미하는 &quot;&quot;입니다. 빈 문자열 (기본값) 또는 메모리 여야합니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir.properties.sizeLimit": "이 EmptyDir 볼륨에 필요한 총 로컬 스토리지 양입니다. 크기 제한은 메모리 매체에도 적용됩니다. 메모리 매체 EmptyDir의 최대 사용량은 여기에 지정된 SizeLimit와 포드에있는 모든 컨테이너의 메모리 제한 합계 사이의 최소값입니다. 기본값은 제한이 정의되지 않았 음을 의미하는 nil입니다. 추가 정보 : http://kubernetes.io/docs/user-guide/volumes#emptydir",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral": "Ephemeral은 클러스터 스토리지 드라이버 (알파 기능)에서 처리하는 볼륨을 나타냅니다. 볼륨의 수명주기는 볼륨을 정의하는 포드에 연결되어 있습니다. 볼륨은 포드가 시작되기 전에 생성되고 포드가 제거되면 삭제됩니다. a) 포드가 실행되는 동안에 만 볼륨이 필요한 경우, b) 스냅 샷에서 복원 또는 용량 추적과 같은 일반 볼륨의 기능이 필요한 경우, c) 스토리지 클래스를 통해 스토리지 드라이버가 지정된 경우, d) 스토리지 드라이버 PersistentVolumeClaim을 통한 동적 볼륨 프로비저닝을 지원합니다 (이 볼륨 유형과 PersistentVolumeClaim 간의 연결에 대한 자세한 내용은 EphemeralVolumeSource 참조). 개별 포드의 수명주기보다 오래 지속되는 볼륨에 대해 PersistentVolumeClaim 또는 공급 업체별 API 중 하나를 사용합니다. CSI 드라이버가 그런 방식으로 사용되는 경우 경량 로컬 임시 볼륨에 CSI를 사용하십시오. 자세한 내용은 드라이버 설명서를 참조하십시오. 포드는 두 유형의 임시 볼륨과 영구 볼륨을 동시에 사용할 수 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate": "볼륨을 프로비저닝하기 위해 독립형 PVC를 작성하는 데 사용됩니다. 이 EphemeralVolumeSource가 포함 된 포드가 PVC의 소유자가됩니다. 즉, PVC가 포드와 함께 삭제됩니다. PVC의 이름은`<pod name> -<volume name> `여기서`<volume name> `는`PodSpec.Volumes` 배열 항목의 이름입니다. 연결된 이름이 PVC에 유효하지 않은 경우 (예 : 너무 긴 경우) 포드 유효성 검사는 포드를 거부합니다. 팟 (Pod)이 소유하지 않은 이름을 가진 기존 PVC는 실수로 관련없는 볼륨을 사용하지 않도록 팟 (Pod)에 사용되지 * 않습니다 *. 그런 다음 관련없는 PVC가 제거 될 때까지 포드 시작이 차단됩니다. 이러한 사전 생성 된 PVC를 포드에서 사용하려는 경우 포드가 존재하면 PVC를 포드에 대한 소유자 참조로 업데이트해야합니다. 일반적으로이 작업은 필요하지 않지만 손상된 클러스터를 수동으로 재구성 할 때 유용 할 수 있습니다. 이 필드는 읽기 전용이며 생성 된 후에는 Kubernetes에서 PVC를 변경하지 않습니다. 필수 항목이며 nil이 아니어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata": "PVC를 만들 때 PVC에 복사 할 레이블 및 주석을 포함 할 수 있습니다. 다른 필드는 허용되지 않으며 유효성 검사 중에 거부됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec": "PersistentVolumeClaim의 사양입니다. 전체 콘텐츠는이 템플릿에서 생성 된 PVC에 변경되지 않고 복사됩니다. PersistentVolumeClaim에서와 동일한 필드가 여기에서도 유효합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.accessModes": "AccessModes에는 볼륨에 필요한 액세스 모드가 포함되어 있습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource": "이 필드는 다음 중 하나를 지정하는 데 사용할 수 있습니다. * 기존 VolumeSnapshot 객체 (snapshot.storage.k8s.io/VolumeSnapshot-베타) * 기존 PVC (PersistentVolumeClaim) * 데이터 채우기 (알파)를 순서대로 구현하는 기존 사용자 지정 리소스 / 객체 VolumeSnapshot 개체 유형을 사용하려면 적절한 기능 게이트를 활성화해야합니다 (VolumeSnapshotDataSource 또는 AnyVolumeDataSource) 프로비저닝 도구 또는 외부 컨트롤러가 지정된 데이터 소스를 지원할 수있는 경우 지정된 데이터 소스의 내용을 기반으로 새 볼륨을 생성합니다. 지정된 데이터 소스가 지원되지 않는 경우 볼륨이 생성되지 않고 오류가 이벤트로보고됩니다. 앞으로 더 많은 데이터 소스 유형을 지원할 계획이며 제공자의 동작이 변경 될 수 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.apiGroup": "APIGroup은 참조되는 리소스에 대한 그룹입니다. APIGroup이 지정되지 않은 경우 지정된 종류가 코어 API 그룹에 있어야합니다. 다른 타사 유형의 경우 APIGroup이 필요합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.kind": "Kind는 참조되는 리소스 유형입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.name": "이름은 참조되는 리소스의 이름입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources": "리소스는 볼륨에 있어야하는 최소 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector": "바인딩을 고려할 볼륨에 대한 레이블 쿼리입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.storageClassName": "클레임에 필요한 StorageClass의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.volumeMode": "volumeMode는 클레임에 필요한 볼륨 유형을 정의합니다. 클레임 사양에 포함되지 않은 경우 파일 시스템의 가치가 암시됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.volumeName": "VolumeName은이 클레임을 뒷받침하는 PersistentVolume에 대한 바인딩 참조입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc": "FC는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 파이버 채널 리소스를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.lun": "선택 사항 : FC 대상 LUN 번호",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.targetWWNs": "선택 사항 : FC 대상 월드 와이드 이름 (WWN)",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.wwids": "선택 사항 : FC 볼륨 월드 와이드 식별자 (wwids) wwids 또는 targetWWN과 lun의 조합을 설정해야하지만 둘 다 동시에 설정할 수는 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume": "FlexVolume은 exec 기반 플러그인을 사용하여 프로비저닝 / 연결된 일반 볼륨 리소스를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.driver": "Driver는이 볼륨에 사용할 드라이버의 이름입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본 파일 시스템은 FlexVolume 스크립트에 따라 다릅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.options": "옵션 : 추가 명령 옵션 (있는 경우).",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker": "Flocker는 kubelet의 호스트 머신에 연결된 Flocker 볼륨을 나타냅니다. 이것은 실행중인 Flocker 제어 서비스에 따라 다릅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker.properties.datasetName": "메타 데이터로 저장된 데이터 세트의 이름-&gt; Flocker 용 데이터 세트의 이름은 더 이상 사용되지 않는 것으로 간주되어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker.properties.datasetUUID": "데이터 세트의 UUID입니다. 이것은 Flocker 데이터 세트의 고유 식별자입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk": "GCEPersistentDisk는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 GCE 디스크 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다). 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.pdName": "GCE에있는 PD 리소스의 고유 이름입니다. GCE에서 디스크를 식별하는 데 사용됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo": "GitRepo는 특정 개정판의 git 저장소를 나타냅니다. DEPRECATED : GitRepo는 더 이상 사용되지 않습니다. git 저장소로 컨테이너를 프로비저닝하려면 git을 사용하여 저장소를 복제하는 InitContainer에 EmptyDir을 마운트 한 다음 Pod의 컨테이너에 EmptyDir을 마운트합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.directory": "대상 디렉토리 이름. &#39;..&#39;을 포함하거나 시작하지 않아야합니다. 만약 &#39;.&#39; 제공되면 볼륨 디렉토리는 git 저장소가됩니다. 그렇지 않으면 지정된 경우 볼륨은 지정된 이름의 하위 디렉토리에 git 저장소를 포함합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.repository": "저장소 URL",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.revision": "지정된 개정에 대한 커밋 해시입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs": "Glusterfs는 포드의 수명을 공유하는 호스트의 Glusterfs 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.endpoints": "EndpointsName은 Glusterfs 토폴로지를 자세히 설명하는 엔드 포인트 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.path": "Path는 Glusterfs 볼륨 경로입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.readOnly": "여기서 ReadOnly는 Glusterfs 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath": "HostPath는 컨테이너에 직접 노출되는 호스트 시스템의 기존 파일 또는 디렉터리를 나타냅니다. 이것은 일반적으로 호스트 시스템을 볼 수있는 시스템 에이전트 또는 기타 권한있는 항목에 사용됩니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath.properties.path": "호스트의 디렉토리 경로입니다. 경로가 심볼릭 링크이면 실제 경로에 대한 링크를 따릅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath.properties.type": "HostPath 볼륨의 유형 기본값은 &quot;&quot;입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi": "ISCSI는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 ISCSI 디스크 리소스를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/iscsi/README.md",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthDiscovery": "iSCSI 검색 CHAP 인증 지원 여부",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthSession": "iSCSI 세션 CHAP 인증 지원 여부",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.initiatorName": "사용자 지정 iSCSI 이니시에이터 이름. initiatorName이 iscsiInterface와 동시에 지정되면 새로운 iSCSI 인터페이스<target portal> :<volume name> 연결을 위해 생성됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.iqn": "대상 iSCSI 정규화 이름.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.iscsiInterface": "iSCSI 전송을 사용하는 iSCSI 인터페이스 이름입니다. 기본값은 &#39;default&#39;(tcp)입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.lun": "iSCSI 대상 LUN 번호.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.portals": "iSCSI 대상 포털 목록. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.targetPortal": "iSCSI 대상 포털. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.name": "볼륨의 이름. DNS_LABEL이어야하며 포드 내에서 고유해야합니다. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs": "NFS는 포드의 수명을 공유하는 호스트의 NFS 마운트를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.path": "NFS 서버에서 내 보낸 경로입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.readOnly": "여기서 ReadOnly는 읽기 전용 권한으로 NFS 내보내기를 강제로 마운트합니다. 기본값은 false입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.server": "Server는 NFS 서버의 호스트 이름 또는 IP 주소입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim": "PersistentVolumeClaimVolumeSource는 동일한 네임 스페이스에있는 PersistentVolumeClaim에 대한 참조를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.claimName": "ClaimName은이 볼륨을 사용하는 pod와 동일한 네임 스페이스에있는 PersistentVolumeClaim의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.readOnly": "VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk": "PhotonPersistentDisk는 kubelets 호스트 머신에 연결되고 마운트 된 PhotonController 영구 디스크를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.pdID": "Photon Controller 영구 디스크를 식별하는 ID",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume": "PortworxVolume은 kubelets 호스트 머신에 연결되고 마운트 된 portworx 볼륨을 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.fsType": "FSType은 마운트 할 파일 시스템 유형을 나타냅니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.volumeID": "VolumeID는 Portworx 볼륨을 고유하게 식별합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected": "하나의 리소스 비밀, 구성 맵 및 하향 API에 대한 항목",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.defaultMode": "기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources": "볼륨 예측 목록",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items": "지원되는 다른 볼륨 유형과 함께 투영 될 수있는 투영",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap": "프로젝트 할 configMap 데이터에 대한 정보",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI": "프로젝트 할 downwardAPI 데이터에 대한 정보",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items": "Items는 DownwardAPIVolume 파일 목록입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트는 0000과 0777 사이의 8 진수 값이거나 0과 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret": "프로젝트 할 비밀 데이터에 대한 정보",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken": "프로젝트 할 serviceAccountToken 데이터에 대한 정보",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.audience": "청중은 토큰의 의도 된 청중입니다. 토큰 수신자는 토큰 대상에 지정된 식별자로 자신을 식별해야하며 그렇지 않으면 토큰을 거부해야합니다. 대상은 기본적으로 apiserver의 식별자입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.expirationSeconds": "ExpirationSeconds는 서비스 계정 토큰의 요청 된 유효 기간입니다. 토큰이 만료에 가까워지면 kubelet 볼륨 플러그인이 사전에 서비스 계정 토큰을 교체합니다. 토큰이 수명의 80 % 이상이거나 토큰이 24 시간 이상인 경우 kubelet은 토큰 순환을 시작합니다. 기본값은 1 시간이며 최소 10 분이어야합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.path": "경로는 토큰을 투영 할 파일의 마운트 지점에 상대적인 경로입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte": "Quobyte는 포드의 수명을 공유하는 호스트의 Quobyte 마운트를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.group": "볼륨 액세스를 매핑 할 그룹 기본값은 그룹 없음입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.readOnly": "여기서 ReadOnly는 Quobyte 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.registry": "레지스트리는 볼륨의 중앙 레지스트리 역할을하는 호스트 : 포트 쌍 (여러 항목은 쉼표로 구분됨)으로 문자열로 지정된 단일 또는 다중 Quobyte Registry 서비스를 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.tenant": "백엔드에서 주어진 Quobyte 볼륨을 소유하는 테넌트는 동적으로 프로비저닝 된 Quobyte 볼륨과 함께 사용되며 값은 플러그인에 의해 설정됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.user": "볼륨 액세스를 기본값에 매핑하는 사용자를 serivceaccount 사용자에게",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.volume": "Volume은 이미 생성 된 Quobyte 볼륨을 이름으로 참조하는 문자열입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd": "RBD는 포드의 수명을 공유하는 호스트의 Rados 블록 장치 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#rbd",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.image": "라도 스 이미지 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.keyring": "키링은 RBDUser의 키링 경로입니다. 기본값은 / etc / ceph / keyring입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.monitors": "Ceph 모니터 모음. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.pool": "라도 스 풀 이름. 기본값은 rbd입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.user": "rados 사용자 이름입니다. 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO": "ScaleIO는 Kubernetes 노드에 연결되고 마운트 된 ScaleIO 영구 볼륨을 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본값은 &quot;xfs&quot;입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.gateway": "ScaleIO API 게이트웨이의 호스트 주소입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.protectionDomain": "구성된 스토리지에 대한 ScaleIO 보호 도메인의 이름입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.sslEnabled": "게이트웨이와의 SSL 통신을 활성화 / 비활성화하는 플래그, 기본값은 false",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.storageMode": "볼륨의 스토리지가 ThickProvisioned인지 ThinProvisioned인지 여부를 나타냅니다. 기본값은 ThinProvisioned입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.storagePool": "보호 도메인과 연결된 ScaleIO 스토리지 풀입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.system": "ScaleIO에 구성된 스토리지 시스템의 이름입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.volumeName": "이 볼륨 소스와 연결된 ScaleIO 시스템에 이미 생성 된 볼륨의 이름입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret": "Secret은이 볼륨을 채워야하는 비밀을 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.secretName": "사용할 팟 (Pod) 네임 스페이스의 시크릿 이름입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos": "StorageOS는 Kubernetes 노드에 연결되고 마운트 된 StorageOS 볼륨을 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.volumeName": "VolumeName은 사람이 읽을 수있는 StorageOS 볼륨의 이름입니다. 볼륨 이름은 네임 스페이스 내에서만 고유합니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.volumeNamespace": "VolumeNamespace는 StorageOS 내의 볼륨 범위를 지정합니다. 네임 스페이스를 지정하지 않으면 Pod의 네임 스페이스가 사용됩니다. 이를 통해보다 긴밀한 통합을 위해 Kubernetes 이름 범위를 StorageOS 내에서 미러링 할 수 있습니다. 기본 동작을 재정의하려면 VolumeName을 임의의 이름으로 설정합니다. StorageOS 내에서 네임 스페이스를 사용하지 않는 경우 &quot;default&quot;로 설정하십시오. StorageOS 내에 존재하지 않는 네임 스페이스가 생성됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume": "VsphereVolume은 kubelets 호스트 시스템에 연결되고 마운트 된 vSphere 볼륨을 나타냅니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyID": "StoragePolicyName과 연결된 SPBM (스토리지 정책 기반 관리) 프로필 ID입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyName": "SPBM (스토리지 정책 기반 관리) 프로필 이름입니다.",
    "%Job.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.volumePath": "vSphere 볼륨 vmdk를 식별하는 경로",
    "%Job.json.properties.spec.properties.ttlSecondsAfterFinished": "ttlSecondsAfterFinished는 실행을 완료 한 (완료 또는 실패) 작업의 수명을 제한합니다. 이 필드를 설정하면 작업이 완료된 후 ttlSecondsAfterFinished가 자동으로 삭제 될 수 있습니다. 작업이 삭제 될 때 해당 수명주기 보장 (예 : 종료 자)이 적용됩니다. 이 필드가 설정되어 있지 않으면 작업이 자동으로 삭제되지 않습니다. 이 필드를 0으로 설정하면 작업이 완료된 후 즉시 삭제할 수 있습니다. 이 필드는 알파 수준이며 TTLAfterFinished 기능을 활성화하는 서버에서만 적용됩니다.",
    "%Job.json.properties.status": "작업의 현재 상태. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%Job.json.properties.status.properties.active": "활발히 실행중인 포드 수입니다.",
    "%Job.json.properties.status.properties.completionTime": "작업이 완료된 시간을 나타냅니다. 별도의 작업에서 발생 전 순서로 설정되지 않을 수도 있습니다. RFC3339 형식으로 표시되며 UTC로 표시됩니다.",
    "%Job.json.properties.status.properties.conditions": "객체의 현재 상태에 대해 사용 가능한 최신 관찰입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
    "%Job.json.properties.status.properties.conditions.items": "JobCondition은 작업의 현재 상태를 설명합니다.",
    "%Job.json.properties.status.properties.conditions.items.properties.lastProbeTime": "마지막으로 조건을 확인한 시간입니다.",
    "%Job.json.properties.status.properties.conditions.items.properties.lastTransitionTime": "마지막으로 조건이 한 상태에서 다른 상태로 전환 된 시간입니다.",
    "%Job.json.properties.status.properties.conditions.items.properties.message": "마지막 전환에 대한 세부 정보를 나타내는 사람이 읽을 수있는 메시지입니다.",
    "%Job.json.properties.status.properties.conditions.items.properties.reason": "(간단한) 상태의 마지막 전환 이유.",
    "%Job.json.properties.status.properties.conditions.items.properties.status": "조건의 상태는 True, False, Unknown 중 하나입니다.",
    "%Job.json.properties.status.properties.conditions.items.properties.type": "작업 조건 유형, 완료 또는 실패.",
    "%Job.json.properties.status.properties.failed": "단계 실패에 도달 한 포드 수입니다.",
    "%Job.json.properties.status.properties.startTime": "작업 컨트롤러가 작업을 승인 한 시간을 나타냅니다. 별도의 작업에서 발생 전 순서로 설정되지 않을 수도 있습니다. RFC3339 형식으로 표시되며 UTC로 표시됩니다.",
    "%Job.json.properties.status.properties.succeeded": "성공 단계에 도달 한 포드 수입니다.",
    "%StatefulSet.json": "StatefulSet는 일관된 ID를 가진 포드 집합을 나타냅니다. ID는 다음과 같이 정의됩니다.-네트워크 : 안정된 단일 DNS 및 호스트 이름. -스토리지 : 요청한대로 VolumeClaims 수. StatefulSet는 주어진 네트워크 ID가 항상 동일한 저장소 ID에 매핑되도록 보장합니다.",
    "%StatefulSet.json.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%StatefulSet.json.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%StatefulSet.json.properties.metadata": "ObjectMeta는 사용자가 만들어야하는 모든 개체를 포함하는 모든 지속 형 리소스에 있어야하는 메타 데이터입니다.",
    "%StatefulSet.json.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%StatefulSet.json.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%StatefulSet.json.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%StatefulSet.json.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%StatefulSet.json.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%StatefulSet.json.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%StatefulSet.json.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%StatefulSet.json.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%StatefulSet.json.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%StatefulSet.json.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%StatefulSet.json.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%StatefulSet.json.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%StatefulSet.json.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%StatefulSet.json.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%StatefulSet.json.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%StatefulSet.json.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%StatefulSet.json.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%StatefulSet.json.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%StatefulSet.json.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%StatefulSet.json.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%StatefulSet.json.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%StatefulSet.json.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%StatefulSet.json.properties.spec": "사양은이 세트에서 원하는 포드 ID를 정의합니다.",
    "%StatefulSet.json.properties.spec.properties.podManagementPolicy": "podManagementPolicy는 초기 확장 중에, 노드에서 포드를 교체 할 때 또는 축소 할 때 포드가 생성되는 방식을 제어합니다. 기본 정책은 &#39;OrderedReady&#39;이며, 여기서 포드는 오름차순 (pod-0, pod-1 등)으로 생성되고 컨트롤러는 계속하기 전에 각 포드가 준비 될 때까지 대기합니다. 축소하면 포드가 반대 순서로 제거됩니다. 대체 정책은 &#39;Parallel&#39;로, 기다리지 않고 원하는 크기와 일치하도록 pod를 병렬로 생성하고 축소시 모든 pod를 한 번에 삭제합니다.",
    "%StatefulSet.json.properties.spec.properties.replicas": "replicas는 주어진 템플릿의 원하는 복제본 수입니다. 이들은 동일한 템플릿의 인스턴스화라는 의미에서 복제본이지만 개별 복제본도 일관된 ID를 갖습니다. 지정하지 않으면 기본값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.revisionHistoryLimit": "revisionHistoryLimit는 StatefulSet의 개정 내역에서 유지 될 최대 개정 수입니다. 개정 내역은 현재 적용된 StatefulSetSpec 버전으로 표시되지 않는 모든 개정으로 구성됩니다. 기본값은 10입니다.",
    "%StatefulSet.json.properties.spec.properties.selector": "selector는 복제본 수와 일치해야하는 포드에 대한 라벨 쿼리입니다. 포드 템플릿의 레이블과 일치해야합니다. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
    "%StatefulSet.json.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%StatefulSet.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%StatefulSet.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%StatefulSet.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%StatefulSet.json.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.serviceName": "serviceName은이 StatefulSet를 관리하는 서비스의 이름입니다. 이 서비스는 StatefulSet 이전에 존재해야하며 세트의 네트워크 ID를 담당합니다. Pod는 다음 패턴을 따르는 DNS / 호스트 이름을 가져옵니다. pod-specific-string.serviceName.default.svc.cluster.local 여기서 &quot;pod-specific-string&quot;은 StatefulSet 컨트롤러에서 관리합니다.",
    "%StatefulSet.json.properties.spec.properties.template": "template은 부족한 복제본이 감지 된 경우 생성 될 포드를 설명하는 개체입니다. StatefulSet에 의해 스탬프 처리 된 각 포드는이 템플릿을 충족하지만 나머지 StatefulSet과는 고유 한 ID를 갖습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata": "ObjectMeta는 사용자가 만들어야하는 모든 개체를 포함하는 모든 지속 형 리소스에 있어야하는 메타 데이터입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec": "pod의 원하는 동작에 대한 사양입니다. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.activeDeadlineSeconds": "시스템이 실패로 표시하고 연관된 컨테이너를 강제 종료하기 전에 팟 (Pod)이 StartTime에 상대적으로 노드에서 활성화 될 수있는 선택적 기간 (초)입니다. 값은 양의 정수 여야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity": "지정된 경우 포드의 예약 제약",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity": "포드에 대한 노드 선호도 예약 규칙을 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 노드가 대응하는 matchExpressions와 일치하면 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "빈 선호 스케줄링 용어는 암시 적 가중치가 0 인 모든 개체와 일치합니다 (즉, 작동하지 않음). null 선호 스케줄링 용어는 객체와 일치하지 않습니다 (즉, 작동하지 않음).",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference": "해당 가중치와 관련된 노드 선택기 용어입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 nodeSelectorTerm 일치와 관련된 가중치입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms": "필수입니다. 노드 선택기 용어 목록입니다. 용어는 OR로 연결됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items": "null 또는 빈 노드 선택기 용어는 개체와 일치하지 않습니다. 이들의 요구 사항은 AND입니다. TopologySelectorTerm 유형은 NodeSelectorTerm의 하위 집합을 구현합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity": "포드 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 배치).",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 및 노드가 대응하는 podAffinityTerm과 일치하는 포드를 갖는 경우 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity": "포드 반 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 두지 않음).",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 반친 화성 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치의 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 반친 화성 표현식 등)을 충족하는 각 노드에 대해 다음 요소를 반복하여 합계를 계산합니다. 이 필드와 노드에 해당 podAffinityTerm과 일치하는 포드가있는 경우 합계에 &quot;weight&quot;를 추가합니다. 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 반친 화성 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 반친 화성 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않는 경우 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.automountServiceAccountToken": "AutomountServiceAccountToken은 서비스 계정 토큰을 자동으로 마운트해야하는지 여부를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers": "포드에 속한 컨테이너 목록입니다. 현재 컨테이너를 추가하거나 제거 할 수 없습니다. 포드에는 컨테이너가 하나 이상 있어야합니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업보다 데이터를로드하거나 캐시를 워밍하는 데 오랜 시간이 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig": "포드의 DNS 매개 변수를 지정합니다. 여기에 지정된 매개 변수는 DNSPolicy를 기반으로 생성 된 DNS 구성에 병합됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.nameservers": "DNS 이름 서버 IP 주소 목록입니다. 이는 DNSPolicy에서 생성 된 기본 네임 서버에 추가됩니다. 중복 된 네임 서버는 제거됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options": "DNS 확인자 옵션 목록입니다. 이것은 DNSPolicy에서 생성 된 기본 옵션과 병합됩니다. 중복 된 항목은 제거됩니다. 옵션에 제공된 해결 옵션은 기본 DNSPolicy에 표시되는 옵션보다 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options.items": "PodDNSConfigOption은 포드의 DNS 확인자 옵션을 정의합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options.items.properties.name": "필수입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.searches": "호스트 이름 조회를위한 DNS 검색 도메인 목록입니다. 이는 DNSPolicy에서 생성 된 기본 검색 경로에 추가됩니다. 중복 된 검색 경로는 제거됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.dnsPolicy": "포드에 대한 DNS 정책을 설정합니다. 기본값은 &quot;ClusterFirst&quot;입니다. 유효한 값은 &#39;ClusterFirstWithHostNet&#39;, &#39;ClusterFirst&#39;, &#39;Default&#39;또는 &#39;None&#39;입니다. DNSConfig에 제공된 DNS 매개 변수는 DNSPolicy로 선택한 정책과 병합됩니다. hostNetwork와 함께 DNS 옵션을 설정하려면 DNS 정책을 명시 적으로 &#39;ClusterFirstWithHostNet&#39;으로 지정해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.enableServiceLinks": "EnableServiceLinks는 서비스에 대한 정보를 Docker 링크의 구문과 일치하는 포드의 환경 변수에 삽입해야하는지 여부를 나타냅니다. 선택 사항 : 기본값은 true입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers": "이 포드에서 실행되는 임시 컨테이너 목록입니다. 임시 컨테이너는 디버깅과 같은 사용자 시작 작업을 수행하기 위해 기존 포드에서 실행될 수 있습니다. 이 목록은 포드를 만들 때 지정할 수 없으며 포드 사양을 업데이트하여 수정할 수 없습니다. 기존 포드에 임시 컨테이너를 추가하려면 포드의 ephemeralcontainers 하위 리소스를 사용합니다. 이 필드는 알파 수준이며 EphemeralContainers 기능을 활성화하는 서버에서만 적용됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items": "EphemeralContainer는 디버깅과 같이 사용자가 시작한 활동을 위해 기존 포드에 임시로 추가 할 수있는 컨테이너입니다. 임시 컨테이너에는 리소스 또는 예약 보장이 없으며 종료시 또는 포드가 제거되거나 다시 시작될 때 다시 시작되지 않습니다. 임시 컨테이너로 인해 포드가 리소스 할당을 초과하는 경우 포드가 제거 될 수 있습니다. 포드 사양을 직접 업데이트하여 임시 컨테이너를 추가 할 수 없습니다. 포드의 ephemeralcontainers 하위 리소스를 통해 추가해야하며 추가되면 포드 사양에 나타납니다. 이것은 EphemeralContainers 기능 플래그로 활성화 된 알파 기능입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle": "임시 컨테이너에는 수명주기가 허용되지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.name": "DNS_LABEL로 지정된 임시 컨테이너의 이름입니다. 이 이름은 모든 컨테이너, 초기화 컨테이너 및 임시 컨테이너간에 고유해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports": "임시 컨테이너에는 포트가 허용되지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources": "임시 컨테이너에는 리소스가 허용되지 않습니다. 임시 컨테이너는 포드에 이미 할당 된 예비 리소스를 사용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext": "임시 컨테이너에는 SecurityContext가 허용되지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.targetContainerName": "설정된 경우이 임시 컨테이너가 대상으로하는 PodSpec의 컨테이너 이름입니다. 임시 컨테이너는이 컨테이너의 네임 스페이스 (IPC, PID 등)에서 실행됩니다. 설정되지 않은 경우 팟 (Pod)에 대해 공유되는 네임 스페이스에서 임시 컨테이너가 실행됩니다. 컨테이너 런타임은이 기능을 지원해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.hostAliases": "HostAliases는 지정된 경우 포드의 호스트 파일에 삽입 될 호스트 및 IP의 선택적 목록입니다. 이는 hostNetwork가 아닌 포드에만 유효합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.hostAliases.items": "HostAlias는 포드의 호스트 파일에 항목으로 삽입 될 IP와 호스트 이름 간의 매핑을 보유합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.hostAliases.items.properties.hostnames": "위 IP 주소의 호스트 이름입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.hostAliases.items.properties.ip": "호스트 파일 항목의 IP 주소입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.hostIPC": "호스트의 ipc 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.hostNetwork": "이 포드에 대해 요청 된 호스트 네트워킹입니다. 호스트의 네트워크 네임 스페이스를 사용합니다. 이 옵션을 설정하면 사용할 포트를 지정해야합니다. 기본값은 false입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.hostPID": "호스트의 pid 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.hostname": "포드의 호스트 이름을 지정합니다. 지정하지 않으면 포드의 호스트 이름이 시스템 정의 값으로 설정됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.imagePullSecrets": "ImagePullSecrets는이 PodSpec에서 사용하는 이미지를 가져 오는 데 사용할 동일한 네임 스페이스의 보안 비밀에 대한 선택적 참조 목록입니다. 지정된 경우 이러한 비밀은 사용할 개별 풀러 구현에 전달됩니다. 예를 들어 docker의 경우 DockerConfig 유형 비밀 만 적용됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.imagePullSecrets.items": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.imagePullSecrets.items.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers": "포드에 속한 초기화 컨테이너 목록입니다. Init 컨테이너는 컨테이너가 시작되기 전에 순서대로 실행됩니다. 초기화 컨테이너가 실패하면 포드는 실패한 것으로 간주되며 restartPolicy에 따라 처리됩니다. 초기화 컨테이너 또는 일반 컨테이너의 이름은 모든 컨테이너에서 고유해야합니다. Init 컨테이너에는 수명주기 작업, 준비 상태 프로브, 활성 상태 프로브 또는 시작 프로브가 없을 수 있습니다. init 컨테이너의 resourceRequirements는 각 리소스 유형에 대해 가장 높은 요청 / 한계를 찾은 다음 해당 값의 최대 값 또는 일반 컨테이너의 합계를 사용하여 스케줄링 중에 고려됩니다. 제한은 비슷한 방식으로 초기화 컨테이너에 적용됩니다. Init 컨테이너는 현재 추가하거나 제거 할 수 없습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업보다 데이터를로드하거나 캐시를 워밍하는 데 오랜 시간이 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.nodeName": "NodeName은이 포드를 특정 노드에 예약하기위한 요청입니다. 비어 있지 않은 경우 스케줄러는 리소스 요구 사항에 적합하다고 가정하여이 포드를 해당 노드에 예약합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.nodeSelector": "NodeSelector는 포드가 노드에 맞도록 true 여야하는 선택기입니다. 포드가 해당 노드에서 예약되도록하려면 노드의 라벨과 일치해야하는 선택기입니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.overhead": "오버 헤드는 주어진 RuntimeClass에 대한 포드 실행과 관련된 리소스 오버 헤드를 나타냅니다. 이 필드는 RuntimeClass 승인 컨트롤러에 의해 승인 시간에 자동으로 채워집니다. RuntimeClass 승인 컨트롤러가 사용 설정된 경우 Pod 생성 요청에 오버 헤드를 설정하면 안됩니다. RuntimeClass 승인 컨트롤러는 오버 헤드가 이미 설정된 포드 생성 요청을 거부합니다. RuntimeClass가 PodSpec에서 구성되고 선택되면 오버 헤드는 해당 RuntimeClass에 정의 된 값으로 설정됩니다. 그렇지 않으면 설정되지 않은 상태로 유지되고 0으로 처리됩니다. 추가 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/688-pod-overhead/README.md이 필드는 Kubernetes v1.16부터 알파 수준이며 PodOverhead 기능을 활성화하는 서버에서 인정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.preemptionPolicy": "PreemptionPolicy는 우선 순위가 낮은 포드를 선점하기위한 정책입니다. Never 중 하나, PreemptLowerPriority. 설정되지 않은 경우 기본값은 PreemptLowerPriority입니다. 이 필드는 베타 수준이며 NonPreemptingPriority 기능 게이트에 의해 제어됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.priority": "우선 순위 값입니다. 다양한 시스템 구성 요소가이 필드를 사용하여 포드의 우선 순위를 찾습니다. Priority Admission Controller가 활성화되면 사용자가이 필드를 설정할 수 없습니다. 승인 컨트롤러는 PriorityClassName에서이 필드를 채 웁니다. 값이 높을수록 우선 순위가 높아집니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.priorityClassName": "지정된 경우 포드의 우선 순위를 나타냅니다. &quot;system-node-critical&quot;및 &quot;system-cluster-critical&quot;은 가장 높은 우선 순위를 나타내는 두 개의 특수 키워드이며 전자가 가장 높은 우선 순위입니다. 다른 이름은 해당 이름으로 PriorityClass 개체를 만들어 정의해야합니다. 지정되지 않은 경우 포드 우선 순위는 기본값이되거나 기본값이없는 경우 0이됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.readinessGates": "지정된 경우 모든 준비 게이트에서 포드 준비 상태를 평가합니다. 모든 컨테이너가 준비되고 준비 게이트에 지정된 모든 조건의 상태가 &quot;True&quot;이면 포드가 준비된 것입니다. 자세한 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/ 580-pod-readiness-gates / README.md",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.readinessGates.items": "PodReadinessGate에는 포드 조건에 대한 참조가 포함됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.readinessGates.items.properties.conditionType": "ConditionType은 유형이 일치하는 pod의 조건 목록에있는 조건을 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.restartPolicy": "포드 내의 모든 컨테이너에 대한 정책을 다시 시작합니다. Always, OnFailure, Never 중 하나입니다. 기본값은 항상입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.runtimeClassName": "RuntimeClassName은 node.k8s.io 그룹의 RuntimeClass 객체를 참조하며이 pod를 실행하는 데 사용해야합니다. RuntimeClass 리소스가 명명 된 클래스와 일치하지 않으면 포드가 실행되지 않습니다. 설정되지 않거나 비어있는 경우 기본 런타임 핸들러를 사용하는 비어있는 정의가있는 암시 적 클래스 인 &quot;레거시&quot;RuntimeClass가 사용됩니다. 추가 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/585-runtime-class/README.md 이것은 Kubernetes v1.14의 베타 기능입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.schedulerName": "지정된 경우 지정된 스케줄러가 포드를 발송합니다. 지정하지 않으면 포드가 기본 스케줄러에 의해 발송됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext": "SecurityContext는 포드 수준 보안 속성 및 공통 컨테이너 설정을 보유합니다. 옵션 : 기본값은 비어 있습니다. 각 필드의 기본값은 유형 설명을 참조하십시오.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.fsGroup": "포드의 모든 컨테이너에 적용되는 특수 보조 그룹입니다. 일부 볼륨 유형을 사용하면 Kubelet이 포드가 소유 할 해당 볼륨의 소유권을 변경할 수 있습니다. 1. 소유 GID는 FSGroup이됩니다. 2. setgid 비트가 설정됩니다 (볼륨에 생성 된 새 파일은 FSGroup이 소유 함) 3 권한 비트는 rw-rw ----와 OR로 연결됩니다. 설정되지 않은 경우 Kubelet은 볼륨의 소유권 및 권한을 수정하지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.fsGroupChangePolicy": "fsGroupChangePolicy는 Pod 내부에 노출되기 전에 볼륨의 소유권 및 권한을 변경하는 동작을 정의합니다. 이 필드는 fsGroup 기반 소유권 (및 권한)을 지원하는 볼륨 유형에만 적용됩니다. secret, configmaps 및 emptydir과 같은 임시 볼륨 유형에는 영향을 미치지 않습니다. 유효한 값은 &quot;OnRootMismatch&quot;및 &quot;Always&quot;입니다. 지정하지 않으면 기본값은 &quot;항상&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions": "모든 컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile": "이 포드의 컨테이너에서 사용할 seccomp 옵션입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.supplementalGroups": "컨테이너의 기본 GID와 함께 각 컨테이너에서 실행되는 첫 번째 프로세스에 적용된 그룹 목록입니다. 지정하지 않으면 컨테이너에 그룹이 추가되지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls": "Sysctls에는 포드에 사용되는 네임 스페이스가 지정된 sysctls 목록이 있습니다. 컨테이너 런타임에 의해 지원되지 않는 sysctls가있는 포드가 시작되지 않을 수 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items": "Sysctl은 설정할 커널 매개 변수를 정의합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items.properties.name": "설정할 속성의 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items.properties.value": "설정할 속성 값",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 컨테이너의 SecurityContext 내의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.serviceAccountName": "ServiceAccountName은이 포드를 실행하는 데 사용할 ServiceAccount의 이름입니다. 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.setHostnameAsFQDN": "true이면 포드의 호스트 이름이 리프 이름 (기본값)이 아닌 포드의 FQDN으로 구성됩니다. Linux 컨테이너에서 이는 커널의 hostname 필드 (struct utsname의 nodename 필드)에 FQDN을 설정하는 것을 의미합니다. Windows 컨테이너에서 이는 레지스트리 키 HKEY_LOCAL_MACHINE \\ SYSTEM \\ CurrentControlSet \\ Services \\ Tcpip \\ Parameters에 대한 호스트 이름의 레지스트리 값을 FQDN으로 설정하는 것을 의미합니다. 포드에 FQDN이 없으면 아무 효과가 없습니다. 기본값은 false입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.shareProcessNamespace": "pod의 모든 컨테이너간에 단일 프로세스 네임 스페이스를 공유합니다. 이것이 설정되면 컨테이너는 동일한 포드의 다른 컨테이너에서 프로세스를보고 신호를 보낼 수 있으며 각 컨테이너의 첫 번째 프로세스에는 PID 1이 할당되지 않습니다. HostPID와 ShareProcessNamespace를 둘 다 설정할 수는 없습니다. 선택 사항 : 기본값은 false입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.subdomain": "지정된 경우 정규화 된 포드 호스트 이름은 &quot;<hostname> .<subdomain> .<pod namespace> .svc.<cluster domain> &quot;. 지정하지 않으면 포드에 도메인 이름이 전혀 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.terminationGracePeriodSeconds": "포드가 정상적으로 종료되어야하는 선택적 기간 (초)입니다. 삭제 요청시 감소 될 수 있습니다. 값은 음이 아닌 정수 여야합니다. 값 0은 즉시 삭제를 나타냅니다. 이 값이 nil이면 기본 유예 기간이 대신 사용됩니다. 유예 기간은 포드에서 실행중인 프로세스가 종료 신호를 보낸 후의 기간 (초)과 프로세스가 강제 종료 신호로 중단되는 시간입니다. 이 값을 프로세스의 예상 정리 시간보다 길게 설정하십시오. 기본값은 30 초입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.tolerations": "지정된 경우 포드의 허용 오차입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items": "이 Toleration이 연결된 포드는 트리플과 일치하는 모든 오염을 견뎌냅니다.<key,value,effect> 일치 연산자 사용<operator> .",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.effect": "효과는 일치시킬 오염 효과를 나타냅니다. 비어 있음은 모든 오염 효과와 일치 함을 의미합니다. 지정된 경우 허용되는 값은 NoSchedule, PreferNoSchedule 및 NoExecute입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.key": "키는 관용이 적용되는 오염 키입니다. 비어 있음은 모든 오염 키와 일치 함을 의미합니다. 키가 비어 있으면 연산자가 존재해야합니다. 이 조합은 모든 값과 모든 키와 일치 함을 의미합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.operator": "연산자는 값에 대한 키의 관계를 나타냅니다. 유효한 연산자는 Exists 및 Equal입니다. 기본값은 Equal입니다. Exists는 값에 대한 와일드 카드와 동일하므로 포드가 특정 카테고리의 모든 taint를 허용 할 수 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.tolerationSeconds": "TolerationSeconds는 허용 범위 (NoExecute가 유효해야하며 그렇지 않으면이 필드는 무시 됨)가 taint를 허용하는 기간을 나타냅니다. 기본적으로 설정되어 있지 않으므로 오염을 영원히 견딜 수 있습니다 (제거하지 마십시오). 0 및 음수 값은 시스템에서 0 (즉시 제거)으로 처리됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.value": "Value는 허용치가 일치하는 오염 값입니다. 연산자가 Exists이면 값은 비어 있어야하고 그렇지 않으면 일반 문자열이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints": "TopologySpreadConstraints는 pod 그룹이 토폴로지 도메인에 어떻게 분산되어야하는지 설명합니다. 스케줄러는 제약 조건을 준수하는 방식으로 포드를 예약합니다. 모든 topologySpreadConstraint는 AND 처리됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items": "TopologySpreadConstraint는 지정된 토폴로지간에 일치하는 포드를 분산하는 방법을 지정합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector": "LabelSelector는 일치하는 포드를 찾는 데 사용됩니다. 이 라벨 선택기와 일치하는 포드는 해당 토폴로지 도메인의 포드 수를 결정하기 위해 계산됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.maxSkew": "MaxSkew는 포드가 고르지 않게 분산 될 수있는 정도를 설명합니다. `whenUnsatisfiable = DoNotSchedule` 인 경우 대상 토폴로지에서 일치하는 포드 수와 전역 최소값간에 허용되는 최대 차이입니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 1/1/0으로 확산되는 포드 : | zone1 | zone2 | zone3 | | P | P | | -MaxSkew가 1이면 들어오는 포드는 zone3에 1/1/1이되도록 예약 할 수 있습니다. zone1 (zone2)로 예약하면 zone1 (zone2)의 ActualSkew (2-0)가 MaxSkew (1)을 위반하게됩니다. -MaxSkew가 2이면 들어오는 포드를 모든 영역에 예약 할 수 있습니다. `whenUnsatisfiable = ScheduleAnyway` 인 경우이를 충족하는 토폴로지에 더 높은 우선 순위를 부여하는 데 사용됩니다. 필수 필드입니다. 기본값은 1이고 0은 허용되지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.topologyKey": "TopologyKey는 노드 레이블의 키입니다. 이 키와 동일한 값이있는 레이블이있는 노드는 동일한 토폴로지에있는 것으로 간주됩니다. 우리는 각각을 고려합니다<key, value> &quot;버킷&quot;으로 각 버킷에 균형 잡힌 수의 포드를 넣으십시오. 필수 필드입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.whenUnsatisfiable": "WhenUnsatisfiable은 스프레드 제약 조건을 충족하지 않는 경우 포드를 처리하는 방법을 나타냅니다. -DoNotSchedule (기본값)은 스케줄러가 스케줄하지 않도록 지시합니다. -ScheduleAnyway는 스케줄러에게 임의의 위치에서 포드를 예약하도록 지시하지만, 왜곡을 줄이는 데 도움이되는 토폴로지에 더 높은 우선 순위를 부여합니다. 해당 포드에 대해 가능한 모든 노드 할당이 일부 토폴로지에서 &quot;MaxSkew&quot;를 위반하는 경우에만 수신 포드에 대한 제약 조건이 &quot;불만족&quot;으로 간주됩니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 3/1/1로 확산되는 포드 : | zone1 | zone2 | zone3 | | PPP | P | P | WhenUnsatisfiable이 DoNotSchedule로 설정된 경우 들어오는 pod는 zone2 (zone3)의 ActualSkew (2-1)가 MaxSkew (1)를 충족하므로 zone2 (zone3) 만 3/2/1 (3/1/2)가되도록 예약 할 수 있습니다. 즉, 클러스터는 여전히 불균형 상태 일 수 있지만 스케줄러는 * 더 * 불균형 상태로 만들지 않습니다. 필수 필드입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes": "포드에 속한 컨테이너로 마운트 할 수있는 볼륨 목록입니다. 자세한 정보 : https://kubernetes.io/docs/concepts/storage/volumes",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items": "볼륨은 포드의 모든 컨테이너에서 액세스 할 수있는 포드의 명명 된 볼륨을 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore": "AWSElasticBlockStore는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 AWS 디스크 리소스를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다).",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.readOnly": "VolumeMounts의 ReadOnly 속성을 &quot;true&quot;로 강제 설정하려면 &quot;true&quot;를 지정합니다. 생략하면 기본값은 &quot;false&quot;입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.volumeID": "AWS에있는 영구 디스크 리소스의 고유 ID (Amazon EBS 볼륨). 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk": "AzureDisk는 호스트의 Azure 데이터 디스크 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.cachingMode": "호스트 캐싱 모드 : 없음, 읽기 전용, 읽기 쓰기.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskName": "Blob 저장소에있는 데이터 디스크의 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskURI": "Blob 저장소의 데이터 디스크 URI",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.kind": "예상 값 공유 : 스토리지 계정 당 여러 Blob 디스크 전용 : 스토리지 계정 당 단일 Blob 디스크 관리 : Azure 관리 데이터 디스크 (관리되는 가용성 집합에서만). 기본적으로 공유 됨",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile": "AzureFile은 호스트의 Azure 파일 서비스 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.secretName": "Azure Storage 계정 이름 및 키가 포함 된 비밀의 이름",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.shareName": "이름 공유",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs": "CephFS는 포드의 수명을 공유하는 호스트의 Ceph FS 마운트를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.monitors": "필수 : Monitors는 Ceph 모니터 모음입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.path": "선택 사항 : 전체 Ceph 트리가 아닌 마운트 된 루트로 사용되며 기본값은 /입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretFile": "선택 사항 : SecretFile은 사용자의 키 링 경로이며 기본값은 /etc/ceph/user.secret입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.user": "선택 사항 : 사용자는 rados 사용자 이름, 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder": "Cinder는 kubelets 호스트 머신에 연결되고 마운트 된 cinder 볼륨을 나타냅니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.volumeID": "cinder에서 볼륨을 식별하는 데 사용되는 볼륨 ID입니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap": "ConfigMap은이 볼륨을 채워야하는 configMap을 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi": "CSI (Container Storage Interface)는 특정 외부 CSI 드라이버 (베타 기능)에서 처리하는 임시 저장소를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.driver": "Driver는이 볼륨을 처리하는 CSI 드라이버의 이름입니다. 클러스터에 등록 된 올바른 이름은 관리자에게 문의하십시오.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.fsType": "마운트 할 파일 시스템 유형입니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 제공되지 않으면 적용 할 기본 파일 시스템을 결정하는 관련 CSI 드라이버에 빈 값이 전달됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.volumeAttributes": "VolumeAttributes는 CSI 드라이버에 전달되는 드라이버 별 속성을 저장합니다. 지원되는 값은 드라이버 설명서를 참조하십시오.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI": "DownwardAPI는이 볼륨을 채워야하는 포드에 대한 하향 API를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 사용할 모드 비트. 선택 사항이어야합니다. 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items": "항목은 하향 API 볼륨 파일 목록입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트는 0000과 0777 사이의 8 진수 값이거나 0과 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir": "EmptyDir는 포드의 수명을 공유하는 임시 디렉터리를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir.properties.medium": "이 디렉토리를 백업해야하는 저장 매체 유형입니다. 기본값은 노드의 기본 매체를 사용함을 의미하는 &quot;&quot;입니다. 빈 문자열 (기본값) 또는 메모리 여야합니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir.properties.sizeLimit": "이 EmptyDir 볼륨에 필요한 총 로컬 스토리지 양입니다. 크기 제한은 메모리 매체에도 적용됩니다. 메모리 매체 EmptyDir의 최대 사용량은 여기에 지정된 SizeLimit와 포드에있는 모든 컨테이너의 메모리 제한 합계 사이의 최소값입니다. 기본값은 제한이 정의되지 않았 음을 의미하는 nil입니다. 추가 정보 : http://kubernetes.io/docs/user-guide/volumes#emptydir",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral": "Ephemeral은 클러스터 스토리지 드라이버 (알파 기능)에서 처리하는 볼륨을 나타냅니다. 볼륨의 수명주기는 볼륨을 정의하는 포드에 연결되어 있습니다. 볼륨은 포드가 시작되기 전에 생성되고 포드가 제거되면 삭제됩니다. a) 포드가 실행되는 동안에 만 볼륨이 필요한 경우, b) 스냅 샷에서 복원 또는 용량 추적과 같은 일반 볼륨의 기능이 필요한 경우, c) 스토리지 클래스를 통해 스토리지 드라이버가 지정된 경우, d) 스토리지 드라이버 PersistentVolumeClaim을 통한 동적 볼륨 프로비저닝을 지원합니다 (이 볼륨 유형과 PersistentVolumeClaim 간의 연결에 대한 자세한 내용은 EphemeralVolumeSource 참조). 개별 포드의 수명주기보다 오래 지속되는 볼륨에 대해 PersistentVolumeClaim 또는 공급 업체별 API 중 하나를 사용합니다. CSI 드라이버가 그런 방식으로 사용되는 경우 경량 로컬 임시 볼륨에 CSI를 사용하십시오. 자세한 내용은 드라이버 설명서를 참조하십시오. 포드는 두 유형의 임시 볼륨과 영구 볼륨을 동시에 사용할 수 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate": "볼륨을 프로비저닝하기 위해 독립형 PVC를 작성하는 데 사용됩니다. 이 EphemeralVolumeSource가 포함 된 포드가 PVC의 소유자가됩니다. 즉, PVC가 포드와 함께 삭제됩니다. PVC의 이름은`<pod name> -<volume name> `여기서`<volume name> `는`PodSpec.Volumes` 배열 항목의 이름입니다. 연결된 이름이 PVC에 유효하지 않은 경우 (예 : 너무 긴 경우) 포드 유효성 검사는 포드를 거부합니다. 팟 (Pod)이 소유하지 않은 이름을 가진 기존 PVC는 실수로 관련없는 볼륨을 사용하지 않도록 팟 (Pod)에 사용되지 * 않습니다 *. 그런 다음 관련없는 PVC가 제거 될 때까지 포드 시작이 차단됩니다. 이러한 사전 생성 된 PVC를 포드에서 사용하려는 경우 포드가 존재하면 PVC를 포드에 대한 소유자 참조로 업데이트해야합니다. 일반적으로이 작업은 필요하지 않지만 손상된 클러스터를 수동으로 재구성 할 때 유용 할 수 있습니다. 이 필드는 읽기 전용이며 생성 된 후에는 Kubernetes에서 PVC를 변경하지 않습니다. 필수 항목이며 nil이 아니어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata": "ObjectMeta는 사용자가 만들어야하는 모든 개체를 포함하는 모든 지속 형 리소스에 있어야하는 메타 데이터입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec": "PersistentVolumeClaim의 사양입니다. 전체 콘텐츠는이 템플릿에서 생성 된 PVC에 변경되지 않고 복사됩니다. PersistentVolumeClaim에서와 동일한 필드가 여기에서도 유효합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.accessModes": "AccessModes에는 볼륨에 필요한 액세스 모드가 포함되어 있습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource": "이 필드는 다음 중 하나를 지정하는 데 사용할 수 있습니다. * 기존 VolumeSnapshot 객체 (snapshot.storage.k8s.io/VolumeSnapshot-베타) * 기존 PVC (PersistentVolumeClaim) * 데이터 채우기 (알파)를 순서대로 구현하는 기존 사용자 지정 리소스 / 객체 VolumeSnapshot 개체 유형을 사용하려면 적절한 기능 게이트를 활성화해야합니다 (VolumeSnapshotDataSource 또는 AnyVolumeDataSource) 프로비저닝 도구 또는 외부 컨트롤러가 지정된 데이터 소스를 지원할 수있는 경우 지정된 데이터 소스의 내용을 기반으로 새 볼륨을 생성합니다. 지정된 데이터 소스가 지원되지 않는 경우 볼륨이 생성되지 않고 오류가 이벤트로보고됩니다. 앞으로 더 많은 데이터 소스 유형을 지원할 계획이며 제공자의 동작이 변경 될 수 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.apiGroup": "APIGroup은 참조되는 리소스에 대한 그룹입니다. APIGroup이 지정되지 않은 경우 지정된 종류가 코어 API 그룹에 있어야합니다. 다른 타사 유형의 경우 APIGroup이 필요합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.kind": "Kind는 참조되는 리소스 유형입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.name": "이름은 참조되는 리소스의 이름입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources": "리소스는 볼륨에 있어야하는 최소 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector": "바인딩을 고려할 볼륨에 대한 레이블 쿼리입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.storageClassName": "클레임에 필요한 StorageClass의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.volumeMode": "volumeMode는 클레임에 필요한 볼륨 유형을 정의합니다. 클레임 사양에 포함되지 않은 경우 파일 시스템의 가치가 암시됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.volumeName": "VolumeName은이 클레임을 뒷받침하는 PersistentVolume에 대한 바인딩 참조입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc": "FC는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 파이버 채널 리소스를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.lun": "선택 사항 : FC 대상 LUN 번호",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.targetWWNs": "선택 사항 : FC 대상 월드 와이드 이름 (WWN)",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.wwids": "선택 사항 : FC 볼륨 월드 와이드 식별자 (wwids) wwids 또는 targetWWN과 lun의 조합을 설정해야하지만 둘 다 동시에 설정할 수는 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume": "FlexVolume은 exec 기반 플러그인을 사용하여 프로비저닝 / 연결된 일반 볼륨 리소스를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.driver": "Driver는이 볼륨에 사용할 드라이버의 이름입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본 파일 시스템은 FlexVolume 스크립트에 따라 다릅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.options": "옵션 : 추가 명령 옵션 (있는 경우).",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker": "Flocker는 kubelet의 호스트 머신에 연결된 Flocker 볼륨을 나타냅니다. 이것은 실행중인 Flocker 제어 서비스에 따라 다릅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker.properties.datasetName": "메타 데이터로 저장된 데이터 세트의 이름-&gt; Flocker 용 데이터 세트의 이름은 더 이상 사용되지 않는 것으로 간주되어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker.properties.datasetUUID": "데이터 세트의 UUID입니다. 이것은 Flocker 데이터 세트의 고유 식별자입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk": "GCEPersistentDisk는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 GCE 디스크 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다). 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.pdName": "GCE에있는 PD 리소스의 고유 이름입니다. GCE에서 디스크를 식별하는 데 사용됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo": "GitRepo는 특정 개정판의 git 저장소를 나타냅니다. DEPRECATED : GitRepo는 더 이상 사용되지 않습니다. git 저장소로 컨테이너를 프로비저닝하려면 git을 사용하여 저장소를 복제하는 InitContainer에 EmptyDir을 마운트 한 다음 Pod의 컨테이너에 EmptyDir을 마운트합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.directory": "대상 디렉토리 이름. &#39;..&#39;을 포함하거나 시작하지 않아야합니다. 만약 &#39;.&#39; 제공되면 볼륨 디렉토리는 git 저장소가됩니다. 그렇지 않으면 지정된 경우 볼륨은 지정된 이름의 하위 디렉토리에 git 저장소를 포함합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.repository": "저장소 URL",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.revision": "지정된 개정에 대한 커밋 해시입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs": "Glusterfs는 포드의 수명을 공유하는 호스트의 Glusterfs 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.endpoints": "EndpointsName은 Glusterfs 토폴로지를 자세히 설명하는 엔드 포인트 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.path": "Path는 Glusterfs 볼륨 경로입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.readOnly": "여기서 ReadOnly는 Glusterfs 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath": "HostPath는 컨테이너에 직접 노출되는 호스트 시스템의 기존 파일 또는 디렉터리를 나타냅니다. 이것은 일반적으로 호스트 시스템을 볼 수있는 시스템 에이전트 또는 기타 권한있는 항목에 사용됩니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath.properties.path": "호스트의 디렉토리 경로입니다. 경로가 심볼릭 링크이면 실제 경로에 대한 링크를 따릅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath.properties.type": "HostPath 볼륨의 유형 기본값은 &quot;&quot;입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi": "ISCSI는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 ISCSI 디스크 리소스를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/iscsi/README.md",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthDiscovery": "iSCSI 검색 CHAP 인증 지원 여부",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthSession": "iSCSI 세션 CHAP 인증 지원 여부",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.initiatorName": "사용자 지정 iSCSI 이니시에이터 이름. initiatorName이 iscsiInterface와 동시에 지정되면 새로운 iSCSI 인터페이스<target portal> :<volume name> 연결을 위해 생성됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.iqn": "대상 iSCSI 정규화 이름.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.iscsiInterface": "iSCSI 전송을 사용하는 iSCSI 인터페이스 이름입니다. 기본값은 &#39;default&#39;(tcp)입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.lun": "iSCSI 대상 LUN 번호.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.portals": "iSCSI 대상 포털 목록. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.targetPortal": "iSCSI 대상 포털. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.name": "볼륨의 이름. DNS_LABEL이어야하며 포드 내에서 고유해야합니다. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs": "NFS는 포드의 수명을 공유하는 호스트의 NFS 마운트를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.path": "NFS 서버에서 내 보낸 경로입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.readOnly": "여기서 ReadOnly는 읽기 전용 권한으로 NFS 내보내기를 강제로 마운트합니다. 기본값은 false입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.server": "Server는 NFS 서버의 호스트 이름 또는 IP 주소입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim": "PersistentVolumeClaimVolumeSource는 동일한 네임 스페이스에있는 PersistentVolumeClaim에 대한 참조를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.claimName": "ClaimName은이 볼륨을 사용하는 pod와 동일한 네임 스페이스에있는 PersistentVolumeClaim의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.readOnly": "VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk": "PhotonPersistentDisk는 kubelets 호스트 머신에 연결되고 마운트 된 PhotonController 영구 디스크를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.pdID": "Photon Controller 영구 디스크를 식별하는 ID",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume": "PortworxVolume은 kubelets 호스트 머신에 연결되고 마운트 된 portworx 볼륨을 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.fsType": "FSType은 마운트 할 파일 시스템 유형을 나타냅니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.volumeID": "VolumeID는 Portworx 볼륨을 고유하게 식별합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected": "하나의 리소스 비밀, 구성 맵 및 하향 API에 대한 항목",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.defaultMode": "기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources": "볼륨 예측 목록",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items": "지원되는 다른 볼륨 유형과 함께 투영 될 수있는 투영",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap": "프로젝트 할 configMap 데이터에 대한 정보",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI": "프로젝트 할 downwardAPI 데이터에 대한 정보",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items": "Items는 DownwardAPIVolume 파일 목록입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트는 0000과 0777 사이의 8 진수 값이거나 0과 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret": "프로젝트 할 비밀 데이터에 대한 정보",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken": "프로젝트 할 serviceAccountToken 데이터에 대한 정보",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.audience": "청중은 토큰의 의도 된 청중입니다. 토큰 수신자는 토큰 대상에 지정된 식별자로 자신을 식별해야하며 그렇지 않으면 토큰을 거부해야합니다. 대상은 기본적으로 apiserver의 식별자입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.expirationSeconds": "ExpirationSeconds는 서비스 계정 토큰의 요청 된 유효 기간입니다. 토큰이 만료에 가까워지면 kubelet 볼륨 플러그인이 사전에 서비스 계정 토큰을 교체합니다. 토큰이 수명의 80 % 이상이거나 토큰이 24 시간 이상인 경우 kubelet은 토큰 순환을 시작합니다. 기본값은 1 시간이며 최소 10 분이어야합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.path": "경로는 토큰을 투영 할 파일의 마운트 지점에 상대적인 경로입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte": "Quobyte는 포드의 수명을 공유하는 호스트의 Quobyte 마운트를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.group": "볼륨 액세스를 매핑 할 그룹 기본값은 그룹 없음입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.readOnly": "여기서 ReadOnly는 Quobyte 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.registry": "레지스트리는 볼륨의 중앙 레지스트리 역할을하는 호스트 : 포트 쌍 (여러 항목은 쉼표로 구분됨)으로 문자열로 지정된 단일 또는 다중 Quobyte Registry 서비스를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.tenant": "백엔드에서 주어진 Quobyte 볼륨을 소유하는 테넌트는 동적으로 프로비저닝 된 Quobyte 볼륨과 함께 사용되며 값은 플러그인에 의해 설정됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.user": "볼륨 액세스를 기본값에 매핑하는 사용자를 serivceaccount 사용자에게",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.volume": "Volume은 이미 생성 된 Quobyte 볼륨을 이름으로 참조하는 문자열입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd": "RBD는 포드의 수명을 공유하는 호스트의 Rados 블록 장치 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#rbd",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.image": "라도 스 이미지 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.keyring": "키링은 RBDUser의 키링 경로입니다. 기본값은 / etc / ceph / keyring입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.monitors": "Ceph 모니터 모음. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.pool": "라도 스 풀 이름. 기본값은 rbd입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.user": "rados 사용자 이름입니다. 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO": "ScaleIO는 Kubernetes 노드에 연결되고 마운트 된 ScaleIO 영구 볼륨을 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본값은 &quot;xfs&quot;입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.gateway": "ScaleIO API 게이트웨이의 호스트 주소입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.protectionDomain": "구성된 스토리지에 대한 ScaleIO 보호 도메인의 이름입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.sslEnabled": "게이트웨이와의 SSL 통신을 활성화 / 비활성화하는 플래그, 기본값은 false",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.storageMode": "볼륨의 스토리지가 ThickProvisioned인지 ThinProvisioned인지 여부를 나타냅니다. 기본값은 ThinProvisioned입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.storagePool": "보호 도메인과 연결된 ScaleIO 스토리지 풀입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.system": "ScaleIO에 구성된 스토리지 시스템의 이름입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.volumeName": "이 볼륨 소스와 연결된 ScaleIO 시스템에 이미 생성 된 볼륨의 이름입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret": "Secret은이 볼륨을 채워야하는 비밀을 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.secretName": "사용할 팟 (Pod) 네임 스페이스의 시크릿 이름입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos": "StorageOS는 Kubernetes 노드에 연결되고 마운트 된 StorageOS 볼륨을 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.volumeName": "VolumeName은 사람이 읽을 수있는 StorageOS 볼륨의 이름입니다. 볼륨 이름은 네임 스페이스 내에서만 고유합니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.volumeNamespace": "VolumeNamespace는 StorageOS 내의 볼륨 범위를 지정합니다. 네임 스페이스를 지정하지 않으면 Pod의 네임 스페이스가 사용됩니다. 이를 통해보다 긴밀한 통합을 위해 Kubernetes 이름 범위를 StorageOS 내에서 미러링 할 수 있습니다. 기본 동작을 재정의하려면 VolumeName을 임의의 이름으로 설정합니다. StorageOS 내에서 네임 스페이스를 사용하지 않는 경우 &quot;default&quot;로 설정하십시오. StorageOS 내에 존재하지 않는 네임 스페이스가 생성됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume": "VsphereVolume은 kubelets 호스트 시스템에 연결되고 마운트 된 vSphere 볼륨을 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyID": "StoragePolicyName과 연결된 SPBM (스토리지 정책 기반 관리) 프로필 ID입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyName": "SPBM (스토리지 정책 기반 관리) 프로필 이름입니다.",
    "%StatefulSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.volumePath": "vSphere 볼륨 vmdk를 식별하는 경로",
    "%StatefulSet.json.properties.spec.properties.updateStrategy": "updateStrategy는 템플릿이 수정 될 때 StatefulSet에서 포드를 업데이트하는 데 사용될 StatefulSetUpdateStrategy를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.updateStrategy.properties.rollingUpdate": "RollingUpdate는 Type이 RollingUpdateStatefulSetStrategyType 일 때 매개 변수를 전달하는 데 사용됩니다.",
    "%StatefulSet.json.properties.spec.properties.updateStrategy.properties.rollingUpdate.properties.partition": "Partition은 StatefulSet가 분할되어야하는 서수를 나타냅니다. 기본값은 0입니다.",
    "%StatefulSet.json.properties.spec.properties.updateStrategy.properties.type": "Type은 StatefulSetUpdateStrategy의 유형을 나타냅니다. 기본값은 RollingUpdate입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates": "volumeClaimTemplates는 포드가 참조 할 수있는 클레임 목록입니다. StatefulSet 컨트롤러는 포드의 ID를 유지하는 방식으로 네트워크 ID를 클레임에 매핑하는 역할을합니다. 이 목록의 모든 클레임에는 템플릿의 한 컨테이너에 일치하는 (이름 별) volumeMount가 하나 이상 있어야합니다. 이 목록의 클레임은 동일한 이름을 가진 템플릿의 모든 볼륨보다 우선합니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items": "PersistentVolumeClaim은 영구 볼륨에 대한 사용자의 요청 및 클레임입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata": "ObjectMeta는 사용자가 만들어야하는 모든 개체를 포함하는 모든 지속 형 리소스에 있어야하는 메타 데이터입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec": "Spec은 포드 작성자가 요청한 볼륨의 원하는 특성을 정의합니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.accessModes": "AccessModes에는 볼륨에 필요한 액세스 모드가 포함되어 있습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.dataSource": "이 필드는 다음 중 하나를 지정하는 데 사용할 수 있습니다. * 기존 VolumeSnapshot 객체 (snapshot.storage.k8s.io/VolumeSnapshot-베타) * 기존 PVC (PersistentVolumeClaim) * 데이터 채우기 (알파)를 순서대로 구현하는 기존 사용자 지정 리소스 / 객체 VolumeSnapshot 개체 유형을 사용하려면 적절한 기능 게이트를 활성화해야합니다 (VolumeSnapshotDataSource 또는 AnyVolumeDataSource) 프로비저닝 도구 또는 외부 컨트롤러가 지정된 데이터 소스를 지원할 수있는 경우 지정된 데이터 소스의 내용을 기반으로 새 볼륨을 생성합니다. 지정된 데이터 소스가 지원되지 않는 경우 볼륨이 생성되지 않고 오류가 이벤트로보고됩니다. 앞으로 더 많은 데이터 소스 유형을 지원할 계획이며 제공자의 동작이 변경 될 수 있습니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.dataSource.properties.apiGroup": "APIGroup은 참조되는 리소스에 대한 그룹입니다. APIGroup이 지정되지 않은 경우 지정된 종류가 코어 API 그룹에 있어야합니다. 다른 타사 유형의 경우 APIGroup이 필요합니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.dataSource.properties.kind": "Kind는 참조되는 리소스 유형입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.dataSource.properties.name": "이름은 참조되는 리소스의 이름입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.resources": "리소스는 볼륨에 있어야하는 최소 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.selector": "바인딩을 고려할 볼륨에 대한 레이블 쿼리입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.storageClassName": "클레임에 필요한 StorageClass의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.volumeMode": "volumeMode는 클레임에 필요한 볼륨 유형을 정의합니다. 클레임 사양에 포함되지 않은 경우 파일 시스템의 가치가 암시됩니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.spec.properties.volumeName": "VolumeName은이 클레임을 뒷받침하는 PersistentVolume에 대한 바인딩 참조입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.status": "상태는 영구 볼륨 클레임의 현재 정보 / 상태를 나타냅니다. 읽기 전용. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.status.properties.accessModes": "AccessModes에는 PVC를 지원하는 볼륨에있는 실제 액세스 모드가 포함됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.status.properties.capacity": "기본 볼륨의 실제 리소스를 나타냅니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.status.properties.conditions": "지속적 볼륨 청구의 현재 상태. 기본 영구 볼륨의 크기가 조정되는 경우 조건이 &#39;ResizeStarted&#39;로 설정됩니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.status.properties.conditions.items": "PersistentVolumeClaimCondition은 pvc 상태에 대한 세부 정보를 포함합니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.status.properties.conditions.items.properties.lastProbeTime": "지난번에 우리는 조건을 조사했습니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.status.properties.conditions.items.properties.lastTransitionTime": "마지막으로 조건이 한 상태에서 다른 상태로 전환 된 시간입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.status.properties.conditions.items.properties.message": "마지막 전환에 대한 세부 정보를 나타내는 사람이 읽을 수있는 메시지입니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.status.properties.conditions.items.properties.reason": "고유합니다. 이것은 조건의 마지막 전환 이유를 제공하는 짧고 기계가 이해할 수있는 문자열이어야합니다. &quot;ResizeStarted&quot;가보고되면 기본 영구 볼륨의 크기가 조정되고 있음을 의미합니다.",
    "%StatefulSet.json.properties.spec.properties.volumeClaimTemplates.items.properties.status.properties.phase": "Phase는 PersistentVolumeClaim의 현재 단계를 나타냅니다.",
    "%StatefulSet.json.properties.status": "Status는이 StatefulSet에있는 포드의 현재 상태입니다. 이 데이터는 일정 기간에 의해 오래되었을 수 있습니다.",
    "%StatefulSet.json.properties.status.properties.collisionCount": "collisionCount는 StatefulSet에 대한 해시 충돌 수입니다. StatefulSet 컨트롤러는 최신 ControllerRevision의 이름을 만들어야 할 때이 필드를 충돌 방지 메커니즘으로 사용합니다.",
    "%StatefulSet.json.properties.status.properties.conditions": "statefulset의 현재 상태에 대해 사용 가능한 최신 관찰을 나타냅니다.",
    "%StatefulSet.json.properties.status.properties.conditions.items": "StatefulSetCondition은 특정 지점에서 statefulset의 상태를 설명합니다.",
    "%StatefulSet.json.properties.status.properties.conditions.items.properties.lastTransitionTime": "마지막으로 조건이 한 상태에서 다른 상태로 전환 된 시간입니다.",
    "%StatefulSet.json.properties.status.properties.conditions.items.properties.message": "전환에 대한 세부 정보를 나타내는 사람이 읽을 수있는 메시지입니다.",
    "%StatefulSet.json.properties.status.properties.conditions.items.properties.reason": "조건의 마지막 전환 이유입니다.",
    "%StatefulSet.json.properties.status.properties.conditions.items.properties.status": "조건의 상태는 True, False, Unknown 중 하나입니다.",
    "%StatefulSet.json.properties.status.properties.conditions.items.properties.type": "상태 저장 조건의 유형입니다.",
    "%StatefulSet.json.properties.status.properties.currentReplicas": "currentReplicas는 currentRevision으로 표시된 StatefulSet 버전에서 StatefulSet 컨트롤러가 생성 한 포드 수입니다.",
    "%StatefulSet.json.properties.status.properties.currentRevision": "비어 있지 않은 경우 currentRevision은 [0, currentReplicas) 시퀀스로 포드를 생성하는 데 사용되는 StatefulSet의 버전을 나타냅니다.",
    "%StatefulSet.json.properties.status.properties.observedGeneration": "observeGeneration은이 StatefulSet에 대해 관찰 된 가장 최근 세대입니다. API 서버에 의해 변형이 업데이트되면 StatefulSet의 생성에 해당합니다.",
    "%StatefulSet.json.properties.status.properties.readyReplicas": "readyReplicas는 준비 상태가있는 StatefulSet 컨트롤러에서 생성 한 포드 수입니다.",
    "%StatefulSet.json.properties.status.properties.replicas": "replicas는 StatefulSet 컨트롤러에 의해 생성 된 포드 수입니다.",
    "%StatefulSet.json.properties.status.properties.updateRevision": "비어 있지 않은 경우 updateRevision은 [replicas-updatedReplicas, replicas) 순서로 포드를 생성하는 데 사용 된 StatefulSet의 버전을 나타냅니다.",
    "%StatefulSet.json.properties.status.properties.updatedReplicas": "updatedReplicas는 updateRevision으로 표시된 StatefulSet 버전에서 StatefulSet 컨트롤러가 생성 한 포드 수입니다.",
    "%PodSecurityPolicy.json": "PodSecurityPolicy는 포드 및 컨테이너에 적용될 보안 컨텍스트에 영향을주는 요청을 만드는 기능을 제어합니다.",
    "%PodSecurityPolicy.json.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%PodSecurityPolicy.json.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%PodSecurityPolicy.json.properties.metadata": "표준 개체의 메타 데이터. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    "%PodSecurityPolicy.json.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%PodSecurityPolicy.json.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%PodSecurityPolicy.json.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%PodSecurityPolicy.json.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%PodSecurityPolicy.json.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%PodSecurityPolicy.json.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%PodSecurityPolicy.json.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%PodSecurityPolicy.json.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%PodSecurityPolicy.json.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%PodSecurityPolicy.json.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%PodSecurityPolicy.json.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%PodSecurityPolicy.json.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%PodSecurityPolicy.json.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%PodSecurityPolicy.json.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%PodSecurityPolicy.json.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%PodSecurityPolicy.json.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%PodSecurityPolicy.json.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%PodSecurityPolicy.json.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%PodSecurityPolicy.json.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%PodSecurityPolicy.json.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%PodSecurityPolicy.json.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%PodSecurityPolicy.json.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%PodSecurityPolicy.json.properties.spec": "spec은 적용되는 정책을 정의합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.allowPrivilegeEscalation": "allowPrivilegeEscalation은 포드가 권한 에스컬레이션을 허용하도록 요청할 수 있는지 여부를 결정합니다. 지정하지 않으면 기본값은 true입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.allowedCSIDrivers": "AllowedCSIDrivers는 포드 사양에 포함되도록 명시 적으로 설정해야하는 인라인 CSI 드라이버의 허용 목록입니다. 빈 값은 CSI 드라이버를 인라인 임시 볼륨에 사용할 수 있음을 나타냅니다. 이것은 베타 필드이며 API 서버가 CSIInlineVolume 기능 게이트를 활성화하는 경우에만 적용됩니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.allowedCSIDrivers.items": "AllowedCSIDriver는 사용할 수있는 단일 인라인 CSI 드라이버를 나타냅니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.allowedCSIDrivers.items.properties.name": "이름은 CSI 드라이버의 등록 된 이름입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.allowedCapabilities": "allowedCapabilities는 컨테이너에 추가하도록 요청할 수있는 기능 목록입니다. 이 필드의 기능은 포드 작성자의 재량에 따라 추가 될 수 있습니다. allowedCapabilities 및 requiredDropCapabilities 모두에 기능을 나열하면 안됩니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.allowedFlexVolumes": "allowedFlexVolumes는 Flexvolume의 허용 목록입니다. 비어 있거나 nil은 모든 Flexvolume을 사용할 수 있음을 나타냅니다. 이 매개 변수는 &quot;volumes&quot;필드에서 Flexvolumes 사용이 허용 된 경우에만 유효합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.allowedFlexVolumes.items": "AllowedFlexVolume은 사용이 허용 된 단일 Flexvolume을 나타냅니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.allowedFlexVolumes.items.properties.driver": "driver는 Flexvolume 드라이버의 이름입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.allowedHostPaths": "allowedHostPaths는 호스트 경로의 허용 목록입니다. 비어 있음은 모든 호스트 경로를 사용할 수 있음을 나타냅니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.allowedHostPaths.items": "AllowedHostPath는 포드가 사용할 정책에 의해 활성화 될 호스트 볼륨 조건을 정의합니다. 정의 할 경로 접두사가 필요합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.allowedHostPaths.items.properties.pathPrefix": "pathPrefix는 호스트 볼륨이 일치해야하는 경로 접두사입니다. `*`는 지원하지 않습니다. 호스트 경로로 경로 접두사의 유효성을 검사 할 때 후행 슬래시가 잘립니다. 예 :`/ foo`는`/ foo`,`/ foo /`를 허용하고`/ foo / bar``/ foo`는`/ food` 또는`/ etc / foo`를 허용하지 않습니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.allowedHostPaths.items.properties.readOnly": "true로 설정하면 모든 볼륨 마운트가 readOnly 인 경우에만 pathPrefix와 일치하는 호스트 볼륨을 허용합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.allowedProcMountTypes": "AllowedProcMountTypes는 허용 된 ProcMountTypes의 허용 목록입니다. 비어 있거나 nil은 DefaultProcMountType 만 사용할 수 있음을 나타냅니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.allowedUnsafeSysctls": "allowedUnsafeSysctls는 명시 적으로 허용 된 안전하지 않은 sysctls 목록이며 기본값은 none입니다. 각 항목은 일반 sysctl 이름이거나 &quot;*&quot;로 끝나는 경우 허용 된 sysctls의 접두사로 간주됩니다. 단일 *는 안전하지 않은 모든 시스템이 허용됨을 의미합니다. Kubelet은 거부를 피하기 위해 허용 된 모든 안전하지 않은 sysctls를 명시 적으로 허용해야합니다. 예 : &quot;foo / *&quot;는 &quot;foo / bar&quot;, &quot;foo / baz&quot;등을 허용합니다. 예를 들어 &quot;foo. *&quot;는 &quot;foo.bar&quot;, &quot;foo.baz&quot;등을 허용합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.defaultAddCapabilities": "defaultAddCapabilities는 포드 사양이 특별히 기능을 삭제하지 않는 한 컨테이너에 추가되는 기본 기능 집합입니다. defaultAddCapabilities 및 requiredDropCapabilities 모두에 기능을 나열 할 수 없습니다. 여기에 추가 된 기능은 암시 적으로 허용되며 allowedCapabilities 목록에 포함될 필요는 없습니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.defaultAllowPrivilegeEscalation": "defaultAllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부에 대한 기본 설정을 제어합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.forbiddenSysctls": "forbiddenSysctls는 명시 적으로 금지 된 sysctls 목록이며 기본값은 없음입니다. 각 항목은 일반 sysctl 이름이거나 &quot;*&quot;로 끝나는 경우 금지 된 sysctls의 접두사로 간주됩니다. 단일 *는 모든 시스템이 금지되었음을 의미합니다. 예 : &quot;foo / *&quot;는 &quot;foo / bar&quot;, &quot;foo / baz&quot;등을 금지합니다. 예를 들어 &quot;foo. *&quot;는 &quot;foo.bar&quot;, &quot;foo.baz&quot;등을 금지합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.fsGroup": "fsGroup은 SecurityContext에서 사용하는 fs 그룹을 지정하는 전략입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.fsGroup.properties.ranges": "범위는 fs 그룹의 허용 범위입니다. 단일 fs 그룹을 강제하려면 시작과 끝이 동일한 단일 범위를 제공하십시오. MustRunAs에 필요합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.fsGroup.properties.ranges.items": "IDRange는 허용되는 ID 범위의 최소 / 최대를 제공합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.fsGroup.properties.ranges.items.properties.max": "max는 범위의 끝 (포함)입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.fsGroup.properties.ranges.items.properties.min": "min은 범위의 시작입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.fsGroup.properties.rule": "규칙은 SecurityContext에서 사용되는 FSGroup을 지시하는 전략입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.hostIPC": "hostIPC는 정책이 포드 사양에서 HostIPC 사용을 허용하는지 여부를 결정합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.hostNetwork": "hostNetwork는 정책이 포드 사양에서 HostNetwork 사용을 허용하는지 확인합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.hostPID": "hostPID는 정책이 포드 사양에서 HostPID 사용을 허용하는지 여부를 결정합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.hostPorts": "hostPorts는 노출이 허용되는 호스트 포트 범위를 결정합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.hostPorts.items": "HostPortRange는 포드가 사용할 정책에 의해 활성화 될 호스트 포트 범위를 정의합니다. 시작과 끝을 모두 정의해야합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.hostPorts.items.properties.max": "max는 범위의 끝 (포함)입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.hostPorts.items.properties.min": "min은 범위의 시작입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.privileged": "privileged는 포드가 권한있는 것으로 실행되도록 요청할 수 있는지 여부를 결정합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.readOnlyRootFilesystem": "true로 설정된 경우 readOnlyRootFilesystem은 컨테이너가 읽기 전용 루트 파일 시스템으로 실행되도록합니다. 컨테이너가 특별히 읽기 전용이 아닌 루트 파일 시스템으로 실행하도록 요청하는 경우 PSP는 포드를 거부해야합니다. false로 설정하면 컨테이너는 원할 경우 읽기 전용 루트 파일 시스템으로 실행될 수 있지만 강제 실행되지는 않습니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.requiredDropCapabilities": "requiredDropCapabilities는 컨테이너에서 삭제되는 기능입니다. 삭제해야하며 추가 할 수 없습니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.runAsGroup": "RunAsGroup은 설정할 수있는 허용 가능한 RunAsGroup 값을 지정하는 전략입니다. 이 필드를 생략하면 포드의 RunAsGroup이 임의의 값을 가질 수 있습니다. 이 필드를 사용하려면 RunAsGroup 기능 게이트를 활성화해야합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.runAsGroup.properties.ranges": "ranges는 사용할 수있는 gid의 허용 범위입니다. 단일 gid를 강제하려면 시작과 끝이 동일한 단일 범위를 제공하십시오. MustRunAs에 필요합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.runAsGroup.properties.ranges.items": "IDRange는 허용되는 ID 범위의 최소 / 최대를 제공합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.runAsGroup.properties.ranges.items.properties.max": "max는 범위의 끝 (포함)입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.runAsGroup.properties.ranges.items.properties.min": "min은 범위의 시작입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.runAsGroup.properties.rule": "규칙은 설정할 수있는 허용 가능한 RunAsGroup 값을 지정하는 전략입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.runAsUser": "runAsUser는 설정할 수있는 허용 가능한 RunAsUser 값을 지정하는 전략입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.runAsUser.properties.ranges": "ranges는 사용할 수있는 uid의 허용 범위입니다. 단일 uid를 강제하려면 시작과 끝이 동일한 단일 범위를 제공하십시오. MustRunAs에 필요합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.runAsUser.properties.ranges.items": "IDRange는 허용되는 ID 범위의 최소 / 최대를 제공합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.runAsUser.properties.ranges.items.properties.max": "max는 범위의 끝 (포함)입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.runAsUser.properties.ranges.items.properties.min": "min은 범위의 시작입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.runAsUser.properties.rule": "규칙은 설정할 수있는 허용 가능한 RunAsUser 값을 지정하는 전략입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.runtimeClass": "runtimeClass는 포드에 대해 허용 가능한 RuntimeClass를 지정하는 전략입니다. 이 필드를 생략하면 포드의 runtimeClassName 필드가 제한되지 않습니다. 이 필드의 적용은 활성화되는 RuntimeClass 기능 게이트에 따라 다릅니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.runtimeClass.properties.allowedRuntimeClassNames": "allowedRuntimeClassNames는 포드에 지정할 수있는 RuntimeClass 이름의 허용 목록입니다. &quot;*&quot;값은 모든 RuntimeClass 이름이 허용되며 목록에서 유일한 항목이어야 함을 의미합니다. 빈 목록을 사용하려면 RuntimeClassName 필드를 설정 해제해야합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.runtimeClass.properties.defaultRuntimeClassName": "defaultRuntimeClassName은 포드에 설정할 기본 RuntimeClassName입니다. 기본값은 allowedRuntimeClassNames 목록에서 허용해야합니다. nil 값은 포드를 변경하지 않습니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.seLinux": "seLinux는 설정할 수있는 허용 가능한 레이블을 지정하는 전략입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.seLinux.properties.rule": "규칙은 설정할 수있는 허용 가능한 레이블을 지정하는 전략입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.seLinux.properties.seLinuxOptions": "다음으로 실행하는 데 필요한 seLinuxOptions; MustRunAs에 필요 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%PodSecurityPolicy.json.properties.spec.properties.seLinux.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.seLinux.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.seLinux.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.seLinux.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.supplementalGroups": "SupplementalGroups는 SecurityContext에서 사용되는 추가 그룹을 지시하는 전략입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.supplementalGroups.properties.ranges": "범위는 보조 그룹의 허용 범위입니다. 단일 보조 그룹을 강제하려면 시작과 끝이 동일한 단일 범위를 제공하십시오. MustRunAs에 필요합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.supplementalGroups.properties.ranges.items": "IDRange는 허용되는 ID 범위의 최소 / 최대를 제공합니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.supplementalGroups.properties.ranges.items.properties.max": "max는 범위의 끝 (포함)입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.supplementalGroups.properties.ranges.items.properties.min": "min은 범위의 시작입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.supplementalGroups.properties.rule": "규칙은 SecurityContext에서 사용되는 보충 그룹을 지시하는 전략입니다.",
    "%PodSecurityPolicy.json.properties.spec.properties.volumes": "볼륨은 볼륨 플러그인의 허용 목록입니다. 비어 있음은 볼륨을 사용할 수 없음을 나타냅니다. 모든 볼륨을 허용하려면 &#39;*&#39;를 사용할 수 있습니다.",
    "%ConfigMap.json": "ConfigMap은 포드가 사용할 구성 데이터를 보유합니다.",
    "%ConfigMap.json.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%ConfigMap.json.properties.binaryData": "BinaryData는 이진 데이터를 포함합니다. 각 키는 영숫자 문자 &#39;-&#39;, &#39;_&#39;또는 &#39;.&#39;로 구성되어야합니다. BinaryData는 UTF-8 범위에없는 바이트 시퀀스를 포함 할 수 있습니다. BinaryData에 저장된 키는 데이터 필드의 키와 겹치지 않아야하며 이는 유효성 검사 프로세스 중에 적용됩니다. 이 필드를 사용하려면 1.10+ apiserver 및 kubelet이 필요합니다.",
    "%ConfigMap.json.properties.data": "데이터에는 구성 데이터가 포함됩니다. 각 키는 영숫자 문자 &#39;-&#39;, &#39;_&#39;또는 &#39;.&#39;로 구성되어야합니다. 비 UTF-8 바이트 시퀀스가있는 값은 BinaryData 필드를 사용해야합니다. Data에 저장된 키는 BinaryData 필드의 키와 겹치지 않아야하며 이는 유효성 검사 프로세스 중에 적용됩니다.",
    "%ConfigMap.json.properties.immutable": "True로 설정된 경우 Immutable은 ConfigMap에 저장된 데이터를 업데이트 할 수 없도록합니다 (객체 메타 데이터 만 수정할 수 있음). true로 설정하지 않으면 언제든지 필드를 수정할 수 있습니다. 기본값은 nil입니다. ImmutableEphemeralVolumes 기능 게이트에 의해 활성화 된 베타 필드입니다.",
    "%ConfigMap.json.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%ConfigMap.json.properties.metadata": "표준 개체의 메타 데이터. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    "%ConfigMap.json.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%ConfigMap.json.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%ConfigMap.json.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%ConfigMap.json.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%ConfigMap.json.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%ConfigMap.json.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%ConfigMap.json.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%ConfigMap.json.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%ConfigMap.json.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%ConfigMap.json.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%ConfigMap.json.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%ConfigMap.json.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%ConfigMap.json.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%ConfigMap.json.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%ConfigMap.json.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%ConfigMap.json.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%ConfigMap.json.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%ConfigMap.json.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%ConfigMap.json.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%ConfigMap.json.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%ConfigMap.json.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%ConfigMap.json.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%ReplicaSet.json": "ReplicaSet는 지정된 수의 포드 복제본이 주어진 시간에 실행되도록합니다.",
    "%ReplicaSet.json.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%ReplicaSet.json.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%ReplicaSet.json.properties.metadata": "ReplicaSet의 레이블이 비어있는 경우 기본적으로 ReplicaSet가 관리하는 포드와 동일하게 설정됩니다. 표준 개체의 메타 데이터. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    "%ReplicaSet.json.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%ReplicaSet.json.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%ReplicaSet.json.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%ReplicaSet.json.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%ReplicaSet.json.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%ReplicaSet.json.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%ReplicaSet.json.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%ReplicaSet.json.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%ReplicaSet.json.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%ReplicaSet.json.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%ReplicaSet.json.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%ReplicaSet.json.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%ReplicaSet.json.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%ReplicaSet.json.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%ReplicaSet.json.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%ReplicaSet.json.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%ReplicaSet.json.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%ReplicaSet.json.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%ReplicaSet.json.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%ReplicaSet.json.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%ReplicaSet.json.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%ReplicaSet.json.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%ReplicaSet.json.properties.spec": "Spec은 ReplicaSet의 원하는 동작에 대한 사양을 정의합니다. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%ReplicaSet.json.properties.spec.properties.minReadySeconds": "새로 생성 된 포드가 사용 가능한 것으로 간주되기 위해 컨테이너 충돌없이 준비되어야하는 최소 시간 (초)입니다. 기본값은 0 (포드는 준비되는 즉시 사용 가능한 것으로 간주 됨)",
    "%ReplicaSet.json.properties.spec.properties.replicas": "Replicas는 원하는 복제본의 수입니다. 명시 적 0과 지정되지 않음을 구별하기위한 포인터입니다. 기본값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
    "%ReplicaSet.json.properties.spec.properties.selector": "선택기는 복제본 수와 일치해야하는 포드에 대한 라벨 쿼리입니다. 이 복제본 세트에서 제어하기 위해 일치해야하는 레이블 키 및 값입니다. 포드 템플릿의 레이블과 일치해야합니다. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
    "%ReplicaSet.json.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%ReplicaSet.json.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%ReplicaSet.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%ReplicaSet.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%ReplicaSet.json.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%ReplicaSet.json.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%ReplicaSet.json.properties.spec.properties.template": "템플릿은 부족한 복제본이 감지 될 경우 생성 될 포드를 설명하는 개체입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata": "표준 개체의 메타 데이터. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec": "pod의 원하는 동작에 대한 사양입니다. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.activeDeadlineSeconds": "시스템이 실패로 표시하고 연관된 컨테이너를 강제 종료하기 전에 팟 (Pod)이 StartTime에 상대적으로 노드에서 활성화 될 수있는 선택적 기간 (초)입니다. 값은 양의 정수 여야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity": "지정된 경우 포드의 예약 제약",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity": "포드에 대한 노드 선호도 예약 규칙을 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 노드가 대응하는 matchExpressions와 일치하면 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "빈 선호 스케줄링 용어는 암시 적 가중치가 0 인 모든 개체와 일치합니다 (즉, 작동하지 않음). null 선호 스케줄링 용어는 객체와 일치하지 않습니다 (즉, 작동하지 않음).",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference": "해당 가중치와 관련된 노드 선택기 용어입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 nodeSelectorTerm 일치와 관련된 가중치입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms": "필수입니다. 노드 선택기 용어 목록입니다. 용어는 OR로 연결됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items": "null 또는 빈 노드 선택기 용어는 개체와 일치하지 않습니다. 이들의 요구 사항은 AND입니다. TopologySelectorTerm 유형은 NodeSelectorTerm의 하위 집합을 구현합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity": "포드 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 배치).",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 및 노드가 대응하는 podAffinityTerm과 일치하는 포드를 갖는 경우 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity": "포드 반 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 두지 않음).",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 반친 화성 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치의 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 반친 화성 표현식 등)을 충족하는 각 노드에 대해 다음 요소를 반복하여 합계를 계산합니다. 이 필드와 노드에 해당 podAffinityTerm과 일치하는 포드가있는 경우 합계에 &quot;weight&quot;를 추가합니다. 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 반친 화성 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 반친 화성 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않는 경우 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치 (선호도)하거나 배치하지 않아야 (반 선호도)해야합니다. 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.automountServiceAccountToken": "AutomountServiceAccountToken은 서비스 계정 토큰을 자동으로 마운트해야하는지 여부를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers": "포드에 속한 컨테이너 목록입니다. 현재 컨테이너를 추가하거나 제거 할 수 없습니다. 포드에는 컨테이너가 하나 이상 있어야합니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업보다 데이터를로드하거나 캐시를 워밍하는 데 오랜 시간이 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.containers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig": "포드의 DNS 매개 변수를 지정합니다. 여기에 지정된 매개 변수는 DNSPolicy를 기반으로 생성 된 DNS 구성에 병합됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.nameservers": "DNS 이름 서버 IP 주소 목록입니다. 이는 DNSPolicy에서 생성 된 기본 네임 서버에 추가됩니다. 중복 된 네임 서버는 제거됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options": "DNS 확인자 옵션 목록입니다. 이것은 DNSPolicy에서 생성 된 기본 옵션과 병합됩니다. 중복 된 항목은 제거됩니다. 옵션에 제공된 해결 옵션은 기본 DNSPolicy에 표시되는 옵션보다 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options.items": "PodDNSConfigOption은 포드의 DNS 확인자 옵션을 정의합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options.items.properties.name": "필수입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.searches": "호스트 이름 조회를위한 DNS 검색 도메인 목록입니다. 이는 DNSPolicy에서 생성 된 기본 검색 경로에 추가됩니다. 중복 된 검색 경로는 제거됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.dnsPolicy": "포드에 대한 DNS 정책을 설정합니다. 기본값은 &quot;ClusterFirst&quot;입니다. 유효한 값은 &#39;ClusterFirstWithHostNet&#39;, &#39;ClusterFirst&#39;, &#39;Default&#39;또는 &#39;None&#39;입니다. DNSConfig에 제공된 DNS 매개 변수는 DNSPolicy로 선택한 정책과 병합됩니다. hostNetwork와 함께 DNS 옵션을 설정하려면 DNS 정책을 명시 적으로 &#39;ClusterFirstWithHostNet&#39;으로 지정해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.enableServiceLinks": "EnableServiceLinks는 서비스에 대한 정보를 Docker 링크의 구문과 일치하는 포드의 환경 변수에 삽입해야하는지 여부를 나타냅니다. 선택 사항 : 기본값은 true입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers": "이 포드에서 실행되는 임시 컨테이너 목록입니다. 임시 컨테이너는 디버깅과 같은 사용자 시작 작업을 수행하기 위해 기존 포드에서 실행될 수 있습니다. 이 목록은 포드를 만들 때 지정할 수 없으며 포드 사양을 업데이트하여 수정할 수 없습니다. 기존 포드에 임시 컨테이너를 추가하려면 포드의 ephemeralcontainers 하위 리소스를 사용합니다. 이 필드는 알파 수준이며 EphemeralContainers 기능을 활성화하는 서버에서만 적용됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items": "EphemeralContainer는 디버깅과 같이 사용자가 시작한 활동을 위해 기존 포드에 임시로 추가 할 수있는 컨테이너입니다. 임시 컨테이너에는 리소스 또는 예약 보장이 없으며 종료시 또는 포드가 제거되거나 다시 시작될 때 다시 시작되지 않습니다. 임시 컨테이너로 인해 포드가 리소스 할당을 초과하는 경우 포드가 제거 될 수 있습니다. 포드 사양을 직접 업데이트하여 임시 컨테이너를 추가 할 수 없습니다. 포드의 ephemeralcontainers 하위 리소스를 통해 추가해야하며 추가되면 포드 사양에 나타납니다. 이것은 EphemeralContainers 기능 플래그로 활성화 된 알파 기능입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle": "임시 컨테이너에는 수명주기가 허용되지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.name": "DNS_LABEL로 지정된 임시 컨테이너의 이름입니다. 이 이름은 모든 컨테이너, 초기화 컨테이너 및 임시 컨테이너간에 고유해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports": "임시 컨테이너에는 포트가 허용되지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources": "임시 컨테이너에는 리소스가 허용되지 않습니다. 임시 컨테이너는 포드에 이미 할당 된 예비 리소스를 사용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext": "임시 컨테이너에는 SecurityContext가 허용되지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.targetContainerName": "설정된 경우이 임시 컨테이너가 대상으로하는 PodSpec의 컨테이너 이름입니다. 임시 컨테이너는이 컨테이너의 네임 스페이스 (IPC, PID 등)에서 실행됩니다. 설정되지 않은 경우 팟 (Pod)에 대해 공유되는 네임 스페이스에서 임시 컨테이너가 실행됩니다. 컨테이너 런타임은이 기능을 지원해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.hostAliases": "HostAliases는 지정된 경우 포드의 호스트 파일에 삽입 될 호스트 및 IP의 선택적 목록입니다. 이는 hostNetwork가 아닌 포드에만 유효합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.hostAliases.items": "HostAlias는 포드의 호스트 파일에 항목으로 삽입 될 IP와 호스트 이름 간의 매핑을 보유합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.hostAliases.items.properties.hostnames": "위 IP 주소의 호스트 이름입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.hostAliases.items.properties.ip": "호스트 파일 항목의 IP 주소입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.hostIPC": "호스트의 ipc 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.hostNetwork": "이 포드에 대해 요청 된 호스트 네트워킹입니다. 호스트의 네트워크 네임 스페이스를 사용합니다. 이 옵션을 설정하면 사용할 포트를 지정해야합니다. 기본값은 false입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.hostPID": "호스트의 pid 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.hostname": "포드의 호스트 이름을 지정합니다. 지정하지 않으면 포드의 호스트 이름이 시스템 정의 값으로 설정됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.imagePullSecrets": "ImagePullSecrets는이 PodSpec에서 사용하는 이미지를 가져 오는 데 사용할 동일한 네임 스페이스의 보안 비밀에 대한 선택적 참조 목록입니다. 지정된 경우 이러한 비밀은 사용할 개별 풀러 구현에 전달됩니다. 예를 들어 docker의 경우 DockerConfig 유형 비밀 만 적용됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.imagePullSecrets.items": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.imagePullSecrets.items.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers": "포드에 속한 초기화 컨테이너 목록입니다. Init 컨테이너는 컨테이너가 시작되기 전에 순서대로 실행됩니다. 초기화 컨테이너가 실패하면 포드는 실패한 것으로 간주되며 restartPolicy에 따라 처리됩니다. 초기화 컨테이너 또는 일반 컨테이너의 이름은 모든 컨테이너에서 고유해야합니다. Init 컨테이너에는 수명주기 작업, 준비 상태 프로브, 활성 상태 프로브 또는 시작 프로브가 없을 수 있습니다. init 컨테이너의 resourceRequirements는 각 리소스 유형에 대해 가장 높은 요청 / 한계를 찾은 다음 해당 값의 최대 값 또는 일반 컨테이너의 합계를 사용하여 스케줄링 중에 고려됩니다. 제한은 비슷한 방식으로 초기화 컨테이너에 적용됩니다. Init 컨테이너는 현재 추가하거나 제거 할 수 없습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "포드의 필드 선택 : supports metadata.name, metadata.namespace,`metadata.labels [ &#39;<KEY> &#39;]`,`metadata.annotations [&#39;<KEY> &#39;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에 의해 정의 된 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스킹 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile": "이 컨테이너에서 사용할 seccomp 옵션입니다. seccomp 옵션이 포드 및 컨테이너 수준 모두에서 제공되는 경우 컨테이너 옵션이 포드 옵션을 재정의합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업보다 데이터를로드하거나 캐시를 워밍하는 데 오랜 시간이 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 기존의 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 이미지에 구성 될 수있는 컨테이너 런타임의 기본값이 사용됩니다. 업데이트 할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.nodeName": "NodeName은이 포드를 특정 노드에 예약하기위한 요청입니다. 비어 있지 않은 경우 스케줄러는 리소스 요구 사항에 적합하다고 가정하여이 포드를 해당 노드에 예약합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.nodeSelector": "NodeSelector는 포드가 노드에 맞도록 true 여야하는 선택기입니다. 포드가 해당 노드에서 예약되도록하려면 노드의 라벨과 일치해야하는 선택기입니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.overhead": "오버 헤드는 주어진 RuntimeClass에 대한 포드 실행과 관련된 리소스 오버 헤드를 나타냅니다. 이 필드는 RuntimeClass 승인 컨트롤러에 의해 승인 시간에 자동으로 채워집니다. RuntimeClass 승인 컨트롤러가 사용 설정된 경우 Pod 생성 요청에 오버 헤드를 설정하면 안됩니다. RuntimeClass 승인 컨트롤러는 오버 헤드가 이미 설정된 포드 생성 요청을 거부합니다. RuntimeClass가 PodSpec에서 구성되고 선택되면 오버 헤드는 해당 RuntimeClass에 정의 된 값으로 설정됩니다. 그렇지 않으면 설정되지 않은 상태로 유지되고 0으로 처리됩니다. 추가 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/688-pod-overhead/README.md이 필드는 Kubernetes v1.16부터 알파 수준이며 PodOverhead 기능을 활성화하는 서버에서 인정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.preemptionPolicy": "PreemptionPolicy는 우선 순위가 낮은 포드를 선점하기위한 정책입니다. Never 중 하나, PreemptLowerPriority. 설정되지 않은 경우 기본값은 PreemptLowerPriority입니다. 이 필드는 베타 수준이며 NonPreemptingPriority 기능 게이트에 의해 제어됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.priority": "우선 순위 값입니다. 다양한 시스템 구성 요소가이 필드를 사용하여 포드의 우선 순위를 찾습니다. Priority Admission Controller가 활성화되면 사용자가이 필드를 설정할 수 없습니다. 승인 컨트롤러는 PriorityClassName에서이 필드를 채 웁니다. 값이 높을수록 우선 순위가 높아집니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.priorityClassName": "지정된 경우 포드의 우선 순위를 나타냅니다. &quot;system-node-critical&quot;및 &quot;system-cluster-critical&quot;은 가장 높은 우선 순위를 나타내는 두 개의 특수 키워드이며 전자가 가장 높은 우선 순위입니다. 다른 이름은 해당 이름으로 PriorityClass 개체를 만들어 정의해야합니다. 지정되지 않은 경우 포드 우선 순위는 기본값이되거나 기본값이없는 경우 0이됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.readinessGates": "지정된 경우 모든 준비 게이트에서 포드 준비 상태를 평가합니다. 모든 컨테이너가 준비되고 준비 게이트에 지정된 모든 조건의 상태가 &quot;True&quot;이면 포드가 준비된 것입니다. 자세한 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/ 580-pod-readiness-gates / README.md",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.readinessGates.items": "PodReadinessGate에는 포드 조건에 대한 참조가 포함됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.readinessGates.items.properties.conditionType": "ConditionType은 유형이 일치하는 pod의 조건 목록에있는 조건을 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.restartPolicy": "포드 내의 모든 컨테이너에 대한 정책을 다시 시작합니다. Always, OnFailure, Never 중 하나입니다. 기본값은 항상입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.runtimeClassName": "RuntimeClassName은 node.k8s.io 그룹의 RuntimeClass 객체를 참조하며이 pod를 실행하는 데 사용해야합니다. RuntimeClass 리소스가 명명 된 클래스와 일치하지 않으면 포드가 실행되지 않습니다. 설정되지 않거나 비어있는 경우 기본 런타임 핸들러를 사용하는 비어있는 정의가있는 암시 적 클래스 인 &quot;레거시&quot;RuntimeClass가 사용됩니다. 추가 정보 : https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/585-runtime-class/README.md 이것은 Kubernetes v1.14의 베타 기능입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.schedulerName": "지정된 경우 지정된 스케줄러가 포드를 발송합니다. 지정하지 않으면 포드가 기본 스케줄러에 의해 발송됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext": "SecurityContext는 포드 수준 보안 속성 및 공통 컨테이너 설정을 보유합니다. 옵션 : 기본값은 비어 있습니다. 각 필드의 기본값은 유형 설명을 참조하십시오.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.fsGroup": "포드의 모든 컨테이너에 적용되는 특수 보조 그룹입니다. 일부 볼륨 유형을 사용하면 Kubelet이 포드가 소유 할 해당 볼륨의 소유권을 변경할 수 있습니다. 1. 소유 GID는 FSGroup이됩니다. 2. setgid 비트가 설정됩니다 (볼륨에 생성 된 새 파일은 FSGroup이 소유 함) 3 권한 비트는 rw-rw ----와 OR로 연결됩니다. 설정되지 않은 경우 Kubelet은 볼륨의 소유권 및 권한을 수정하지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.fsGroupChangePolicy": "fsGroupChangePolicy는 Pod 내부에 노출되기 전에 볼륨의 소유권 및 권한을 변경하는 동작을 정의합니다. 이 필드는 fsGroup 기반 소유권 (및 권한)을 지원하는 볼륨 유형에만 적용됩니다. secret, configmaps 및 emptydir과 같은 임시 볼륨 유형에는 영향을 미치지 않습니다. 유효한 값은 &quot;OnRootMismatch&quot;및 &quot;Always&quot;입니다. 지정하지 않으면 기본값은 &quot;항상&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. 참이면 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너를 시작하지 못하도록합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions": "모든 컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile": "이 포드의 컨테이너에서 사용할 seccomp 옵션입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile.properties.localhostProfile": "localhostProfile은 노드의 파일에 정의 된 프로필을 사용해야 함을 나타냅니다. 프로파일이 작동하려면 노드에서 사전 구성되어야합니다. kubelet의 구성된 seccomp 프로필 위치에 상대적인 내림차순 경로 여야합니다. 유형이 &quot;Localhost&quot;인 경우에만 설정해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seccompProfile.properties.type": "type은 적용될 seccomp 프로파일의 종류를 나타냅니다. 유효한 옵션은 다음과 같습니다. Localhost-노드의 파일에 정의 된 프로필을 사용해야합니다. RuntimeDefault-컨테이너 런타임 기본 프로필을 사용해야합니다. Unconfined-프로파일을 적용하지 않아야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.supplementalGroups": "컨테이너의 기본 GID와 함께 각 컨테이너에서 실행되는 첫 번째 프로세스에 적용된 그룹 목록입니다. 지정하지 않으면 컨테이너에 그룹이 추가되지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls": "Sysctls에는 포드에 사용되는 네임 스페이스가 지정된 sysctls 목록이 있습니다. 컨테이너 런타임에 의해 지원되지 않는 sysctls가있는 포드가 시작되지 않을 수 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items": "Sysctl은 설정할 커널 매개 변수를 정의합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items.properties.name": "설정할 속성의 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items.properties.value": "설정할 속성 값",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 컨테이너의 SecurityContext 내의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.serviceAccountName": "ServiceAccountName은이 포드를 실행하는 데 사용할 ServiceAccount의 이름입니다. 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.setHostnameAsFQDN": "true이면 포드의 호스트 이름이 리프 이름 (기본값)이 아닌 포드의 FQDN으로 구성됩니다. Linux 컨테이너에서 이는 커널의 hostname 필드 (struct utsname의 nodename 필드)에 FQDN을 설정하는 것을 의미합니다. Windows 컨테이너에서 이는 레지스트리 키 HKEY_LOCAL_MACHINE \\ SYSTEM \\ CurrentControlSet \\ Services \\ Tcpip \\ Parameters에 대한 호스트 이름의 레지스트리 값을 FQDN으로 설정하는 것을 의미합니다. 포드에 FQDN이 없으면 아무 효과가 없습니다. 기본값은 false입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.shareProcessNamespace": "pod의 모든 컨테이너간에 단일 프로세스 네임 스페이스를 공유합니다. 이것이 설정되면 컨테이너는 동일한 포드의 다른 컨테이너에서 프로세스를보고 신호를 보낼 수 있으며 각 컨테이너의 첫 번째 프로세스에는 PID 1이 할당되지 않습니다. HostPID와 ShareProcessNamespace를 둘 다 설정할 수는 없습니다. 선택 사항 : 기본값은 false입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.subdomain": "지정된 경우 정규화 된 포드 호스트 이름은 &quot;<hostname> .<subdomain> .<pod namespace> .svc.<cluster domain> &quot;. 지정하지 않으면 포드에 도메인 이름이 전혀 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.terminationGracePeriodSeconds": "포드가 정상적으로 종료되어야하는 선택적 기간 (초)입니다. 삭제 요청시 감소 될 수 있습니다. 값은 음이 아닌 정수 여야합니다. 값 0은 즉시 삭제를 나타냅니다. 이 값이 nil이면 기본 유예 기간이 대신 사용됩니다. 유예 기간은 포드에서 실행중인 프로세스가 종료 신호를 보낸 후의 기간 (초)과 프로세스가 강제 종료 신호로 중단되는 시간입니다. 이 값을 프로세스의 예상 정리 시간보다 길게 설정하십시오. 기본값은 30 초입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.tolerations": "지정된 경우 포드의 허용 오차입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items": "이 Toleration이 연결된 포드는 트리플과 일치하는 모든 오염을 견뎌냅니다.<key,value,effect> 일치 연산자 사용<operator> .",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.effect": "효과는 일치시킬 오염 효과를 나타냅니다. 비어 있음은 모든 오염 효과와 일치 함을 의미합니다. 지정된 경우 허용되는 값은 NoSchedule, PreferNoSchedule 및 NoExecute입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.key": "키는 관용이 적용되는 오염 키입니다. 비어 있음은 모든 오염 키와 일치 함을 의미합니다. 키가 비어 있으면 연산자가 존재해야합니다. 이 조합은 모든 값과 모든 키와 일치 함을 의미합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.operator": "연산자는 값에 대한 키의 관계를 나타냅니다. 유효한 연산자는 Exists 및 Equal입니다. 기본값은 Equal입니다. Exists는 값에 대한 와일드 카드와 동일하므로 포드가 특정 카테고리의 모든 taint를 허용 할 수 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.tolerationSeconds": "TolerationSeconds는 허용 범위 (NoExecute가 유효해야하며 그렇지 않으면이 필드는 무시 됨)가 taint를 허용하는 기간을 나타냅니다. 기본적으로 설정되어 있지 않으므로 오염을 영원히 견딜 수 있습니다 (제거하지 마십시오). 0 및 음수 값은 시스템에서 0 (즉시 제거)으로 처리됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.value": "Value는 허용치가 일치하는 오염 값입니다. 연산자가 Exists이면 값은 비어 있어야하고 그렇지 않으면 일반 문자열이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints": "TopologySpreadConstraints는 pod 그룹이 토폴로지 도메인에 어떻게 분산되어야하는지 설명합니다. 스케줄러는 제약 조건을 준수하는 방식으로 포드를 예약합니다. 모든 topologySpreadConstraint는 AND 처리됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items": "TopologySpreadConstraint는 지정된 토폴로지간에 일치하는 포드를 분산하는 방법을 지정합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector": "LabelSelector는 일치하는 포드를 찾는 데 사용됩니다. 이 라벨 선택기와 일치하는 포드는 해당 토폴로지 도메인의 포드 수를 결정하기 위해 계산됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.maxSkew": "MaxSkew는 포드가 고르지 않게 분산 될 수있는 정도를 설명합니다. `whenUnsatisfiable = DoNotSchedule` 인 경우 대상 토폴로지에서 일치하는 포드 수와 전역 최소값간에 허용되는 최대 차이입니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 1/1/0으로 확산되는 포드 : | zone1 | zone2 | zone3 | | P | P | | -MaxSkew가 1이면 들어오는 포드는 zone3에 1/1/1이되도록 예약 할 수 있습니다. zone1 (zone2)로 예약하면 zone1 (zone2)의 ActualSkew (2-0)가 MaxSkew (1)을 위반하게됩니다. -MaxSkew가 2이면 들어오는 포드를 모든 영역에 예약 할 수 있습니다. `whenUnsatisfiable = ScheduleAnyway` 인 경우이를 충족하는 토폴로지에 더 높은 우선 순위를 부여하는 데 사용됩니다. 필수 필드입니다. 기본값은 1이고 0은 허용되지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.topologyKey": "TopologyKey는 노드 레이블의 키입니다. 이 키와 동일한 값이있는 레이블이있는 노드는 동일한 토폴로지에있는 것으로 간주됩니다. 우리는 각각을 고려합니다<key, value> &quot;버킷&quot;으로 각 버킷에 균형 잡힌 수의 포드를 넣으십시오. 필수 필드입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.whenUnsatisfiable": "WhenUnsatisfiable은 스프레드 제약 조건을 충족하지 않는 경우 포드를 처리하는 방법을 나타냅니다. -DoNotSchedule (기본값)은 스케줄러가 스케줄하지 않도록 지시합니다. -ScheduleAnyway는 스케줄러에게 임의의 위치에서 포드를 예약하도록 지시하지만, 왜곡을 줄이는 데 도움이되는 토폴로지에 더 높은 우선 순위를 부여합니다. 해당 포드에 대해 가능한 모든 노드 할당이 일부 토폴로지에서 &quot;MaxSkew&quot;를 위반하는 경우에만 수신 포드에 대한 제약 조건이 &quot;불만족&quot;으로 간주됩니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 3/1/1로 확산되는 포드 : | zone1 | zone2 | zone3 | | PPP | P | P | WhenUnsatisfiable이 DoNotSchedule로 설정된 경우 들어오는 pod는 zone2 (zone3)의 ActualSkew (2-1)가 MaxSkew (1)를 충족하므로 zone2 (zone3) 만 3/2/1 (3/1/2)가되도록 예약 할 수 있습니다. 즉, 클러스터는 여전히 불균형 상태 일 수 있지만 스케줄러는 * 더 * 불균형 상태로 만들지 않습니다. 필수 필드입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes": "포드에 속한 컨테이너로 마운트 할 수있는 볼륨 목록입니다. 자세한 정보 : https://kubernetes.io/docs/concepts/storage/volumes",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items": "볼륨은 포드의 모든 컨테이너에서 액세스 할 수있는 포드의 명명 된 볼륨을 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore": "AWSElasticBlockStore는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 AWS 디스크 리소스를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다).",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.readOnly": "VolumeMounts의 ReadOnly 속성을 &quot;true&quot;로 강제 설정하려면 &quot;true&quot;를 지정합니다. 생략하면 기본값은 &quot;false&quot;입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.volumeID": "AWS에있는 영구 디스크 리소스의 고유 ID (Amazon EBS 볼륨). 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk": "AzureDisk는 호스트의 Azure 데이터 디스크 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.cachingMode": "호스트 캐싱 모드 : 없음, 읽기 전용, 읽기 쓰기.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskName": "Blob 저장소에있는 데이터 디스크의 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskURI": "Blob 저장소의 데이터 디스크 URI",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.kind": "예상 값 공유 : 스토리지 계정 당 여러 Blob 디스크 전용 : 스토리지 계정 당 단일 Blob 디스크 관리 : Azure 관리 데이터 디스크 (관리되는 가용성 집합에서만). 기본적으로 공유 됨",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile": "AzureFile은 호스트의 Azure 파일 서비스 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.secretName": "Azure Storage 계정 이름 및 키가 포함 된 비밀의 이름",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.shareName": "이름 공유",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs": "CephFS는 포드의 수명을 공유하는 호스트의 Ceph FS 마운트를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.monitors": "필수 : Monitors는 Ceph 모니터 모음입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.path": "선택 사항 : 전체 Ceph 트리가 아닌 마운트 된 루트로 사용되며 기본값은 /입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretFile": "선택 사항 : SecretFile은 사용자의 키 링 경로이며 기본값은 /etc/ceph/user.secret입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.user": "선택 사항 : 사용자는 rados 사용자 이름, 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder": "Cinder는 kubelets 호스트 머신에 연결되고 마운트 된 cinder 볼륨을 나타냅니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.volumeID": "cinder에서 볼륨을 식별하는 데 사용되는 볼륨 ID입니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap": "ConfigMap은이 볼륨을 채워야하는 configMap을 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi": "CSI (Container Storage Interface)는 특정 외부 CSI 드라이버 (베타 기능)에서 처리하는 임시 저장소를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.driver": "Driver는이 볼륨을 처리하는 CSI 드라이버의 이름입니다. 클러스터에 등록 된 올바른 이름은 관리자에게 문의하십시오.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.fsType": "마운트 할 파일 시스템 유형입니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 제공되지 않으면 적용 할 기본 파일 시스템을 결정하는 관련 CSI 드라이버에 빈 값이 전달됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.volumeAttributes": "VolumeAttributes는 CSI 드라이버에 전달되는 드라이버 별 속성을 저장합니다. 지원되는 값은 드라이버 설명서를 참조하십시오.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI": "DownwardAPI는이 볼륨을 채워야하는 포드에 대한 하향 API를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 사용할 모드 비트. 선택 사항이어야합니다. 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items": "항목은 하향 API 볼륨 파일 목록입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트는 0000과 0777 사이의 8 진수 값이거나 0과 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir": "EmptyDir는 포드의 수명을 공유하는 임시 디렉터리를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir.properties.medium": "이 디렉토리를 백업해야하는 저장 매체 유형입니다. 기본값은 노드의 기본 매체를 사용함을 의미하는 &quot;&quot;입니다. 빈 문자열 (기본값) 또는 메모리 여야합니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir.properties.sizeLimit": "이 EmptyDir 볼륨에 필요한 총 로컬 스토리지 양입니다. 크기 제한은 메모리 매체에도 적용됩니다. 메모리 매체 EmptyDir의 최대 사용량은 여기에 지정된 SizeLimit와 포드에있는 모든 컨테이너의 메모리 제한 합계 사이의 최소값입니다. 기본값은 제한이 정의되지 않았 음을 의미하는 nil입니다. 추가 정보 : http://kubernetes.io/docs/user-guide/volumes#emptydir",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral": "Ephemeral은 클러스터 스토리지 드라이버 (알파 기능)에서 처리하는 볼륨을 나타냅니다. 볼륨의 수명주기는 볼륨을 정의하는 포드에 연결되어 있습니다. 볼륨은 포드가 시작되기 전에 생성되고 포드가 제거되면 삭제됩니다. a) 포드가 실행되는 동안에 만 볼륨이 필요한 경우, b) 스냅 샷에서 복원 또는 용량 추적과 같은 일반 볼륨의 기능이 필요한 경우, c) 스토리지 클래스를 통해 스토리지 드라이버가 지정된 경우, d) 스토리지 드라이버 PersistentVolumeClaim을 통한 동적 볼륨 프로비저닝을 지원합니다 (이 볼륨 유형과 PersistentVolumeClaim 간의 연결에 대한 자세한 내용은 EphemeralVolumeSource 참조). 개별 포드의 수명주기보다 오래 지속되는 볼륨에 대해 PersistentVolumeClaim 또는 공급 업체별 API 중 하나를 사용합니다. CSI 드라이버가 그런 방식으로 사용되는 경우 경량 로컬 임시 볼륨에 CSI를 사용하십시오. 자세한 내용은 드라이버 설명서를 참조하십시오. 포드는 두 유형의 임시 볼륨과 영구 볼륨을 동시에 사용할 수 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate": "볼륨을 프로비저닝하기 위해 독립형 PVC를 작성하는 데 사용됩니다. 이 EphemeralVolumeSource가 포함 된 포드가 PVC의 소유자가됩니다. 즉, PVC가 포드와 함께 삭제됩니다. PVC의 이름은`<pod name> -<volume name> `여기서`<volume name> `는`PodSpec.Volumes` 배열 항목의 이름입니다. 연결된 이름이 PVC에 유효하지 않은 경우 (예 : 너무 긴 경우) 포드 유효성 검사는 포드를 거부합니다. 팟 (Pod)이 소유하지 않은 이름을 가진 기존 PVC는 실수로 관련없는 볼륨을 사용하지 않도록 팟 (Pod)에 사용되지 * 않습니다 *. 그런 다음 관련없는 PVC가 제거 될 때까지 포드 시작이 차단됩니다. 이러한 사전 생성 된 PVC를 포드에서 사용하려는 경우 포드가 존재하면 PVC를 포드에 대한 소유자 참조로 업데이트해야합니다. 일반적으로이 작업은 필요하지 않지만 손상된 클러스터를 수동으로 재구성 할 때 유용 할 수 있습니다. 이 필드는 읽기 전용이며 생성 된 후에는 Kubernetes에서 PVC를 변경하지 않습니다. 필수 항목이며 nil이 아니어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata": "PVC를 만들 때 PVC에 복사 할 레이블 및 주석을 포함 할 수 있습니다. 다른 필드는 허용되지 않으며 유효성 검사 중에 거부됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 순서에 관계없이 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간 내에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 &quot;FieldsV1&quot;유형에 설명 된대로 첫 번째 JSON 버전 형식을 보유합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.managedFields.items.properties.time": "시간은 이러한 필드가 설정된 시간의 타임 스탬프입니다. 작업이 &#39;적용&#39;이면 항상 비어 있어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱 등성 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.namespace": "네임 스페이스는 각 이름이 고유해야하는 공간을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec": "PersistentVolumeClaim의 사양입니다. 전체 콘텐츠는이 템플릿에서 생성 된 PVC에 변경되지 않고 복사됩니다. PersistentVolumeClaim에서와 동일한 필드가 여기에서도 유효합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.accessModes": "AccessModes에는 볼륨에 필요한 액세스 모드가 포함되어 있습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource": "이 필드는 다음 중 하나를 지정하는 데 사용할 수 있습니다. * 기존 VolumeSnapshot 객체 (snapshot.storage.k8s.io/VolumeSnapshot-베타) * 기존 PVC (PersistentVolumeClaim) * 데이터 채우기 (알파)를 순서대로 구현하는 기존 사용자 지정 리소스 / 객체 VolumeSnapshot 개체 유형을 사용하려면 적절한 기능 게이트를 활성화해야합니다 (VolumeSnapshotDataSource 또는 AnyVolumeDataSource) 프로비저닝 도구 또는 외부 컨트롤러가 지정된 데이터 소스를 지원할 수있는 경우 지정된 데이터 소스의 내용을 기반으로 새 볼륨을 생성합니다. 지정된 데이터 소스가 지원되지 않는 경우 볼륨이 생성되지 않고 오류가 이벤트로보고됩니다. 앞으로 더 많은 데이터 소스 유형을 지원할 계획이며 제공자의 동작이 변경 될 수 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.apiGroup": "APIGroup은 참조되는 리소스에 대한 그룹입니다. APIGroup이 지정되지 않은 경우 지정된 종류가 코어 API 그룹에 있어야합니다. 다른 타사 유형의 경우 APIGroup이 필요합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.kind": "Kind는 참조되는 리소스 유형입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.name": "이름은 참조되는 리소스의 이름입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources": "리소스는 볼륨에 있어야하는 최소 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector": "바인딩을 고려할 볼륨에 대한 레이블 쿼리입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.storageClassName": "클레임에 필요한 StorageClass의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.volumeMode": "volumeMode는 클레임에 필요한 볼륨 유형을 정의합니다. 클레임 사양에 포함되지 않은 경우 파일 시스템의 가치가 암시됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.ephemeral.properties.volumeClaimTemplate.properties.spec.properties.volumeName": "VolumeName은이 클레임을 뒷받침하는 PersistentVolume에 대한 바인딩 참조입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc": "FC는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 파이버 채널 리소스를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.lun": "선택 사항 : FC 대상 LUN 번호",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.targetWWNs": "선택 사항 : FC 대상 월드 와이드 이름 (WWN)",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.wwids": "선택 사항 : FC 볼륨 월드 와이드 식별자 (wwids) wwids 또는 targetWWN과 lun의 조합을 설정해야하지만 둘 다 동시에 설정할 수는 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume": "FlexVolume은 exec 기반 플러그인을 사용하여 프로비저닝 / 연결된 일반 볼륨 리소스를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.driver": "Driver는이 볼륨에 사용할 드라이버의 이름입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본 파일 시스템은 FlexVolume 스크립트에 따라 다릅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.options": "옵션 : 추가 명령 옵션 (있는 경우).",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker": "Flocker는 kubelet의 호스트 머신에 연결된 Flocker 볼륨을 나타냅니다. 이것은 실행중인 Flocker 제어 서비스에 따라 다릅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker.properties.datasetName": "메타 데이터로 저장된 데이터 세트의 이름-&gt; Flocker 용 데이터 세트의 이름은 더 이상 사용되지 않는 것으로 간주되어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker.properties.datasetUUID": "데이터 세트의 UUID입니다. 이것은 Flocker 데이터 세트의 고유 식별자입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk": "GCEPersistentDisk는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 GCE 디스크 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다). 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.pdName": "GCE에있는 PD 리소스의 고유 이름입니다. GCE에서 디스크를 식별하는 데 사용됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo": "GitRepo는 특정 개정판의 git 저장소를 나타냅니다. DEPRECATED : GitRepo는 더 이상 사용되지 않습니다. git 저장소로 컨테이너를 프로비저닝하려면 git을 사용하여 저장소를 복제하는 InitContainer에 EmptyDir을 마운트 한 다음 Pod의 컨테이너에 EmptyDir을 마운트합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.directory": "대상 디렉토리 이름. &#39;..&#39;을 포함하거나 시작하지 않아야합니다. 만약 &#39;.&#39; 제공되면 볼륨 디렉토리는 git 저장소가됩니다. 그렇지 않으면 지정된 경우 볼륨은 지정된 이름의 하위 디렉토리에 git 저장소를 포함합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.repository": "저장소 URL",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.revision": "지정된 개정에 대한 커밋 해시입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs": "Glusterfs는 포드의 수명을 공유하는 호스트의 Glusterfs 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.endpoints": "EndpointsName은 Glusterfs 토폴로지를 자세히 설명하는 엔드 포인트 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.path": "Path는 Glusterfs 볼륨 경로입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.readOnly": "여기서 ReadOnly는 Glusterfs 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath": "HostPath는 컨테이너에 직접 노출되는 호스트 시스템의 기존 파일 또는 디렉터리를 나타냅니다. 이것은 일반적으로 호스트 시스템을 볼 수있는 시스템 에이전트 또는 기타 권한있는 항목에 사용됩니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath.properties.path": "호스트의 디렉토리 경로입니다. 경로가 심볼릭 링크이면 실제 경로에 대한 링크를 따릅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath.properties.type": "HostPath 볼륨의 유형 기본값은 &quot;&quot;입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi": "ISCSI는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 ISCSI 디스크 리소스를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/iscsi/README.md",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthDiscovery": "iSCSI 검색 CHAP 인증 지원 여부",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthSession": "iSCSI 세션 CHAP 인증 지원 여부",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.initiatorName": "사용자 지정 iSCSI 이니시에이터 이름. initiatorName이 iscsiInterface와 동시에 지정되면 새로운 iSCSI 인터페이스<target portal> :<volume name> 연결을 위해 생성됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.iqn": "대상 iSCSI 정규화 이름.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.iscsiInterface": "iSCSI 전송을 사용하는 iSCSI 인터페이스 이름입니다. 기본값은 &#39;default&#39;(tcp)입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.lun": "iSCSI 대상 LUN 번호.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.portals": "iSCSI 대상 포털 목록. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.targetPortal": "iSCSI 대상 포털. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.name": "볼륨의 이름. DNS_LABEL이어야하며 포드 내에서 고유해야합니다. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs": "NFS는 포드의 수명을 공유하는 호스트의 NFS 마운트를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.path": "NFS 서버에서 내 보낸 경로입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.readOnly": "여기서 ReadOnly는 읽기 전용 권한으로 NFS 내보내기를 강제로 마운트합니다. 기본값은 false입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.server": "Server는 NFS 서버의 호스트 이름 또는 IP 주소입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim": "PersistentVolumeClaimVolumeSource는 동일한 네임 스페이스에있는 PersistentVolumeClaim에 대한 참조를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.claimName": "ClaimName은이 볼륨을 사용하는 pod와 동일한 네임 스페이스에있는 PersistentVolumeClaim의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.readOnly": "VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk": "PhotonPersistentDisk는 kubelets 호스트 머신에 연결되고 마운트 된 PhotonController 영구 디스크를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.pdID": "Photon Controller 영구 디스크를 식별하는 ID",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume": "PortworxVolume은 kubelets 호스트 머신에 연결되고 마운트 된 portworx 볼륨을 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.fsType": "FSType은 마운트 할 파일 시스템 유형을 나타냅니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.volumeID": "VolumeID는 Portworx 볼륨을 고유하게 식별합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected": "하나의 리소스 비밀, 구성 맵 및 하향 API에 대한 항목",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.defaultMode": "기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources": "볼륨 예측 목록",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items": "지원되는 다른 볼륨 유형과 함께 투영 될 수있는 투영",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap": "프로젝트 할 configMap 데이터에 대한 정보",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI": "프로젝트 할 downwardAPI 데이터에 대한 정보",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items": "Items는 DownwardAPIVolume 파일 목록입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트는 0000과 0777 사이의 8 진수 값이거나 0과 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret": "프로젝트 할 비밀 데이터에 대한 정보",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken": "프로젝트 할 serviceAccountToken 데이터에 대한 정보",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.audience": "청중은 토큰의 의도 된 청중입니다. 토큰 수신자는 토큰 대상에 지정된 식별자로 자신을 식별해야하며 그렇지 않으면 토큰을 거부해야합니다. 대상은 기본적으로 apiserver의 식별자입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.expirationSeconds": "ExpirationSeconds는 서비스 계정 토큰의 요청 된 유효 기간입니다. 토큰이 만료에 가까워지면 kubelet 볼륨 플러그인이 사전에 서비스 계정 토큰을 교체합니다. 토큰이 수명의 80 % 이상이거나 토큰이 24 시간 이상인 경우 kubelet은 토큰 순환을 시작합니다. 기본값은 1 시간이며 최소 10 분이어야합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.path": "경로는 토큰을 투영 할 파일의 마운트 지점에 상대적인 경로입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte": "Quobyte는 포드의 수명을 공유하는 호스트의 Quobyte 마운트를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.group": "볼륨 액세스를 매핑 할 그룹 기본값은 그룹 없음입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.readOnly": "여기서 ReadOnly는 Quobyte 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.registry": "레지스트리는 볼륨의 중앙 레지스트리 역할을하는 호스트 : 포트 쌍 (여러 항목은 쉼표로 구분됨)으로 문자열로 지정된 단일 또는 다중 Quobyte Registry 서비스를 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.tenant": "백엔드에서 주어진 Quobyte 볼륨을 소유하는 테넌트는 동적으로 프로비저닝 된 Quobyte 볼륨과 함께 사용되며 값은 플러그인에 의해 설정됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.user": "볼륨 액세스를 기본값에 매핑하는 사용자를 serivceaccount 사용자에게",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.volume": "Volume은 이미 생성 된 Quobyte 볼륨을 이름으로 참조하는 문자열입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd": "RBD는 포드의 수명을 공유하는 호스트의 Rados 블록 장치 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#rbd",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.image": "라도 스 이미지 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.keyring": "키링은 RBDUser의 키링 경로입니다. 기본값은 / etc / ceph / keyring입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.monitors": "Ceph 모니터 모음. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.pool": "라도 스 풀 이름. 기본값은 rbd입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.user": "rados 사용자 이름입니다. 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO": "ScaleIO는 Kubernetes 노드에 연결되고 마운트 된 ScaleIO 영구 볼륨을 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본값은 &quot;xfs&quot;입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.gateway": "ScaleIO API 게이트웨이의 호스트 주소입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.protectionDomain": "구성된 스토리지에 대한 ScaleIO 보호 도메인의 이름입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.sslEnabled": "게이트웨이와의 SSL 통신을 활성화 / 비활성화하는 플래그, 기본값은 false",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.storageMode": "볼륨의 스토리지가 ThickProvisioned인지 ThinProvisioned인지 여부를 나타냅니다. 기본값은 ThinProvisioned입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.storagePool": "보호 도메인과 연결된 ScaleIO 스토리지 풀입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.system": "ScaleIO에 구성된 스토리지 시스템의 이름입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.volumeName": "이 볼륨 소스와 연결된 ScaleIO 시스템에 이미 생성 된 볼륨의 이름입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret": "Secret은이 볼륨을 채워야하는 비밀을 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 대한 권한을 설정하는 데 사용되는 모드 비트입니다. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 기본값은 0644입니다. 경로 내의 디렉터리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에 대한 권한을 설정하는 데 사용되는 모드 비트. 0000에서 0777 사이의 8 진수 값 또는 0에서 511 사이의 10 진수 값이어야합니다. YAML은 8 진수와 10 진수 값을 모두 허용하며 JSON에는 모드 비트에 10 진수 값이 필요합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.secretName": "사용할 팟 (Pod) 네임 스페이스의 시크릿 이름입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos": "StorageOS는 Kubernetes 노드에 연결되고 마운트 된 StorageOS 볼륨을 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.volumeName": "VolumeName은 사람이 읽을 수있는 StorageOS 볼륨의 이름입니다. 볼륨 이름은 네임 스페이스 내에서만 고유합니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.volumeNamespace": "VolumeNamespace는 StorageOS 내의 볼륨 범위를 지정합니다. 네임 스페이스를 지정하지 않으면 Pod의 네임 스페이스가 사용됩니다. 이를 통해보다 긴밀한 통합을 위해 Kubernetes 이름 범위를 StorageOS 내에서 미러링 할 수 있습니다. 기본 동작을 재정의하려면 VolumeName을 임의의 이름으로 설정합니다. StorageOS 내에서 네임 스페이스를 사용하지 않는 경우 &quot;default&quot;로 설정하십시오. StorageOS 내에 존재하지 않는 네임 스페이스가 생성됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume": "VsphereVolume은 kubelets 호스트 시스템에 연결되고 마운트 된 vSphere 볼륨을 나타냅니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyID": "StoragePolicyName과 연결된 SPBM (스토리지 정책 기반 관리) 프로필 ID입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyName": "SPBM (스토리지 정책 기반 관리) 프로필 이름입니다.",
    "%ReplicaSet.json.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.volumePath": "vSphere 볼륨 vmdk를 식별하는 경로",
    "%ReplicaSet.json.properties.status": "상태는 ReplicaSet의 가장 최근에 관찰 된 상태입니다. 이 데이터는 일정 기간에 의해 오래되었을 수 있습니다. 시스템에 의해 채워집니다. 읽기 전용. 더 많은 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
    "%ReplicaSet.json.properties.status.properties.availableReplicas": "이 복제본 세트에 대해 사용 가능한 복제본 수 (최소한 minReadySeconds 동안 준비 됨)입니다.",
    "%ReplicaSet.json.properties.status.properties.conditions": "복제본 세트의 현재 상태에 대한 최신 관찰을 나타냅니다.",
    "%ReplicaSet.json.properties.status.properties.conditions.items": "ReplicaSetCondition은 특정 지점에서 복제 세트의 상태를 설명합니다.",
    "%ReplicaSet.json.properties.status.properties.conditions.items.properties.lastTransitionTime": "조건이 한 상태에서 다른 상태로 마지막으로 전환 된 시간입니다.",
    "%ReplicaSet.json.properties.status.properties.conditions.items.properties.message": "전환에 대한 세부 정보를 나타내는 사람이 읽을 수있는 메시지입니다.",
    "%ReplicaSet.json.properties.status.properties.conditions.items.properties.reason": "조건의 마지막 전환 이유입니다.",
    "%ReplicaSet.json.properties.status.properties.conditions.items.properties.status": "조건의 상태는 True, False, Unknown 중 하나입니다.",
    "%ReplicaSet.json.properties.status.properties.conditions.items.properties.type": "복제 세트 조건의 유형입니다.",
    "%ReplicaSet.json.properties.status.properties.fullyLabeledReplicas": "복제 세트의 팟 (Pod) 템플릿 레이블과 일치하는 레이블이있는 팟 (Pod)의 수입니다.",
    "%ReplicaSet.json.properties.status.properties.observedGeneration": "ObservedGeneration은 가장 최근에 관찰 된 ReplicaSet의 생성을 반영합니다.",
    "%ReplicaSet.json.properties.status.properties.readyReplicas": "이 복제본 세트에 대한 준비된 복제본 수입니다.",
    "%ReplicaSet.json.properties.status.properties.replicas": "복제본은 가장 최근에 확인 된 복제본 수입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema": "승인은 승인 API의 스키마입니다.",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.spec": "ApprovalSpec은 원하는 승인 상태를 정의합니다.",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.integrationJob": "IntegrationJob은 관련 IntegrationJob 이름입니다 (승인의 조부모 일 수 있음).",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobName": "JobName은 IntegrationJob의 실제 작업 이름입니다.",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.link": "링크는 승인자가 참조 할 수있는 설명입니다.",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.message": "메시지는 요청자의 메시지입니다.",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.pipelineRun": "PipelineRun은이 승인을 생성 한 실제 파이프 라인 실행 개체를 가리 킵니다.",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podName": "PodName은 진행하도록 승인 할 포드의 이름을 나타냅니다. 사용되지 않음 : HyperCloud5에서는 사용되지 않으며 HyperCloud4와의 하위 호환성을 위해서만 사용됩니다.",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.sender": "보낸 사람이 요청자입니다 (아마도 풀 요청 작성자 또는 푸셔).",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.skipSendMail": "SkipSendMail은 승인자에게 요청 / 결과에 대한 메일을 보낼지 여부를 설명합니다.",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.users": "사용자는 승인을 요청한 사용자 목록입니다.",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.status": "ApprovalStatus는 관찰 된 승인 상태를 정의합니다.",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.approver": "승인자는 실제로 승인 한 사용자입니다.",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.conditions": "승인 조건",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.conditions.items": "조건은 물체의 상태에 대한 관찰을 나타냅니다. 조건은 관찰의 세부 사항이 사전에 알려지지 않았거나 주어진 종류의 모든 인스턴스에 적용되지 않을 때 사용하기위한 확장 메커니즘입니다. 사용자와 구성 요소가 다른 관찰에서 유추 할 필요가없는 속성을 명시 적으로 전달하려면 조건을 추가해야합니다. 일단 정의되면 Condition의 의미를 임의로 변경할 수 없습니다. 이는 API의 일부가되며 API의 다른 부분과 동일한 역방향 및 순방향 호환성 문제를 갖습니다.",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.conditions.items.properties.reason": "ConditionReason은 현재 상태의 원인 범주를 한 단어로 CamelCase로 표현하기위한 것입니다. 한 줄의 kubectl get 출력과 같은 간결한 출력 및 원인 발생 요약에 사용하기위한 것입니다.",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.conditions.items.properties.type": "ConditionType은 조건의 유형이며 일반적으로 CamelCased 단어 또는 짧은 구문입니다. 조건 유형은 &quot;비정상 참&quot;극성의 상태를 나타내야합니다. 예를 들어 조건이 정책이 유효하지 않은 경우를 나타내는 경우 &quot;유효 함&quot;케이스가 표준 일 수 있으므로 조건을 &quot;유효하지 않음&quot;이라고해야합니다.",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.decisionTime": "승인 결정 시간",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.reason": "결정 메시지",
    "%cicd.tmax.io_approvals.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.result": "승인 결정 결과",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema": "노트북은 노트북 API의 스키마입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않는 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec": "NotebookSpec은 원하는 노트북 상태를 정의합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template": "NotebookTemplateSpec은 노트북 템플릿의 사양을 정의합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec": "PodSpec은 포드에 대한 설명입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.activeDeadlineSeconds": "시스템이 실패로 표시하고 연관된 컨테이너를 강제 종료하기 전에 팟 (Pod)이 StartTime에 상대적으로 노드에서 활성화 될 수있는 선택적 기간 (초)입니다. 값은 양의 정수 여야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity": "지정된 경우 포드의 예약 제약",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity": "포드에 대한 노드 선호도 예약 규칙을 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 노드가 대응하는 matchExpressions와 일치하면 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "빈 선호 스케줄링 용어는 암시 적 가중치가 0 인 모든 개체와 일치합니다 (즉, 작동하지 않음). null 선호 스케줄링 용어는 객체와 일치하지 않습니다 (즉, 작동하지 않음).",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference": "해당 가중치와 관련된 노드 선택기 용어입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 nodeSelectorTerm 일치와 관련된 가중치입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms": "필수입니다. 노드 선택기 용어 목록입니다. 용어는 OR로 연결됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items": "null 또는 빈 노드 선택기 용어는 개체와 일치하지 않습니다. 이들의 요구 사항은 AND입니다. TopologySelectorTerm 유형은 NodeSelectorTerm의 하위 집합을 구현합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity": "포드 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 배치).",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 선호도 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 노드가 대응하는 podAffinityTerm과 일치하는 포드를 갖는 경우 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치되거나 (선호도) 배치되지 않아야합니다 (반 선호도). 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (반친 화성) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치되거나 (선호도) 배치되지 않아야합니다 (반 선호도). 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity": "포드 반 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 두지 않음).",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 반친 화성 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치의 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 반친 화성 표현식 등)을 충족하는 각 노드에 대해 다음 요소를 반복하여 합계를 계산합니다. 이 필드와 노드에 해당 podAffinityTerm과 일치하는 포드가있는 경우 합계에 &quot;weight&quot;를 추가합니다. 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치되거나 (선호도) 배치되지 않아야합니다 (반 선호도). 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 podAffinityTerm 일치와 관련된 가중치입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 반친 화성 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 반친 화성 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (반친 화성) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치되거나 (선호도) 배치되지 않아야합니다 (반 선호도). 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.automountServiceAccountToken": "AutomountServiceAccountToken은 서비스 계정 토큰을 자동으로 마운트해야하는지 여부를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers": "포드에 속한 컨테이너 목록입니다. 현재 컨테이너를 추가하거나 제거 할 수 없습니다. 포드에는 컨테이너가 하나 이상 있어야합니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "pod의 필드를 선택합니다. supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에서 정의한 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.add.items": "기능은 POSIX 기능 유형을 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.capabilities.properties.drop.items": "기능은 POSIX 기능 유형을 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스크 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. true 인 경우 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너 시작에 실패하는지 확인합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업 중보 다 데이터를로드하거나 캐시를 워밍하는 데 시간이 오래 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방법과 그 반대의 방법을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.containers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 런타임의 기본값이 사용되며 이는 컨테이너 이미지에서 구성 될 수 있습니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.dnsConfig": "포드의 DNS 매개 변수를 지정합니다. 여기에 지정된 매개 변수는 DNSPolicy를 기반으로 생성 된 DNS 구성에 병합됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.nameservers": "DNS 이름 서버 IP 주소 목록입니다. 이는 DNSPolicy에서 생성 된 기본 네임 서버에 추가됩니다. 중복 된 네임 서버는 제거됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options": "DNS 확인자 옵션 목록입니다. 이것은 DNSPolicy에서 생성 된 기본 옵션과 병합됩니다. 중복 된 항목은 제거됩니다. 옵션에 제공된 해결 옵션은 기본 DNSPolicy에 표시되는 옵션보다 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options.items": "PodDNSConfigOption은 포드의 DNS 확인자 옵션을 정의합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.options.items.properties.name": "필수입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.dnsConfig.properties.searches": "호스트 이름 조회를위한 DNS 검색 도메인 목록입니다. 이는 DNSPolicy에서 생성 된 기본 검색 경로에 추가됩니다. 중복 된 검색 경로는 제거됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.dnsPolicy": "포드에 대한 DNS 정책을 설정합니다. 기본값은 &quot;ClusterFirst&quot;입니다. 유효한 값은 &#39;ClusterFirstWithHostNet&#39;, &#39;ClusterFirst&#39;, &#39;Default&#39;또는 &#39;None&#39;입니다. DNSConfig에 제공된 DNS 매개 변수는 DNSPolicy로 선택한 정책과 병합됩니다. hostNetwork와 함께 DNS 옵션을 설정하려면 DNS 정책을 명시 적으로 &#39;ClusterFirstWithHostNet&#39;으로 지정해야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.enableServiceLinks": "EnableServiceLinks는 서비스에 대한 정보를 Docker 링크의 구문과 일치하는 포드의 환경 변수에 삽입해야하는지 여부를 나타냅니다. 옵션 : 기본값은 true입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers": "이 포드에서 실행되는 임시 컨테이너 목록입니다. 임시 컨테이너는 디버깅과 같은 사용자 시작 작업을 수행하기 위해 기존 포드에서 실행될 수 있습니다. 이 목록은 포드를 만들 때 지정할 수 없으며 포드 사양을 업데이트하여 수정할 수 없습니다. 기존 포드에 임시 컨테이너를 추가하려면 포드의 ephemeralcontainers 하위 리소스를 사용합니다. 이 필드는 알파 수준이며 EphemeralContainers 기능을 활성화하는 서버에서만 적용됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items": "EphemeralContainer는 디버깅과 같이 사용자가 시작한 활동을 위해 기존 포드에 임시로 추가 할 수있는 컨테이너입니다. 임시 컨테이너에는 리소스 또는 예약 보장이 없으며 종료시 또는 포드가 제거되거나 다시 시작될 때 다시 시작되지 않습니다. 임시 컨테이너로 인해 포드가 리소스 할당을 초과하는 경우 포드가 제거 될 수 있습니다. 포드 사양을 직접 업데이트하여 임시 컨테이너를 추가 할 수 없습니다. 포드의 ephemeralcontainers 하위 리소스를 통해 추가해야하며 추가되면 포드 사양에 나타납니다. 이것은 EphemeralContainers 기능 플래그로 활성화 된 알파 기능입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "pod의 필드를 선택합니다. supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에서 정의한 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.image": "Docker 이미지 이름. 더 많은 정보 : https://kubernetes.io/docs/concepts/containers/images",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle": "임시 컨테이너에는 수명주기가 허용되지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.name": "DNS_LABEL로 지정된 임시 컨테이너의 이름입니다. 이 이름은 모든 컨테이너, 초기화 컨테이너 및 임시 컨테이너간에 고유해야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports": "임시 컨테이너에는 포트가 허용되지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources": "임시 컨테이너에는 리소스가 허용되지 않습니다. 임시 컨테이너는 포드에 이미 할당 된 예비 리소스를 사용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext": "임시 컨테이너에는 SecurityContext가 허용되지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.add.items": "기능은 POSIX 기능 유형을 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.capabilities.properties.drop.items": "기능은 POSIX 기능 유형을 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스크 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. true 인 경우 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너 시작에 실패하는지 확인합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe": "임시 컨테이너에는 프로브가 허용되지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.targetContainerName": "설정된 경우이 임시 컨테이너가 대상으로하는 PodSpec의 컨테이너 이름입니다. 임시 컨테이너는이 컨테이너의 네임 스페이스 (IPC, PID 등)에서 실행됩니다. 설정되지 않은 경우 팟 (Pod)에 대해 공유되는 네임 스페이스에서 임시 컨테이너가 실행됩니다. 컨테이너 런타임은이 기능을 지원해야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방법과 그 반대의 방법을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.ephemeralContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 런타임의 기본값이 사용되며 이는 컨테이너 이미지에서 구성 될 수 있습니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.hostAliases": "HostAliases는 지정된 경우 포드의 호스트 파일에 삽입 될 호스트 및 IP의 선택적 목록입니다. 이는 hostNetwork가 아닌 포드에만 유효합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.hostAliases.items": "HostAlias는 포드의 호스트 파일에 항목으로 삽입 될 IP와 호스트 이름 간의 매핑을 보유합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.hostAliases.items.properties.hostnames": "위 IP 주소의 호스트 이름입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.hostAliases.items.properties.ip": "호스트 파일 항목의 IP 주소입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.hostIPC": "호스트의 ipc 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.hostNetwork": "이 포드에 대해 요청 된 호스트 네트워킹입니다. 호스트의 네트워크 네임 스페이스를 사용합니다. 이 옵션을 설정하면 사용할 포트를 지정해야합니다. 기본값은 false입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.hostPID": "호스트의 pid 네임 스페이스를 사용합니다. 선택 사항 : 기본값은 false입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.hostname": "포드의 호스트 이름을 지정합니다. 지정하지 않으면 포드의 호스트 이름이 시스템 정의 값으로 설정됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.imagePullSecrets": "ImagePullSecrets는이 PodSpec에서 사용하는 이미지를 가져 오는 데 사용할 동일한 네임 스페이스의 보안 비밀에 대한 선택적 참조 목록입니다. 지정된 경우 이러한 비밀은 사용할 개별 풀러 구현에 전달됩니다. 예를 들어 docker의 경우 DockerConfig 유형 비밀 만 적용됩니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.imagePullSecrets.items": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.imagePullSecrets.items.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers": "포드에 속한 초기화 컨테이너 목록입니다. Init 컨테이너는 컨테이너가 시작되기 전에 순서대로 실행됩니다. 초기화 컨테이너가 실패하면 포드는 실패한 것으로 간주되며 restartPolicy에 따라 처리됩니다. 초기화 컨테이너 또는 일반 컨테이너의 이름은 모든 컨테이너에서 고유해야합니다. Init 컨테이너에는 수명주기 작업, 준비 상태 프로브, 활성 상태 프로브 또는 시작 프로브가 없을 수 있습니다. init 컨테이너의 resourceRequirements는 각 리소스 유형에 대한 가장 높은 요청 / 한계를 찾은 다음 해당 값의 최대 값 또는 일반 컨테이너의 합계를 사용하여 스케줄링 중에 고려됩니다. 제한은 비슷한 방식으로 초기화 컨테이너에 적용됩니다. Init 컨테이너는 현재 추가하거나 제거 할 수 없습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items": "팟 (Pod) 내에서 실행하려는 단일 애플리케이션 컨테이너입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef": "pod의 필드를 선택합니다. supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에서 정의한 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.add.items": "기능은 POSIX 기능 유형을 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.capabilities.properties.drop.items": "기능은 POSIX 기능 유형을 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스크 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. true 인 경우 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너 시작에 실패하는지 확인합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업 중보 다 데이터를로드하거나 캐시를 워밍하는 데 시간이 오래 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방법과 그 반대의 방법을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.initContainers.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 런타임의 기본값이 사용되며 이는 컨테이너 이미지에서 구성 될 수 있습니다. 업데이트 할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.nodeName": "NodeName은이 포드를 특정 노드에 예약하기위한 요청입니다. 비어 있지 않은 경우 스케줄러는 리소스 요구 사항에 적합하다고 가정하여이 포드를 해당 노드에 예약합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.nodeSelector": "NodeSelector는 포드가 노드에 맞도록 true 여야하는 선택기입니다. 포드가 해당 노드에서 예약되도록하려면 노드의 라벨과 일치해야하는 선택기입니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.overhead": "오버 헤드는 주어진 RuntimeClass에 대한 포드 실행과 관련된 리소스 오버 헤드를 나타냅니다. 이 필드는 RuntimeClass 승인 컨트롤러에 의해 승인 시간에 자동으로 채워집니다. RuntimeClass 승인 컨트롤러가 사용 설정된 경우 Pod 생성 요청에 오버 헤드를 설정하면 안됩니다. RuntimeClass 승인 컨트롤러는 오버 헤드가 이미 설정된 포드 생성 요청을 거부합니다. RuntimeClass가 PodSpec에서 구성되고 선택되면 오버 헤드는 해당 RuntimeClass에 정의 된 값으로 설정됩니다. 그렇지 않으면 설정되지 않은 상태로 유지되고 0으로 처리됩니다. 추가 정보 : https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md이 필드는 Kubernetes v1.16 기준으로 알파 수준이며 다음을 활성화하는 서버에서만 적용됩니다. PodOverhead 기능.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.preemptionPolicy": "PreemptionPolicy는 우선 순위가 낮은 포드를 선점하기위한 정책입니다. Never 중 하나, PreemptLowerPriority. 설정되지 않은 경우 기본값은 PreemptLowerPriority입니다. 이 필드는 알파 수준이며 NonPreemptingPriority 기능을 활성화하는 서버에서만 적용됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.priority": "우선 순위 값입니다. 다양한 시스템 구성 요소가이 필드를 사용하여 포드의 우선 순위를 찾습니다. Priority Admission Controller가 활성화되면 사용자가이 필드를 설정할 수 없습니다. 승인 컨트롤러는 PriorityClassName에서이 필드를 채 웁니다. 값이 높을수록 우선 순위가 높아집니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.priorityClassName": "지정된 경우 포드의 우선 순위를 나타냅니다. &quot;system-node-critical&quot;및 &quot;system-cluster-critical&quot;은 가장 높은 우선 순위를 나타내는 두 개의 특수 키워드이며 전자가 가장 높은 우선 순위입니다. 다른 이름은 해당 이름으로 PriorityClass 개체를 만들어 정의해야합니다. 지정되지 않은 경우 포드 우선 순위는 기본값이되고 기본값이 없으면 0이됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.readinessGates": "지정된 경우 모든 준비 게이트에서 포드 준비 상태를 평가합니다. 모든 컨테이너가 준비되고 준비 게이트에 지정된 모든 조건의 상태가 &quot;True&quot;이면 포드가 준비된 것입니다. 추가 정보 : https://git.k8s.io/enhancements/keps/sig-network/0007-pod- ready % 2B % 2B.md",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.readinessGates.items": "PodReadinessGate에는 포드 조건에 대한 참조가 포함됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.readinessGates.items.properties.conditionType": "ConditionType은 유형이 일치하는 pod의 조건 목록에있는 조건을 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.restartPolicy": "포드 내의 모든 컨테이너에 대한 정책을 다시 시작합니다. Always, OnFailure, Never 중 하나입니다. 기본값은 항상입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.runtimeClassName": "RuntimeClassName은 node.k8s.io 그룹의 RuntimeClass 객체를 참조하며이 pod를 실행하는 데 사용해야합니다. RuntimeClass 리소스가 명명 된 클래스와 일치하지 않으면 포드가 실행되지 않습니다. 설정되지 않거나 비어있는 경우 기본 런타임 핸들러를 사용하는 비어있는 정의가있는 암시 적 클래스 인 &quot;레거시&quot;RuntimeClass가 사용됩니다. 추가 정보 : https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md 이것은 Kubernetes v1.14의 베타 기능입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.schedulerName": "지정된 경우 지정된 스케줄러가 포드를 발송합니다. 지정하지 않으면 포드가 기본 스케줄러에 의해 발송됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext": "SecurityContext는 포드 수준 보안 속성 및 공통 컨테이너 설정을 보유합니다. 옵션 : 기본값은 비어 있습니다. 각 필드의 기본값은 유형 설명을 참조하십시오.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.fsGroup": "포드의 모든 컨테이너에 적용되는 특수 보조 그룹입니다. 일부 볼륨 유형에서는 Kubelet이 포드가 소유 할 해당 볼륨의 소유권을 변경할 수 있습니다. 1. 소유 GID는 FSGroup이됩니다. 2. setgid 비트가 설정됩니다 (볼륨에 생성 된 새 파일은 FSGroup이 소유 함) 3 권한 비트는 rw-rw ----와 OR로 연결됩니다. 설정되지 않은 경우 Kubelet은 볼륨의 소유권 및 권한을 수정하지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.fsGroupChangePolicy": "fsGroupChangePolicy는 Pod 내부에 노출되기 전에 볼륨의 소유권 및 권한을 변경하는 동작을 정의합니다. 이 필드는 fsGroup 기반 소유권 (및 권한)을 지원하는 볼륨 유형에만 적용됩니다. secret, configmaps 및 emptydir과 같은 임시 볼륨 유형에는 영향을 미치지 않습니다. 유효한 값은 &quot;OnRootMismatch&quot;및 &quot;Always&quot;입니다. 지정하지 않으면 기본값은 &quot;항상&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. true 인 경우 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너 시작에 실패하는지 확인합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions": "모든 컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.supplementalGroups": "컨테이너의 기본 GID와 함께 각 컨테이너에서 실행되는 첫 번째 프로세스에 적용된 그룹 목록입니다. 지정하지 않으면 컨테이너에 그룹이 추가되지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls": "Sysctls에는 포드에 사용되는 네임 스페이스가 지정된 sysctls 목록이 있습니다. 컨테이너 런타임에 의해 지원되지 않는 sysctls가있는 포드가 시작되지 않을 수 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items": "Sysctl은 설정할 커널 매개 변수를 정의합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items.properties.name": "설정할 속성의 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.sysctls.items.properties.value": "설정할 속성 값",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 컨테이너의 SecurityContext 내의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.serviceAccount": "DeprecatedServiceAccount는 ServiceAccountName의 더 이상 사용되지 않는 별칭입니다. 더 이상 사용되지 않음 : 대신 serviceAccountName을 사용하세요.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.serviceAccountName": "ServiceAccountName은이 포드를 실행하는 데 사용할 ServiceAccount의 이름입니다. 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.shareProcessNamespace": "pod의 모든 컨테이너간에 단일 프로세스 네임 스페이스를 공유합니다. 이것이 설정되면 컨테이너는 동일한 포드의 다른 컨테이너에서 프로세스를보고 신호를 보낼 수 있으며 각 컨테이너의 첫 번째 프로세스에는 PID 1이 할당되지 않습니다. HostPID 및 ShareProcessNamespace를 둘 다 설정할 수는 없습니다. 선택 사항 : 기본값은 false입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.subdomain": "지정된 경우 정규화 된 포드 호스트 이름은 &quot;<hostname> .<subdomain> .<pod namespace> .svc.<cluster domain> &quot;. 지정하지 않으면 포드에 도메인 이름이 전혀 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.terminationGracePeriodSeconds": "포드가 정상적으로 종료되어야하는 선택적 기간 (초)입니다. 삭제 요청시 감소 될 수 있습니다. 값은 음이 아닌 정수 여야합니다. 값 0은 즉시 삭제를 나타냅니다. 이 값이 nil이면 기본 유예 기간이 대신 사용됩니다. 유예 기간은 포드에서 실행중인 프로세스가 종료 신호를 보낸 후의 기간 (초)과 프로세스가 강제 종료 신호로 중단되는 시간입니다. 이 값을 프로세스의 예상 정리 시간보다 길게 설정하십시오. 기본값은 30 초입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.tolerations": "지정된 경우 포드의 허용 오차입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.tolerations.items": "이 Toleration이 연결된 포드는 트리플과 일치하는 모든 오염을 견뎌냅니다.<key,value,effect> 일치 연산자 사용<operator> .",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.effect": "효과는 일치시킬 오염 효과를 나타냅니다. 비어 있음은 모든 오염 효과와 일치 함을 의미합니다. 지정된 경우 허용되는 값은 NoSchedule, PreferNoSchedule 및 NoExecute입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.key": "키는 관용이 적용되는 오염 키입니다. 비어 있음은 모든 오염 키와 일치 함을 의미합니다. 키가 비어 있으면 연산자가 존재해야합니다. 이 조합은 모든 값과 모든 키와 일치 함을 의미합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.operator": "연산자는 값에 대한 키의 관계를 나타냅니다. 유효한 연산자는 Exists 및 Equal입니다. 기본값은 Equal입니다. Exists는 값에 대한 와일드 카드와 동일하므로 포드가 특정 카테고리의 모든 taint를 허용 할 수 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.tolerationSeconds": "TolerationSeconds는 허용 범위 (NoExecute가 유효해야하며 그렇지 않으면이 필드는 무시 됨)가 taint를 허용하는 기간을 나타냅니다. 기본적으로 설정되어 있지 않으므로 오염을 영원히 견딜 수 있습니다 (제거하지 마십시오). 0 및 음수 값은 시스템에서 0 (즉시 제거)으로 처리됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.tolerations.items.properties.value": "Value는 허용치가 일치하는 오염 값입니다. 연산자가 Exists이면 값은 비어 있어야하고 그렇지 않으면 일반 문자열이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints": "TopologySpreadConstraints는 pod 그룹이 토폴로지 도메인에 어떻게 분산되어야하는지 설명합니다. 스케줄러는 제약 조건을 준수하는 방식으로 포드를 예약합니다. 이 필드는 EvenPodsSpread 기능을 활성화하는 클러스터에서만 적용됩니다. 모든 topologySpreadConstraint는 AND 처리됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items": "TopologySpreadConstraint는 지정된 토폴로지간에 일치하는 포드를 분산하는 방법을 지정합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector": "LabelSelector는 일치하는 포드를 찾는 데 사용됩니다. 이 라벨 선택기와 일치하는 포드는 해당 토폴로지 도메인의 포드 수를 결정하기 위해 계산됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.maxSkew": "MaxSkew는 포드가 고르지 않게 분산 될 수있는 정도를 설명합니다. 주어진 토폴로지 유형의 두 토폴로지 도메인에서 일치하는 포드 수간에 허용되는 최대 차이입니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 1/1/0으로 확산되는 포드 : | zone1 | zone2 | zone3 | | P | P | | -MaxSkew가 1이면 들어오는 포드는 zone3에 1/1/1이되도록 예약 할 수 있습니다. zone1 (zone2)에 예약하면 zone1 (zone2)의 ActualSkew (2-0)가 MaxSkew (1)을 위반하게됩니다. -MaxSkew가 2이면 들어오는 포드를 모든 영역에 예약 할 수 있습니다. 필수 필드입니다. 기본값은 1이고 0은 허용되지 않습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.topologyKey": "TopologyKey는 노드 레이블의 키입니다. 이 키와 동일한 값이있는 레이블이있는 노드는 동일한 토폴로지에있는 것으로 간주됩니다. 우리는 각각을 고려합니다<key, value> &quot;버킷&quot;으로 각 버킷에 균형 잡힌 수의 포드를 넣으십시오. 필수 필드입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.topologySpreadConstraints.items.properties.whenUnsatisfiable": "WhenUnsatisfiable은 스프레드 제약 조건을 충족하지 않는 경우 포드를 처리하는 방법을 나타냅니다. -DoNotSchedule (기본값)은 스케줄러에게 스케줄을 지정하지 않도록 지시합니다.-ScheduleAnyway는 스케줄러에게 여전히 스케줄을 지정합니다. 들어오는 pod를 토폴로지에 배치하는 것이 &quot;MaxSkew&quot;를 위반하는 경우에만 &quot;불만족&quot;으로 간주됩니다. 예를 들어, 3 구역 클러스터에서 MaxSkew는 1로 설정되고 동일한 labelSelector가 3/1/1로 펼쳐진 포드 : | zone1 | zone2 | zone3 | | PPP | P | P | WhenUnsatisfiable이 DoNotSchedule로 설정된 경우, 들어오는 pod는 zone2 (zone3)에서만 3/2/1 (3/1/2)가되도록 예약 할 수 있습니다. zone2 (zone3)의 ActualSkew (2-1)가 MaxSkew (1)를 충족하기 때문입니다. 즉, 클러스터는 여전히 불균형 상태 일 수 있지만 스케줄러는 * 더 * 불균형 상태로 만들지 않습니다. 필수 필드입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes": "포드에 속한 컨테이너로 마운트 할 수있는 볼륨 목록입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items": "볼륨은 포드의 모든 컨테이너에서 액세스 할 수있는 포드의 명명 된 볼륨을 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore": "AWSElasticBlockStore는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 AWS 디스크 리소스를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO : 파일 시스템의 오류가 시스템을 손상시키지 않도록 방지하는 방법",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다).",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.readOnly": "VolumeMounts의 ReadOnly 속성을 &quot;true&quot;로 강제 설정하려면 &quot;true&quot;를 지정합니다. 생략하면 기본값은 &quot;false&quot;입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.awsElasticBlockStore.properties.volumeID": "AWS에있는 영구 디스크 리소스의 고유 ID (Amazon EBS 볼륨). 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk": "AzureDisk는 호스트의 Azure 데이터 디스크 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.cachingMode": "호스트 캐싱 모드 : 없음, 읽기 전용, 읽기 쓰기.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskName": "Blob 저장소에있는 데이터 디스크의 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.diskURI": "Blob 저장소의 데이터 디스크 URI",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.kind": "예상 값 공유 : 스토리지 계정 당 여러 Blob 디스크 전용 : 스토리지 계정 당 단일 Blob 디스크 관리 : Azure 관리 데이터 디스크 (관리되는 가용성 집합에서만). 기본적으로 공유 됨",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureDisk.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile": "AzureFile은 호스트의 Azure 파일 서비스 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.secretName": "Azure Storage 계정 이름 및 키가 포함 된 비밀의 이름",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.azureFile.properties.shareName": "이름 공유",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs": "CephFS는 포드의 수명을 공유하는 호스트의 Ceph FS 마운트를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.monitors": "필수 : 모니터는 Ceph 모니터 모음입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.path": "선택 사항 : 전체 Ceph 트리가 아닌 마운트 된 루트로 사용됩니다. 기본값은 /입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretFile": "선택 사항 : SecretFile은 사용자의 키 링 경로이며 기본값은 /etc/ceph/user.secret입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef": "선택 사항 : SecretRef는 사용자의 인증 시크릿에 대한 참조이며 기본값은 비어 있습니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cephfs.properties.user": "선택 사항 : 사용자는 rados 사용자 이름, 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder": "Cinder는 kubelets 호스트 머신에 연결되고 마운트 된 cinder 볼륨을 나타냅니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef": "선택 사항 : OpenStack에 연결하는 데 사용되는 매개 변수가 포함 된 비밀 개체를 가리 킵니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.cinder.properties.volumeID": "cinder에서 볼륨을 식별하는 데 사용되는 볼륨 ID입니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap": "ConfigMap은이 볼륨을 채워야하는 configMap을 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 사용할 모드 비트. 0에서 0777 사이의 값이어야합니다. 기본값은 0644입니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에서 사용할 모드 비트는 0에서 0777 사이의 값이어야합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi": "CSI (Container Storage Interface)는 외부 CSI 드라이버 (알파 기능)에서 처리하는 스토리지를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.driver": "Driver는이 볼륨을 처리하는 CSI 드라이버의 이름입니다. 클러스터에 등록 된 올바른 이름은 관리자에게 문의하십시오.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.fsType": "마운트 할 파일 시스템 유형입니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 제공되지 않으면 적용 할 기본 파일 시스템을 결정하는 관련 CSI 드라이버에 빈 값이 전달됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef": "NodePublishSecretRef는 CSI NodePublishVolume 및 NodeUnpublishVolume 호출을 완료하기 위해 CSI 드라이버에 전달할 민감한 정보가 포함 된 비밀 개체에 대한 참조입니다. 이 필드는 선택 사항이며 비밀이 필요하지 않은 경우 비어있을 수 있습니다. 비밀 개체에 둘 이상의 비밀이 포함 된 경우 모든 비밀 참조가 전달됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.nodePublishSecretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.csi.properties.volumeAttributes": "VolumeAttributes는 CSI 드라이버에 전달되는 드라이버 별 속성을 저장합니다. 지원되는 값은 드라이버 설명서를 참조하십시오.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI": "DownwardAPI는이 볼륨을 채워야하는 포드에 대한 하향 API를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 사용할 모드 비트. 0에서 0777 사이의 값이어야합니다. 기본값은 0644입니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items": "항목은 하향 API 볼륨 파일 목록입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에서 사용할 모드 비트는 0에서 0777 사이의 값이어야합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir": "EmptyDir는 포드의 수명을 공유하는 임시 디렉터리를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir.properties.medium": "이 디렉토리를 백업해야하는 저장 매체 유형입니다. 기본값은 노드의 기본 매체를 사용함을 의미하는 &quot;&quot;입니다. 빈 문자열 (기본값) 또는 메모리 여야합니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.emptyDir.properties.sizeLimit": "이 EmptyDir 볼륨에 필요한 총 로컬 스토리지 양입니다. 크기 제한은 메모리 매체에도 적용됩니다. 메모리 매체 EmptyDir의 최대 사용량은 여기에 지정된 SizeLimit와 포드에있는 모든 컨테이너의 메모리 제한 합계 사이의 최소값입니다. 기본값은 제한이 정의되지 않았 음을 의미하는 nil입니다. 추가 정보 : http://kubernetes.io/docs/user-guide/volumes#emptydir",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc": "FC는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 파이버 채널 리소스를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. TODO : 파일 시스템의 오류가 시스템을 손상시키지 않도록 방지하는 방법",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.lun": "선택 사항 : FC 대상 LUN 번호",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.targetWWNs": "선택 사항 : FC 대상 월드 와이드 이름 (WWN)",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.fc.properties.wwids": "선택 사항 : FC 볼륨 월드 와이드 식별자 (wwids) wwids 또는 targetWWN과 lun의 조합을 설정해야하지만 둘 다 동시에 설정할 수는 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume": "FlexVolume은 exec 기반 플러그인을 사용하여 프로비저닝 / 연결된 일반 볼륨 리소스를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.driver": "Driver는이 볼륨에 사용할 드라이버의 이름입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본 파일 시스템은 FlexVolume 스크립트에 따라 다릅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.options": "옵션 : 추가 명령 옵션 (있는 경우).",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef": "선택 사항 : SecretRef는 플러그인 스크립트에 전달할 민감한 정보를 포함하는 비밀 오브젝트에 대한 참조입니다. 비밀 개체가 지정되지 않은 경우 비어있을 수 있습니다. 비밀 개체에 둘 이상의 비밀이 포함 된 경우 모든 비밀이 플러그인 스크립트에 전달됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flexVolume.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker": "Flocker는 kubelet의 호스트 머신에 연결된 Flocker 볼륨을 나타냅니다. 이것은 실행중인 Flocker 제어 서비스에 따라 다릅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker.properties.datasetName": "메타 데이터로 저장된 데이터 세트의 이름-&gt; Flocker 용 데이터 세트의 이름은 더 이상 사용되지 않는 것으로 간주되어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.flocker.properties.datasetUUID": "데이터 세트의 UUID입니다. 이것은 Flocker 데이터 세트의 고유 식별자입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk": "GCEPersistentDisk는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 GCE 디스크 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO : 파일 시스템의 오류가 시스템을 손상시키지 않도록 방지하는 방법",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다). 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.pdName": "GCE에있는 PD 리소스의 고유 한 이름입니다. GCE에서 디스크를 식별하는 데 사용됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gcePersistentDisk.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo": "GitRepo는 특정 개정판의 git 저장소를 나타냅니다. DEPRECATED : GitRepo는 더 이상 사용되지 않습니다. git 저장소로 컨테이너를 프로비저닝하려면 git을 사용하여 저장소를 복제하는 InitContainer에 EmptyDir을 마운트 한 다음 Pod의 컨테이너에 EmptyDir을 마운트합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.directory": "대상 디렉토리 이름. &#39;..&#39;을 포함하거나 시작하지 않아야합니다. 만약 &#39;.&#39; 제공되면 볼륨 디렉토리는 git 저장소가됩니다. 그렇지 않으면 지정된 경우 볼륨은 지정된 이름의 하위 디렉토리에 git 저장소를 포함합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.repository": "저장소 URL",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.gitRepo.properties.revision": "지정된 개정에 대한 커밋 해시입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs": "Glusterfs는 포드의 수명을 공유하는 호스트의 Glusterfs 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.endpoints": "EndpointsName은 Glusterfs 토폴로지를 자세히 설명하는 엔드 포인트 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.path": "Path는 Glusterfs 볼륨 경로입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.glusterfs.properties.readOnly": "여기서 ReadOnly는 Glusterfs 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath": "HostPath는 컨테이너에 직접 노출되는 호스트 시스템의 기존 파일 또는 디렉터리를 나타냅니다. 이것은 일반적으로 호스트 시스템을 볼 수있는 시스템 에이전트 또는 기타 권한있는 항목에 사용됩니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO (jonesdl) 호스트 디렉토리 마운트를 사용할 수있는 사람과 호스트 디렉토리를 읽기 / 쓰기로 마운트 할 수있는 사람을 제한해야합니다. .",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath.properties.path": "호스트의 디렉토리 경로입니다. 경로가 심볼릭 링크이면 실제 경로에 대한 링크를 따릅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.hostPath.properties.type": "HostPath 볼륨의 유형 기본값은 &quot;&quot;입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi": "ISCSI는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 ISCSI 디스크 리소스를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/iscsi/README.md",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthDiscovery": "iSCSI 검색 CHAP 인증 지원 여부",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.chapAuthSession": "iSCSI 세션 CHAP 인증 지원 여부",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO : 파일 시스템의 오류가 시스템을 손상시키지 않도록 방지하는 방법",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.initiatorName": "사용자 지정 iSCSI 이니시에이터 이름. initiatorName이 iscsiInterface와 동시에 지정되면 새로운 iSCSI 인터페이스<target portal> :<volume name> 연결을 위해 생성됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.iqn": "대상 iSCSI 정규화 이름.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.iscsiInterface": "iSCSI 전송을 사용하는 iSCSI 인터페이스 이름입니다. 기본값은 &#39;default&#39;(tcp)입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.lun": "iSCSI 대상 LUN 번호.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.portals": "iSCSI 대상 포털 목록. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef": "iSCSI 대상 및 이니시에이터 인증을위한 CHAP 암호",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.iscsi.properties.targetPortal": "iSCSI 대상 포털. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.name": "볼륨의 이름. DNS_LABEL이어야하며 포드 내에서 고유해야합니다. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs": "NFS는 포드의 수명을 공유하는 호스트의 NFS 마운트를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.path": "NFS 서버에서 내 보낸 경로입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.readOnly": "여기서 ReadOnly는 읽기 전용 권한으로 NFS 내보내기를 강제로 마운트합니다. 기본값은 false입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.nfs.properties.server": "Server는 NFS 서버의 호스트 이름 또는 IP 주소입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim": "PersistentVolumeClaimVolumeSource는 동일한 네임 스페이스에있는 PersistentVolumeClaim에 대한 참조를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.claimName": "ClaimName은이 볼륨을 사용하는 pod와 동일한 네임 스페이스에있는 PersistentVolumeClaim의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.persistentVolumeClaim.properties.readOnly": "VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk": "PhotonPersistentDisk는 kubelets 호스트 머신에 연결되고 마운트 된 PhotonController 영구 디스크를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.photonPersistentDisk.properties.pdID": "Photon Controller 영구 디스크를 식별하는 ID",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume": "PortworxVolume은 kubelets 호스트 머신에 연결되고 마운트 된 portworx 볼륨을 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.fsType": "FSType은 마운트 할 파일 시스템 유형을 나타냅니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.portworxVolume.properties.volumeID": "VolumeID는 Portworx 볼륨을 고유하게 식별합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected": "하나의 리소스 비밀, 구성 맵 및 하향 API에 대한 항목",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.defaultMode": "기본적으로 생성 된 파일에 사용할 모드 비트입니다. 0에서 0777 사이의 값이어야합니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources": "볼륨 예측 목록",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items": "지원되는 다른 볼륨 유형과 함께 투영 될 수있는 투영",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap": "프로젝트 할 configMap 데이터에 대한 정보",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에서 사용할 모드 비트는 0에서 0777 사이의 값이어야합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI": "프로젝트 할 downwardAPI 데이터에 대한 정보",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items": "Items는 DownwardAPIVolume 파일 목록입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에서 사용할 모드 비트는 0에서 0777 사이의 값이어야합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret": "프로젝트 할 비밀 데이터에 대한 정보",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에서 사용할 모드 비트는 0에서 0777 사이의 값이어야합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken": "프로젝트 할 serviceAccountToken 데이터에 대한 정보",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.audience": "청중은 토큰의 의도 된 청중입니다. 토큰 수신자는 토큰 대상에 지정된 식별자로 자신을 식별해야하며 그렇지 않으면 토큰을 거부해야합니다. 대상은 기본적으로 apiserver의 식별자입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.expirationSeconds": "ExpirationSeconds는 서비스 계정 토큰의 요청 된 유효 기간입니다. 토큰이 만료에 가까워지면 kubelet 볼륨 플러그인이 사전에 서비스 계정 토큰을 교체합니다. 토큰이 수명의 80 % 이상이거나 토큰이 24 시간 이상인 경우 kubelet은 토큰 회전을 시도합니다. 기본값은 1 시간이며 최소 10 분이어야합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.path": "경로는 토큰을 투영 할 파일의 마운트 지점에 상대적인 경로입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte": "Quobyte는 포드의 수명을 공유하는 호스트의 Quobyte 마운트를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.group": "볼륨 액세스를 매핑 할 그룹 기본값은 그룹 없음입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.readOnly": "여기서 ReadOnly는 Quobyte 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.registry": "레지스트리는 볼륨의 중앙 레지스트리 역할을하는 호스트 : 포트 쌍 (여러 항목은 쉼표로 구분됨)으로 문자열로 지정된 단일 또는 다중 Quobyte Registry 서비스를 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.tenant": "백엔드에서 주어진 Quobyte 볼륨을 소유하는 테넌트는 동적으로 프로비저닝 된 Quobyte 볼륨과 함께 사용되며 값은 플러그인에 의해 설정됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.user": "볼륨 액세스를 기본값에 매핑하는 사용자를 serivceaccount 사용자에게",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.quobyte.properties.volume": "Volume은 이미 생성 된 Quobyte 볼륨을 이름으로 참조하는 문자열입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd": "RBD는 포드의 수명을 공유하는 호스트의 Rados 블록 장치 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO : 파일 시스템의 오류가 시스템을 손상시키지 않도록 방지하는 방법",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.image": "라도 스 이미지 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.keyring": "키링은 RBDUser의 키링 경로입니다. 기본값은 / etc / ceph / keyring입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.monitors": "Ceph 모니터 모음. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.pool": "라도 스 풀 이름. 기본값은 rbd입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef": "SecretRef는 RBDUser에 대한 인증 암호의 이름입니다. 제공된 경우 키링을 재정의합니다. 기본값은 nil입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.rbd.properties.user": "rados 사용자 이름입니다. 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO": "ScaleIO는 Kubernetes 노드에 연결되고 마운트 된 ScaleIO 영구 볼륨을 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본값은 &quot;xfs&quot;입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.gateway": "ScaleIO API 게이트웨이의 호스트 주소입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.protectionDomain": "구성된 스토리지에 대한 ScaleIO 보호 도메인의 이름입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef": "SecretRef는 ScaleIO 사용자 및 기타 중요한 정보에 대한 암호를 참조합니다. 이것이 제공되지 않으면 로그인 작업이 실패합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.sslEnabled": "게이트웨이와의 SSL 통신을 활성화 / 비활성화하는 플래그, 기본값은 false",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.storageMode": "볼륨의 스토리지가 ThickProvisioned인지 ThinProvisioned인지 여부를 나타냅니다. 기본값은 ThinProvisioned입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.storagePool": "보호 도메인과 연결된 ScaleIO 스토리지 풀입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.system": "ScaleIO에 구성된 스토리지 시스템의 이름입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.scaleIO.properties.volumeName": "이 볼륨 소스와 연결된 ScaleIO 시스템에 이미 생성 된 볼륨의 이름입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret": "Secret은이 볼륨을 채워야하는 비밀을 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 사용할 모드 비트. 0에서 0777 사이의 값이어야합니다. 기본값은 0644입니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에서 사용할 모드 비트는 0에서 0777 사이의 값이어야합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.secret.properties.secretName": "사용할 팟 (Pod) 네임 스페이스의 시크릿 이름입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos": "StorageOS는 Kubernetes 노드에 연결되고 마운트 된 StorageOS 볼륨을 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef": "SecretRef는 StorageOS API 자격 증명을 얻는 데 사용할 암호를 지정합니다. 지정하지 않으면 기본값이 시도됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.volumeName": "VolumeName은 사람이 읽을 수있는 StorageOS 볼륨의 이름입니다. 볼륨 이름은 네임 스페이스 내에서만 고유합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.storageos.properties.volumeNamespace": "VolumeNamespace는 StorageOS 내의 볼륨 범위를 지정합니다. 네임 스페이스를 지정하지 않으면 Pod의 네임 스페이스가 사용됩니다. 이를 통해보다 긴밀한 통합을 위해 Kubernetes 이름 범위를 StorageOS 내에서 미러링 할 수 있습니다. 기본 동작을 재정의하려면 VolumeName을 임의의 이름으로 설정합니다. StorageOS 내에서 네임 스페이스를 사용하지 않는 경우 &quot;default&quot;로 설정하십시오. StorageOS 내에 존재하지 않는 네임 스페이스가 생성됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume": "VsphereVolume은 kubelets 호스트 시스템에 연결되고 마운트 된 vSphere 볼륨을 나타냅니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyID": "StoragePolicyName과 연결된 SPBM (스토리지 정책 기반 관리) 프로필 ID입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyName": "SPBM (스토리지 정책 기반 관리) 프로필 이름입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.template.properties.spec.properties.volumes.items.properties.vsphereVolume.properties.volumePath": "vSphere 볼륨 vmdk를 식별하는 경로",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.volumeClaim": "Foo는 Notebook의 예제 필드입니다. Notebook_types.go를 편집하여 제거 / 업데이트",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.volumeClaim.items": "NotebookVolumeClaim은 노트북의 볼륨 사양을 정의합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status": "NotebookStatus는 노트북의 관찰 된 상태를 정의합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.conditions": "조건은 현재 조건의 배열입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.conditions.items": "NotebookCondition은 노트북의 조건을 정의합니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.conditions.items.properties.lastProbeTime": "지난번에 우리는 조건을 조사했습니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.conditions.items.properties.message": "컨테이너가 현재 상태 인 이유에 대한 메시지입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.conditions.items.properties.reason": "(간단한) 컨테이너가 현재 상태 인 이유",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.conditions.items.properties.type": "유형은 조건의 유형입니다. 가능한 값은 Running | Waiting | Terminated입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.containerState": "ContainerState는 기본 컨테이너의 상태입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.containerState.properties.running": "실행중인 컨테이너에 대한 세부 정보",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.containerState.properties.running.properties.startedAt": "컨테이너가 마지막으로 (다시) 시작된 시간",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.containerState.properties.terminated": "종료 된 컨테이너에 대한 세부 정보",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.containerState.properties.terminated.properties.containerID": "&#39;docker : //&#39;형식의 컨테이너 ID<container_id> &#39;",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.containerState.properties.terminated.properties.exitCode": "컨테이너 마지막 종료의 종료 상태",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.containerState.properties.terminated.properties.finishedAt": "컨테이너가 마지막으로 종료 된 시간",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.containerState.properties.terminated.properties.message": "컨테이너의 마지막 종료에 관한 메시지",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.containerState.properties.terminated.properties.reason": "(간단한) 컨테이너의 마지막 종료 이유",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.containerState.properties.terminated.properties.signal": "컨테이너의 마지막 종료 신호",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.containerState.properties.terminated.properties.startedAt": "컨테이너의 이전 실행이 시작된 시간",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.containerState.properties.waiting": "대기 컨테이너에 대한 세부 정보",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.containerState.properties.waiting.properties.message": "컨테이너가 아직 실행되지 않은 이유에 대한 메시지입니다.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.containerState.properties.waiting.properties.reason": "(간단한) 컨테이너가 아직 실행되지 않는 이유.",
    "%notebooks.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.readyReplicas": "ReadyReplicas는 준비 상태가있는 StatefulSet 컨트롤러에서 생성 한 포드 수입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema": "IntegrationConfig는 integrationconfigs API의 스키마입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec": "IntegrationConfigSpec은 원하는 IntegrationConfig 상태를 정의합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.git": "대상 저장소에 대한 Git 구성",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.git.properties.apiUrl": "API 서버용 APIUrl (예 : github 유형의 경우 https://api.github.com), git 저장소가 자체 호스팅되는 경우 (특정 프로토콜을 포함해야하며 그렇지 않은 경우 웹훅 서버에서 오류를 반환 함) 또한 * NOT * 저장소 경로 포함 (예 : tmax-cloud / cicd-operator)",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.git.properties.repository": "git 저장소의 저장소 이름 (<org> /<repo> 형식 (예 : tmax-cloud / cicd-operator)",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.git.properties.token": "토큰은 원격 git 서버에 액세스하기위한 토큰입니다. 웹훅을 git 서버에 등록하지 않으려면 비어있을 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.git.properties.token.properties.value": "값은 git 토큰의 암호화되지 않은 일반 문자열이며 권장되지 않습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.git.properties.token.properties.valueFrom": "ValueFrom은 비밀을 나타냅니다. 추천",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.git.properties.token.properties.valueFrom.properties.secretKeyRef": "SecretKeySelector는 Secret의 키를 선택합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.git.properties.token.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.git.properties.token.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.git.properties.token.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.git.properties.type": "git 원격 서버 유형",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs": "작업은 실행할 작업을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit": "PostSubmit 작업은 푸시 이벤트 용입니다 (태그 이벤트 포함).",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items": "Job은 특정 이벤트에 대해 실행될 작업의 사양입니다 .Tekton과 동일한 수준의 작업",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.after": "이 작업을 실행하기 전에 실행할 작업을 구성한 후",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.approval": "승인",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.approval.properties.approvers": "승인자는 다음 형식의 승인자 목록입니다.<User name> =<Email> (이메일은 선택 사항) 예 : admin-tmax.co.kr 예 : admin-tmax.co.kr=sunghyun_kim3@tmax.co.kr",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.approval.properties.approversConfigMap": "ApproversConfigMap은 승인자 목록이 포함 된 configMap 이름으로 configMap의 &#39;승인자&#39;키에 쉼표 (,)로 구분 된 목록으로 존재해야합니다. 예 : admin-tmax.co.kr = sunghyun_kim3 @ tmax.co.kr, test-tmax.co.kr = kyunghoon_min@tmax.co.kr",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.approval.properties.approversConfigMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.approval.properties.requestMessage": "RequestMessage는 이메일로 승인자에게 보낼 메시지입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.email": "이메일은 이메일을 보냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.email.properties.content": "이메일 내용",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.email.properties.isHtml": "IsHTML은 그것이 html 콘텐츠인지 설명합니다. 기본값은 거짓입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.email.properties.receivers": "수신자는 이메일 수신자 목록입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.email.properties.title": "이메일 제목",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom.properties.fieldRef": "pod의 필드를 선택합니다 : supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에서 정의한 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification": "알림은 성공 / 실패시 알림을 보냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onFailure": "OnFailure는 작업이 실패 할 때 알림",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onFailure.properties.email": "이메일은 이메일을 보냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onFailure.properties.email.properties.content": "이메일 내용",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onFailure.properties.email.properties.isHtml": "IsHTML은 그것이 html 콘텐츠인지 설명합니다. 기본값은 거짓입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onFailure.properties.email.properties.receivers": "수신자는 이메일 수신자 목록입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onFailure.properties.email.properties.title": "이메일 제목",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onFailure.properties.slack": "슬랙은 슬랙을 보냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onFailure.properties.slack.properties.message": "메시지는 웹훅으로 전송되는 메시지입니다. 마크 다운 형식이어야합니다. IntegrationJob의 이름과 작업 이름에 각각 $ INTEGRATION_JOB_NAME 및 $ JOB_NAME 변수를 사용할 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onFailure.properties.slack.properties.url": "URL은 Slack 앱의 웹훅 URL입니다. https://api.slack.com/messaging/webhooks를 참조하세요.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onSuccess": "OnSuccess는 작업이 성공하면 알립니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onSuccess.properties.email": "이메일은 이메일을 보냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onSuccess.properties.email.properties.content": "이메일 내용",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onSuccess.properties.email.properties.isHtml": "IsHTML은 그것이 html 콘텐츠인지 설명합니다. 기본값은 거짓입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onSuccess.properties.email.properties.receivers": "수신자는 이메일 수신자 목록입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onSuccess.properties.email.properties.title": "이메일 제목",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onSuccess.properties.slack": "슬랙은 슬랙을 보냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onSuccess.properties.slack.properties.message": "메시지는 웹훅으로 전송되는 메시지입니다. 마크 다운 형식이어야합니다. IntegrationJob의 이름과 작업 이름에 각각 $ INTEGRATION_JOB_NAME 및 $ JOB_NAME 변수를 사용할 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.notification.properties.onSuccess.properties.slack.properties.url": "URL은 Slack 앱의 웹훅 URL입니다. https://api.slack.com/messaging/webhooks를 참조하세요.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.script": "스크립트는 컨테이너의 명령을 무시합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.capabilities.properties.add.items": "기능은 POSIX 기능 유형을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.capabilities.properties.drop.items": "기능은 POSIX 기능 유형을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스크 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. true 인 경우 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너 시작에 실패하는지 확인합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.skipCheckout": "SkipCheckout은 전에 git에서 체크 아웃할지 여부를 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.slack": "슬랙은 슬랙을 보냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.slack.properties.message": "메시지는 웹훅으로 전송되는 메시지입니다. 마크 다운 형식이어야합니다. IntegrationJob의 이름과 작업 이름에 각각 $ INTEGRATION_JOB_NAME 및 $ JOB_NAME 변수를 사용할 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.slack.properties.url": "URL은 Slack 앱의 웹훅 URL입니다. https://api.slack.com/messaging/webhooks를 참조하세요.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업 중보 다 데이터를로드하거나 캐시를 워밍하는 데 시간이 오래 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask": "TektonTask는 로컬 작업 또는 tekton 카탈로그 github repo에 등록 된 작업을 참조하기위한 것입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.params": "매개 변수는 작업에 대한 입력 매개 변수입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.params.items": "TektonTaskParam은 tekton의 매개 변수를 복제합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources": "리소스는 작업에 대한 입력 / 출력 리소스입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.inputs": "입력은이 태스크가 호출 된 입력 자원을 보유합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items": "TaskResourceBinding은 Name이라는 태스크 입력 또는 출력에 사용될 PipelineResource를 가리 킵니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.name": "Name은 파이프 라인 선언에있는 PipelineResource의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.paths": "경로는 # 1284에서 제거 된 다음 PipelineResourceBinding을 대신 사용할 수 있습니다. 선택적 경로 필드는 리소스를 찾을 수있는 디스크의 경로에 해당합니다 (마운트 된 볼륨을 통해 리소스를 제공 할 때 사용되며 리소스를 가져 오는 기본 논리를 재정의).",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceRef": "ResourceRef는 사용해야하는 실제 PipelineResource의 인스턴스에 대한 참조입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceRef.properties.apiVersion": "리퍼 런트의 API 버전",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceRef.properties.name": "대상자의 이름; 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceSpec": "ResourceSpec은 작업에서 생성하고 소비해야하는 리소스의 사양입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceSpec.properties.description": "설명은 UI를 채우는 데 사용할 수있는 리소스에 대한 사용자 용 설명입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceSpec.properties.params.items": "ResourceParam은 Name이라는 매개 변수에 사용할 문자열 값을 선언하며 PipelineResources의 특정 컨텍스트에서 사용됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceSpec.properties.secrets": "일부 리소스 필드를 채우기 위해 가져올 비밀",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceSpec.properties.secrets.items": "SecretParam은 리소스의 필드를 채우는 데 사용할 수있는 비밀을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.outputs": "출력은이 태스크가 호출 된 입력 자원을 보유합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items": "TaskResourceBinding은 Name이라는 태스크 입력 또는 출력에 사용될 PipelineResource를 가리 킵니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.name": "Name은 파이프 라인 선언에있는 PipelineResource의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.paths": "경로는 # 1284에서 제거 된 다음 PipelineResourceBinding을 대신 사용할 수 있습니다. 선택적 경로 필드는 리소스를 찾을 수있는 디스크의 경로에 해당합니다 (마운트 된 볼륨을 통해 리소스를 제공 할 때 사용되며 리소스를 가져 오는 기본 논리를 재정의).",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceRef": "ResourceRef는 사용해야하는 실제 PipelineResource의 인스턴스에 대한 참조입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceRef.properties.apiVersion": "리퍼 런트의 API 버전",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceRef.properties.name": "대상자의 이름; 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceSpec": "ResourceSpec은 작업에서 생성하고 소비해야하는 리소스의 사양입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceSpec.properties.description": "설명은 UI를 채우는 데 사용할 수있는 리소스에 대한 사용자 용 설명입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceSpec.properties.params.items": "ResourceParam은 Name이라는 매개 변수에 사용할 문자열 값을 선언하며 PipelineResources의 특정 컨텍스트에서 사용됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceSpec.properties.secrets": "일부 리소스 필드를 채우기 위해 가져올 비밀",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceSpec.properties.secrets.items": "SecretParam은 리소스의 필드를 채우는 데 사용할 수있는 비밀을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.taskRef": "TaskRef는 로컬 클러스터의 기존 태스크 또는 tekton 카탈로그 github 저장소를 참조합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.taskRef.properties.catalog": "Catalog는 작업 @ tekton catalog github repo의 이름입니다. (예 : s2i@0.2) FYI : https://github.com/tektoncd/catalog",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.taskRef.properties.local": "로컬은 로컬 작업 / 클러스터 작업을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.taskRef.properties.local.properties.apiVersion": "리퍼 런트의 API 버전",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.taskRef.properties.local.properties.bundle": "Tekton 번들에 대한 번들 URL 참조입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.taskRef.properties.local.properties.kind": "TaskKind는 작업의 종류 (네임 스페이스 또는 클러스터 범위)를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.taskRef.properties.local.properties.name": "대상자의 이름; 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.workspaces": "작업 공간은 작업을위한 작업 공간입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.workspaces.items": "WorkspacePipelineTaskBinding은 파이프 라인으로 전달 된 작업 영역을 작업의 선언 된 작업 영역에 매핑하는 방법을 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.workspaces.items.properties.name": "이름은 작업에서 선언 한 작업 공간의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.workspaces.items.properties.subPath": "SubPath는 선택적으로이 바인딩에 사용해야하는 볼륨의 디렉토리입니다 (예 : 볼륨이이 하위 디렉토리에 마운트 됨).",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tektonTask.properties.workspaces.items.properties.workspace": "작업 공간은 파이프 라인에서 선언 한 작업 공간의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.when": "작업 실행 조건은 언제입니까?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.postSubmit.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 런타임의 기본값이 사용되며 이는 컨테이너 이미지에서 구성 될 수 있습니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit": "PreSubmit 작업은 풀 요청 이벤트 용입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items": "Job은 특정 이벤트에 대해 실행될 작업의 사양입니다 .Tekton과 동일한 수준의 작업",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.after": "이 작업을 실행하기 전에 실행할 작업을 구성한 후",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.approval": "승인",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.approval.properties.approvers": "승인자는 다음 형식의 승인자 목록입니다.<User name> =<Email> (이메일은 선택 사항) 예 : admin-tmax.co.kr 예 : admin-tmax.co.kr=sunghyun_kim3@tmax.co.kr",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.approval.properties.approversConfigMap": "ApproversConfigMap은 승인자 목록이 포함 된 configMap 이름으로 configMap의 &#39;승인자&#39;키에 쉼표 (,)로 구분 된 목록으로 존재해야합니다. 예 : admin-tmax.co.kr = sunghyun_kim3 @ tmax.co.kr, test-tmax.co.kr = kyunghoon_min@tmax.co.kr",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.approval.properties.approversConfigMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.approval.properties.requestMessage": "RequestMessage는 이메일로 승인자에게 보낼 메시지입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.args": "진입 점에 대한 인수입니다. 이것이 제공되지 않으면 도커 이미지의 CMD가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.command": "진입 점 배열. 셸 내에서 실행되지 않습니다. 이것이 제공되지 않으면 도커 이미지의 ENTRYPOINT가 사용됩니다. 변수 참조 $ (VAR_NAME)은 컨테이너의 환경을 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.email": "이메일은 이메일을 보냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.email.properties.content": "이메일 내용",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.email.properties.isHtml": "IsHTML은 그것이 html 콘텐츠인지 설명합니다. 기본값은 거짓입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.email.properties.receivers": "수신자는 이메일 수신자 목록입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.email.properties.title": "이메일 제목",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env": "컨테이너에 설정할 환경 변수 목록입니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items": "EnvVar는 컨테이너에있는 환경 변수를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.name": "환경 변수의 이름입니다. C_IDENTIFIER 여야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.value": "변수 참조 $ (VAR_NAME)은 컨테이너에서 이전에 정의 된 환경 변수와 서비스 환경 변수를 사용하여 확장됩니다. 변수를 확인할 수없는 경우 입력 문자열의 참조는 변경되지 않습니다. $ (VAR_NAME) 구문은 이중 $$ (예 : $$ (VAR_NAME))로 이스케이프 될 수 있습니다. 이스케이프 된 참조는 변수의 존재 여부에 관계없이 확장되지 않습니다. 기본값은 &quot;&quot;입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom": "환경 변수 값의 소스입니다. 값이 비어 있지 않으면 사용할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef": "ConfigMap의 키를 선택합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.key": "선택할 키입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom.properties.configMapKeyRef.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom.properties.fieldRef": "pod의 필드를 선택합니다 : supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory 및 requests.ephemeral-storage) 만 지원됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom.properties.secretKeyRef": "포드의 네임 스페이스에서 비밀 키를 선택합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.key": "선택할 비밀 키입니다. 유효한 비밀 키 여야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.env.items.properties.valueFrom.properties.secretKeyRef.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.envFrom": "컨테이너에서 환경 변수를 채울 소스 목록입니다. 소스 내에 정의 된 키는 C_IDENTIFIER 여야합니다. 모든 잘못된 키는 컨테이너가 시작될 때 이벤트로보고됩니다. 키가 여러 소스에있는 경우 마지막 소스와 연관된 값이 우선합니다. 중복 키가있는 Env에서 정의한 값이 우선합니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.envFrom.items": "EnvFromSource는 ConfigMap 세트의 소스를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.envFrom.items.properties.configMapRef": "선택할 ConfigMap",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.envFrom.items.properties.configMapRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.envFrom.items.properties.configMapRef.properties.optional": "ConfigMap을 정의해야하는지 여부 지정",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.envFrom.items.properties.prefix": "ConfigMap의 각 키 앞에 추가 할 선택적 식별자입니다. C_IDENTIFIER 여야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.envFrom.items.properties.secretRef": "선택할 수있는 비밀",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.envFrom.items.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.envFrom.items.properties.secretRef.properties.optional": "비밀을 정의해야하는지 여부 지정",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.image": "Docker 이미지 이름. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images이 필드는 더 높은 수준의 구성 관리가 Deployments 및 StatefulSets와 같은 워크로드 컨트롤러의 컨테이너 이미지를 기본값으로 설정하거나 재정의하도록 허용하는 선택 사항입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.imagePullPolicy": "이미지 가져 오기 정책. Always, Never, IfNotPresent 중 하나입니다. : latest 태그가 지정되면 기본값은 항상이고 그렇지 않으면 IfNotPresent입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/images#updating-images",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle": "컨테이너 수명주기 이벤트에 대한 응답으로 관리 시스템이 취해야하는 작업입니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.postStart": "PostStart는 컨테이너가 생성 된 직후에 호출됩니다. 핸들러가 실패하면 컨테이너는 다시 시작 정책에 따라 종료되고 다시 시작됩니다. 후크가 완료 될 때까지 컨테이너의 다른 관리가 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.postStart.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.postStart.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.postStart.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.postStart.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.postStart.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.preStop": "PreStop은 API 요청 또는 활성 / 시작 프로브 실패, 선점, 리소스 경합 등과 같은 관리 이벤트로 인해 컨테이너가 종료되기 직전에 호출됩니다. 컨테이너가 충돌하거나 종료되면 핸들러가 호출되지 않습니다. 종료 이유는 핸들러에 전달됩니다. Pod의 종료 유예 기간 카운트 다운은 후크 된 PreStop이 실행되기 전에 시작됩니다. 핸들러의 결과에 관계없이 컨테이너는 결국 포드의 종료 유예 기간 내에 종료됩니다. 컨테이너의 다른 관리는 후크가 완료되거나 종료 유예 기간에 도달 할 때까지 차단됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.preStop.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.preStop.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.preStop.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.preStop.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.lifecycle.properties.preStop.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe": "컨테이너 활성도를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 다시 시작됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.livenessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.name": "DNS_LABEL로 지정된 컨테이너의 이름입니다. 포드의 각 컨테이너에는 고유 한 이름 (DNS_LABEL)이 있어야합니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification": "알림은 성공 / 실패시 알림을 보냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onFailure": "OnFailure는 작업이 실패 할 때 알림",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onFailure.properties.email": "이메일은 이메일을 보냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onFailure.properties.email.properties.content": "이메일 내용",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onFailure.properties.email.properties.isHtml": "IsHTML은 그것이 html 콘텐츠인지 설명합니다. 기본값은 거짓입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onFailure.properties.email.properties.receivers": "수신자는 이메일 수신자 목록입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onFailure.properties.email.properties.title": "이메일 제목",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onFailure.properties.slack": "슬랙은 슬랙을 보냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onFailure.properties.slack.properties.message": "메시지는 웹훅으로 전송되는 메시지입니다. 마크 다운 형식이어야합니다. IntegrationJob의 이름과 작업 이름에 각각 $ INTEGRATION_JOB_NAME 및 $ JOB_NAME 변수를 사용할 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onFailure.properties.slack.properties.url": "URL은 Slack 앱의 웹훅 URL입니다. https://api.slack.com/messaging/webhooks를 참조하세요.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onSuccess": "OnSuccess는 작업이 성공하면 알립니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onSuccess.properties.email": "이메일은 이메일을 보냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onSuccess.properties.email.properties.content": "이메일 내용",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onSuccess.properties.email.properties.isHtml": "IsHTML은 그것이 html 콘텐츠인지 설명합니다. 기본값은 거짓입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onSuccess.properties.email.properties.receivers": "수신자는 이메일 수신자 목록입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onSuccess.properties.email.properties.title": "이메일 제목",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onSuccess.properties.slack": "슬랙은 슬랙을 보냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onSuccess.properties.slack.properties.message": "메시지는 웹훅으로 전송되는 메시지입니다. 마크 다운 형식이어야합니다. IntegrationJob의 이름과 작업 이름에 각각 $ INTEGRATION_JOB_NAME 및 $ JOB_NAME 변수를 사용할 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.notification.properties.onSuccess.properties.slack.properties.url": "URL은 Slack 앱의 웹훅 URL입니다. https://api.slack.com/messaging/webhooks를 참조하세요.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.ports": "컨테이너에서 노출 할 포트 목록입니다. 여기에 포트를 노출하면 컨테이너가 사용하는 네트워크 연결에 대한 추가 정보가 시스템에 제공되지만 주로 정보 제공 용입니다. 여기에 포트를 지정하지 않아도 해당 포트가 노출되는 것을 방지 할 수 없습니다. 컨테이너 내부의 기본 &quot;0.0.0.0&quot;주소에서 수신하는 모든 포트는 네트워크에서 액세스 할 수 있습니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.ports.items": "ContainerPort는 단일 컨테이너의 네트워크 포트를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.ports.items.properties.containerPort": "포드의 IP 주소에 노출 할 포트 수입니다. 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.ports.items.properties.hostIP": "외부 포트를 바인딩 할 호스트 IP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.ports.items.properties.hostPort": "호스트에서 노출 할 포트 수입니다. 지정된 경우 유효한 포트 번호 (0 &lt;x &lt;65536) 여야합니다. HostNetwork가 지정된 경우 ContainerPort와 일치해야합니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.ports.items.properties.name": "지정된 경우 IANA_SVC_NAME이어야하며 포드 내에서 고유해야합니다. 포드의 명명 된 각 포트에는 고유 한 이름이 있어야합니다. 서비스에서 참조 할 수있는 포트의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.ports.items.properties.protocol": "포트 프로토콜. UDP, TCP 또는 SCTP 여야합니다. 기본값은 &quot;TCP&quot;입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe": "컨테이너 서비스 준비 상태를 주기적으로 조사합니다. 프로브가 실패하면 컨테이너가 서비스 엔드 포인트에서 제거됩니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.readinessProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.resources": "이 컨테이너에 필요한 컴퓨팅 리소스입니다. 업데이트 할 수 없습니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.script": "스크립트는 컨테이너의 명령을 무시합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext": "포드를 실행해야하는 보안 옵션입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/security-context/ 추가 정보 : https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.allowPrivilegeEscalation": "AllowPrivilegeEscalation은 프로세스가 상위 프로세스보다 더 많은 권한을 얻을 수 있는지 여부를 제어합니다. 이 부울은 컨테이너 프로세스에 no_new_privs 플래그가 설정되는지 여부를 직접 제어합니다. 컨테이너가 다음과 같은 경우 AllowPrivilegeEscalation은 항상 true입니다. 1) 권한이있는 상태로 실행 2) CAP_SYS_ADMIN이 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.capabilities": "컨테이너를 실행할 때 추가 / 삭제할 수있는 기능입니다. 기본값은 컨테이너 런타임에서 부여한 기본 기능 집합입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.capabilities.properties.add": "추가 된 기능",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.capabilities.properties.add.items": "기능은 POSIX 기능 유형을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.capabilities.properties.drop": "제거 된 기능",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.capabilities.properties.drop.items": "기능은 POSIX 기능 유형을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.privileged": "권한 모드에서 컨테이너를 실행합니다. 권한있는 컨테이너의 프로세스는 기본적으로 호스트의 루트와 동일합니다. 기본값은 false입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.procMount": "procMount는 컨테이너에 사용할 proc 마운트 유형을 나타냅니다. 기본값은 읽기 전용 경로 및 마스크 된 경로에 컨테이너 런타임 기본값을 사용하는 DefaultProcMount입니다. 이를 위해서는 ProcMountType 기능 플래그를 활성화해야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.readOnlyRootFilesystem": "이 컨테이너에 읽기 전용 루트 파일 시스템이 있는지 여부. 기본값은 거짓입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. true 인 경우 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너 시작에 실패하는지 확인합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.seLinuxOptions": "컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 PodSecurityContext의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.skipCheckout": "SkipCheckout은 전에 git에서 체크 아웃할지 여부를 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.slack": "슬랙은 슬랙을 보냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.slack.properties.message": "메시지는 웹훅으로 전송되는 메시지입니다. 마크 다운 형식이어야합니다. IntegrationJob의 이름과 작업 이름에 각각 $ INTEGRATION_JOB_NAME 및 $ JOB_NAME 변수를 사용할 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.slack.properties.url": "URL은 Slack 앱의 웹훅 URL입니다. https://api.slack.com/messaging/webhooks를 참조하세요.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe": "StartupProbe는 포드가 성공적으로 초기화되었음을 나타냅니다. 지정되면 성공적으로 완료 될 때까지 다른 프로브가 실행되지 않습니다. 이 프로브가 실패하면 livenessProbe가 실패한 것처럼 포드가 다시 시작됩니다. 이는 안정적인 상태 작업 중보 다 데이터를로드하거나 캐시를 워밍하는 데 시간이 오래 걸릴 수있는 포드 수명주기의 시작 부분에 다른 프로브 매개 변수를 제공하는 데 사용할 수 있습니다. 업데이트 할 수 없습니다. 이것은 StartupProbe 기능 플래그로 활성화 된 베타 기능입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.exec": "다음 중 하나만 지정해야합니다. Exec은 수행 할 작업을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.exec.properties.command": "Command는 컨테이너 내부에서 실행할 명령 줄이며 명령의 작업 디렉토리는 컨테이너 파일 시스템의 루트 ( &#39;/&#39;)입니다. 명령은 단순히 실행되고 쉘 내에서 실행되지 않으므로 전통적인 쉘 명령 ( &#39;|&#39;등)이 작동하지 않습니다. 셸을 사용하려면 해당 셸을 명시 적으로 호출해야합니다. 종료 상태 0은 라이브 / 정상으로 처리되고 0이 아닌 경우 비정상입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.failureThreshold": "성공한 후 실패한 것으로 간주되는 프로브의 최소 연속 실패입니다. 기본값은 3입니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.httpGet": "HTTPGet은 수행 할 http 요청을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.httpGet.properties.host": "연결할 호스트 이름, 기본값은 포드 IP입니다. 대신 httpHeaders에 &quot;Host&quot;를 설정하고 싶을 것입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.httpGet.properties.httpHeaders": "요청에 설정할 사용자 지정 헤더입니다. HTTP는 반복되는 헤더를 허용합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items": "HTTPHeader는 HTTP 프로브에서 사용할 사용자 정의 헤더를 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.name": "헤더 필드 이름",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.httpGet.properties.httpHeaders.items.properties.value": "헤더 필드 값",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.httpGet.properties.path": "HTTP 서버에서 액세스 할 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.httpGet.properties.port": "컨테이너에서 액세스 할 포트의 이름 또는 번호입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.httpGet.properties.scheme": "호스트에 연결하는 데 사용할 체계입니다. 기본값은 HTTP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.initialDelaySeconds": "컨테이너가 시작된 후 활성 상태 프로브가 시작되기 전까지의 시간 (초)입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.periodSeconds": "프로브를 수행하는 빈도 (초). 기본값은 10 초입니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.successThreshold": "실패한 후 성공한 것으로 간주되는 프로브의 최소 연속 성공입니다. 기본값은 1입니다. 활성화 및 시작을 위해서는 1이어야합니다. 최소값은 1입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.tcpSocket": "TCPSocket은 TCP 포트와 관련된 작업을 지정합니다. 아직 지원되지 않는 TCP 후크 TODO : 현실적인 TCP 라이프 사이클 후크 구현",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.tcpSocket.properties.host": "선택 사항 : 연결할 호스트 이름, 기본값은 포드 IP입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.tcpSocket.properties.port": "컨테이너에서 액세스 할 포트의 번호 또는 이름입니다. 번호는 1에서 65535 사이 여야합니다. 이름은 IANA_SVC_NAME이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.startupProbe.properties.timeoutSeconds": "프로브가 시간 초과되는 시간 (초)입니다. 기본값은 1 초입니다. 최소값은 1입니다. 추가 정보 : https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.stdin": "이 컨테이너가 컨테이너 런타임에서 stdin 용 버퍼를 할당해야하는지 여부입니다. 이것이 설정되지 않은 경우 컨테이너의 stdin에서 읽기는 항상 EOF가됩니다. 기본값은 거짓입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.stdinOnce": "컨테이너 런타임이 단일 연결로 열린 후 stdin 채널을 닫아야하는지 여부입니다. stdin이 참이면 stdin 스트림은 여러 연결 세션에서 열린 상태로 유지됩니다. stdinOnce가 true로 설정된 경우 stdin은 컨테이너 시작시 열리고 첫 번째 클라이언트가 stdin에 연결될 때까지 비어 있으며 클라이언트가 연결 해제 될 때까지 열린 상태로 데이터를 수락합니다. 이때 stdin이 닫히고 컨테이너가 다시 시작될 때까지 닫혀 있습니다. . 이 플래그가 false이면 stdin에서 읽는 컨테이너 프로세스는 EOF를 수신하지 않습니다. 기본값은 거짓입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask": "TektonTask는 로컬 작업 또는 tekton 카탈로그 github repo에 등록 된 작업을 참조하기위한 것입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.params": "매개 변수는 작업에 대한 입력 매개 변수입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.params.items": "TektonTaskParam은 tekton의 매개 변수를 복제합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources": "리소스는 작업에 대한 입력 / 출력 리소스입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.inputs": "입력은이 태스크가 호출 된 입력 자원을 보유합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items": "TaskResourceBinding은 Name이라는 태스크 입력 또는 출력에 사용될 PipelineResource를 가리 킵니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.name": "Name은 파이프 라인 선언에있는 PipelineResource의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.paths": "경로는 # 1284에서 제거 된 다음 PipelineResourceBinding을 대신 사용할 수 있습니다. 선택적 경로 필드는 리소스를 찾을 수있는 디스크의 경로에 해당합니다 (마운트 된 볼륨을 통해 리소스를 제공 할 때 사용되며 리소스를 가져 오는 기본 논리를 재정의).",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceRef": "ResourceRef는 사용해야하는 실제 PipelineResource의 인스턴스에 대한 참조입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceRef.properties.apiVersion": "리퍼 런트의 API 버전",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceRef.properties.name": "대상자의 이름; 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceSpec": "ResourceSpec은 작업에서 생성하고 소비해야하는 리소스의 사양입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceSpec.properties.description": "설명은 UI를 채우는 데 사용할 수있는 리소스에 대한 사용자 용 설명입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceSpec.properties.params.items": "ResourceParam은 Name이라는 매개 변수에 사용할 문자열 값을 선언하며 PipelineResources의 특정 컨텍스트에서 사용됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceSpec.properties.secrets": "일부 리소스 필드를 채우기 위해 가져올 비밀",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.inputs.items.properties.resourceSpec.properties.secrets.items": "SecretParam은 리소스의 필드를 채우는 데 사용할 수있는 비밀을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.outputs": "출력은이 태스크가 호출 된 입력 자원을 보유합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items": "TaskResourceBinding은 Name이라는 태스크 입력 또는 출력에 사용될 PipelineResource를 가리 킵니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.name": "Name은 파이프 라인 선언에있는 PipelineResource의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.paths": "경로는 # 1284에서 제거 된 다음 PipelineResourceBinding을 대신 사용할 수 있습니다. 선택적 경로 필드는 리소스를 찾을 수있는 디스크의 경로에 해당합니다 (마운트 된 볼륨을 통해 리소스를 제공 할 때 사용되며 리소스를 가져 오는 기본 논리를 재정의).",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceRef": "ResourceRef는 사용해야하는 실제 PipelineResource의 인스턴스에 대한 참조입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceRef.properties.apiVersion": "리퍼 런트의 API 버전",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceRef.properties.name": "대상자의 이름; 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceSpec": "ResourceSpec은 작업에서 생성하고 소비해야하는 리소스의 사양입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceSpec.properties.description": "설명은 UI를 채우는 데 사용할 수있는 리소스에 대한 사용자 용 설명입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceSpec.properties.params.items": "ResourceParam은 Name이라는 매개 변수에 사용할 문자열 값을 선언하며 PipelineResources의 특정 컨텍스트에서 사용됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceSpec.properties.secrets": "일부 리소스 필드를 채우기 위해 가져올 비밀",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.resources.properties.outputs.items.properties.resourceSpec.properties.secrets.items": "SecretParam은 리소스의 필드를 채우는 데 사용할 수있는 비밀을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.taskRef": "TaskRef는 로컬 클러스터의 기존 태스크 또는 tekton 카탈로그 github 저장소를 참조합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.taskRef.properties.catalog": "Catalog는 작업 @ tekton catalog github repo의 이름입니다. (예 : s2i@0.2) FYI : https://github.com/tektoncd/catalog",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.taskRef.properties.local": "로컬은 로컬 작업 / 클러스터 작업을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.taskRef.properties.local.properties.apiVersion": "리퍼 런트의 API 버전",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.taskRef.properties.local.properties.bundle": "Tekton 번들에 대한 번들 URL 참조입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.taskRef.properties.local.properties.kind": "TaskKind는 작업의 종류 (네임 스페이스 또는 클러스터 범위)를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.taskRef.properties.local.properties.name": "대상자의 이름; 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.workspaces": "작업 공간은 작업을위한 작업 공간입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.workspaces.items": "WorkspacePipelineTaskBinding은 파이프 라인으로 전달 된 작업 영역을 작업의 선언 된 작업 영역에 매핑하는 방법을 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.workspaces.items.properties.name": "이름은 작업에서 선언 한 작업 공간의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.workspaces.items.properties.subPath": "SubPath는 선택적으로이 바인딩에 사용해야하는 볼륨의 디렉토리입니다 (예 : 볼륨이이 하위 디렉토리에 마운트 됨).",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tektonTask.properties.workspaces.items.properties.workspace": "작업 공간은 파이프 라인에서 선언 한 작업 공간의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.terminationMessagePath": "선택 사항 : 컨테이너의 종료 메시지가 기록 될 파일이 컨테이너의 파일 시스템에 마운트되는 경로입니다. 작성된 메시지는 어설 션 실패 메시지와 같은 간단한 최종 상태를 나타 내기위한 것입니다. 4096 바이트보다 크면 노드에서 잘립니다. 모든 컨테이너의 총 메시지 길이는 12KB로 제한됩니다. 기본값은 / dev / termination-log입니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.terminationMessagePolicy": "종료 메시지를 채우는 방법을 나타냅니다. 파일은 종료 메시지 경로의 내용을 사용하여 성공 및 실패에 대한 컨테이너 상태 메시지를 채 웁니다. FallbackToLogsOnError는 종료 메시지 파일이 비어 있고 컨테이너가 오류와 함께 종료 된 경우 컨테이너 로그 출력의 마지막 청크를 사용합니다. 로그 출력은 2048 바이트 또는 80 행 중 더 작은 행으로 제한됩니다. 기본값은 파일입니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.tty": "이 컨테이너가 자체적으로 TTY를 할당해야하는지 여부도 &#39;stdin&#39;이 true 여야합니다. 기본값은 거짓입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.volumeDevices": "volumeDevices는 컨테이너에서 사용할 블록 장치 목록입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.volumeDevices.items": "volumeDevice는 컨테이너 내의 원시 블록 장치 매핑을 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.volumeDevices.items.properties.devicePath": "devicePath는 장치가 매핑 될 컨테이너 내부의 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.volumeDevices.items.properties.name": "이름은 포드에있는 PersistentVolumeClaim의 이름과 일치해야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.volumeMounts": "컨테이너의 파일 시스템에 마운트 할 포드 볼륨. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.volumeMounts.items": "VolumeMount는 컨테이너 내의 볼륨 마운트를 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.volumeMounts.items.properties.mountPath": "볼륨을 마운트해야하는 컨테이너 내의 경로입니다. &#39;:&#39;을 포함하지 않아야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.volumeMounts.items.properties.mountPropagation": "mountPropagation은 마운트가 호스트에서 컨테이너로 전파되는 방식과 그 반대의 방식을 결정합니다. 설정되지 않은 경우 MountPropagationNone이 사용됩니다. 이 필드는 1.10의 베타 버전입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.volumeMounts.items.properties.name": "이것은 볼륨의 이름과 일치해야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.volumeMounts.items.properties.readOnly": "true 인 경우 읽기 전용으로 마운트되고 그렇지 않으면 읽기-쓰기로 마운트됩니다 (false 또는 지정되지 않음). 기본값은 false입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.volumeMounts.items.properties.subPath": "컨테이너의 볼륨이 마운트되어야하는 볼륨 내의 경로입니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.volumeMounts.items.properties.subPathExpr": "컨테이너의 볼륨을 마운트해야하는 볼륨 내의 확장 된 경로입니다. SubPath와 유사하게 작동하지만 환경 변수 참조 $ (VAR_NAME)는 컨테이너의 환경을 사용하여 확장됩니다. 기본값은 &quot;&quot;(볼륨의 루트)입니다. SubPathExpr 및 SubPath는 상호 배타적입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.when": "작업 실행 조건은 언제입니까?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.jobs.properties.preSubmit.items.properties.workingDir": "컨테이너의 작업 디렉토리. 지정하지 않으면 컨테이너 런타임의 기본값이 사용되며 이는 컨테이너 이미지에서 구성 될 수 있습니다. 업데이트 할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.mergeConfig": "MergeConfig는 PR 병합을 자동화하는 방법을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.mergeConfig.properties.commitTemplate": "CommitTemplate은 병합 커밋을위한 메시지 템플릿입니다. 커밋 메시지는 git.PullRequest 객체를 사용하여 go 템플릿으로 컴파일됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.mergeConfig.properties.method": "방법은 병합 방법입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.mergeConfig.properties.query": "쿼리는 열린 PR이 병합되는 조건입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.mergeConfig.properties.query.properties.approveRequired": "ApproveRequired는 github / gitlab의 승인 여부를 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.mergeConfig.properties.query.properties.authors": "저자는 PR의 필수 저자를 병합하도록 지정합니다. Authors 및 SkipAuthors는 상호 배타적입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.mergeConfig.properties.query.properties.blockLabels": "BlockLabels는 병합을 위해 차단할 PR의 필수 레이블을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.mergeConfig.properties.query.properties.branches": "분기는 병합 할 PR의 필수 기본 분기를 지정합니다. 분기와 SkipBranches는 상호 배타적입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.mergeConfig.properties.query.properties.checks": "수표는 PR을 병합하기 위해 통과해야하는 수표입니다. Checks 및 OptionalChecks는 상호 배타적입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.mergeConfig.properties.query.properties.labels": "레이블은 병합 할 PR의 필수 레이블을 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.mergeConfig.properties.query.properties.optionalChecks": "OptionalChecks는 필요하지 않은 검사입니다. Checks 및 OptionalChecks는 상호 배타적입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.mergeConfig.properties.query.properties.skipAuthors": "SkipAuthors는 병합 작성자를 위해 차단할 PR의 필수 작성자를 지정하고 SkipAuthors는 상호 배타적입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.mergeConfig.properties.query.properties.skipBranches": "SkipBranches는 병합 분기에 대해 차단할 PR의 필수 기본 분기를 지정하고 SkipBranches는 상호 배타적입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate": "TaskRun 포드에 대한 PodTemplate입니다. tekton의 포드 템플릿과 동일합니다. https://github.com/tektoncd/pipeline/blob/master/docs/podtemplates.md를 참조하십시오.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity": "지정된 경우 포드의 예약 제약",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity": "포드에 대한 노드 선호도 예약 규칙을 설명합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 어피 니티 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 노드가 대응하는 matchExpressions와 일치하면 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "빈 선호 스케줄링 용어는 암시 적 가중치가 0 인 모든 개체와 일치합니다 (즉, 작동하지 않음). null 선호 스케줄링 용어는 객체와 일치하지 않습니다 (즉, 작동하지 않음).",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference": "해당 가중치와 관련된 노드 선택기 용어입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.preference.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위의 해당 nodeSelectorTerm 일치와 관련된 가중치입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms": "필수입니다. 노드 선택기 용어 목록입니다. 용어는 OR로 연결됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items": "null 또는 빈 노드 선택기 용어는 개체와 일치하지 않습니다. 이들의 요구 사항은 AND입니다. TopologySelectorTerm 유형은 NodeSelectorTerm의 하위 집합을 구현합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions": "노드 라벨 별 노드 선택기 요구 사항 목록입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchExpressions.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields": "노드 필드 별 노드 선택기 요구 사항 목록입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items": "노드 선택기 요구 사항은 값, 키 및 키와 값과 관련된 연산자를 포함하는 선택기입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.key": "선택기가 적용되는 레이블 키입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.operator": "값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists, DoesNotExist입니다. Gt 및 Lt.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.nodeAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.properties.nodeSelectorTerms.items.properties.matchFields.items.properties.values": "문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 연산자가 Gt 또는 Lt 인 경우 값 배열에는 정수로 해석되는 단일 요소가 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity": "포드 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 배치).",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 어피 니티 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 선호도 표현식 등)을 충족하는 각 노드에 대해이 필드의 요소를 반복하여 합계를 계산합니다. 노드가 대응하는 podAffinityTerm과 일치하는 포드를 갖는 경우 합계에 &quot;가중치&quot;를 추가하는 단계; 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치되거나 (선호도) 배치되지 않아야합니다 (반 선호도). 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위에서 해당 podAffinityTerm 일치와 관련된 가중치.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 선호도 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 선호도 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치되거나 (선호도) 배치되지 않아야합니다 (반 선호도). 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity": "포드 반 선호도 스케줄링 규칙을 설명합니다 (예 :이 포드를 다른 포드와 동일한 노드, 영역 등에 두지 않음).",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution": "스케줄러는이 필드에 지정된 반친 화성 표현식을 충족하는 노드에 포드를 예약하는 것을 선호하지만 하나 이상의 표현식을 위반하는 노드를 선택할 수 있습니다. 가장 선호되는 노드는 가중치의 합계가 가장 큰 노드입니다. 즉, 모든 스케줄링 요구 사항 (리소스 요청, requiredDuringScheduling 반친 화성 표현식 등)을 충족하는 각 노드에 대해 다음 요소를 반복하여 합계를 계산합니다. 이 필드와 노드에 해당 podAffinityTerm과 일치하는 포드가있는 경우 합계에 &quot;weight&quot;를 추가합니다. 합계가 가장 높은 노드가 가장 선호됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items": "가장 선호하는 노드를 찾기 위해 일치하는 모든 WeightedPodAffinityTerm 필드의 가중치가 노드별로 추가됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm": "필수입니다. 해당 가중치와 관련된 포드 선호도 용어입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.podAffinityTerm.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치되거나 (선호도) 배치되지 않아야합니다 (반 선호도). 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.preferredDuringSchedulingIgnoredDuringExecution.items.properties.weight": "1-100 범위에서 해당 podAffinityTerm 일치와 관련된 가중치.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution": "이 필드에 지정된 반친 화성 요구 사항이 예약 시간에 충족되지 않으면 포드가 노드에 예약되지 않습니다. 이 필드에 지정된 반친 화성 요구 사항이 포드 실행 중 (예 : 포드 레이블 업데이트로 인해) 어느 시점에서 충족되지 않으면 시스템은 결국 노드에서 포드를 제거하려고 시도 할 수도 있고 그렇지 않을 수도 있습니다. 요소가 여러 개인 경우 각 podAffinityTerm에 해당하는 노드 목록이 교차됩니다. 즉, 모든 용어가 충족되어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items": "이 포드가 함께 배치되어야하거나 (친 화성) 함께 배치되지 않아야하는 (선호도 방지) 포드 집합 (즉, 주어진 네임 스페이스에 대해 labelSelector와 일치하는 포드)을 정의합니다. 여기서 co-located는 다음과 같이 정의됩니다. 키가있는 레이블 값을 가진 노드에서 실행<topologyKey> 포드 집합의 포드가 실행중인 모든 노드의 노드와 일치합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector": "리소스 집합 (이 경우 pod)에 대한 라벨 쿼리입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.labelSelector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.namespaces": "namespaces는 labelSelector가 적용되는 (일치하는) 네임 스페이스를 지정합니다. null 또는 빈 목록은 &quot;이 포드의 네임 스페이스&quot;를 의미합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.affinity.properties.podAntiAffinity.properties.requiredDuringSchedulingIgnoredDuringExecution.items.properties.topologyKey": "이 포드는 지정된 네임 스페이스의 labelSelector와 일치하는 포드와 함께 배치되거나 (선호도) 배치되지 않아야합니다 (반 선호도). 여기서 co-located는 레이블 값이 key topologyKey 인 노드에서 실행되는 것으로 정의됩니다. 선택한 포드가 실행중인 노드의 노드와 일치합니다. 빈 topologyKey는 허용되지 않습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.automountServiceAccountToken": "AutomountServiceAccountToken은이 서비스 계정으로 실행되는 포드에 API 토큰이 자동으로 마운트되어야하는지 여부를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.dnsConfig": "포드의 DNS 매개 변수를 지정합니다. 여기에 지정된 매개 변수는 DNSPolicy를 기반으로 생성 된 DNS 구성에 병합됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.dnsConfig.properties.nameservers": "DNS 이름 서버 IP 주소 목록입니다. 이는 DNSPolicy에서 생성 된 기본 네임 서버에 추가됩니다. 중복 된 네임 서버는 제거됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.dnsConfig.properties.options": "DNS 확인자 옵션 목록입니다. 이것은 DNSPolicy에서 생성 된 기본 옵션과 병합됩니다. 중복 된 항목은 제거됩니다. 옵션에 제공된 해결 옵션은 기본 DNSPolicy에 표시되는 옵션보다 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.dnsConfig.properties.options.items": "PodDNSConfigOption은 포드의 DNS 확인자 옵션을 정의합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.dnsConfig.properties.options.items.properties.name": "필수입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.dnsConfig.properties.searches": "호스트 이름 조회를위한 DNS 검색 도메인 목록입니다. 이는 DNSPolicy에서 생성 된 기본 검색 경로에 추가됩니다. 중복 된 검색 경로는 제거됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.dnsPolicy": "포드에 대한 DNS 정책을 설정합니다. 기본값은 &quot;ClusterFirst&quot;입니다. 유효한 값은 &#39;ClusterFirst&#39;, &#39;Default&#39;또는 &#39;None&#39;입니다. DNSConfig에 제공된 DNS 매개 변수는 DNSPolicy로 선택한 정책과 병합됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.enableServiceLinks": "EnableServiceLinks는 서비스에 대한 정보를 Docker 링크의 구문과 일치하는 포드의 환경 변수에 삽입해야하는지 여부를 나타냅니다. 선택 사항 : 기본값은 true입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.hostNetwork": "HostNetwork는 포드가 노드 네트워크 네임 스페이스를 사용할 수 있는지 여부를 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.imagePullSecrets": "ImagePullSecrets는 지정된 경우 이미지를 가져 오기 위해 포드에서 사용하는 암호의 이름을 제공합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.imagePullSecrets.items": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.imagePullSecrets.items.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.nodeSelector": "NodeSelector는 포드가 노드에 맞도록 true 여야하는 선택기입니다. 포드가 해당 노드에서 예약되도록하려면 노드의 라벨과 일치해야하는 선택기입니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.priorityClassName": "지정된 경우 포드의 우선 순위를 나타냅니다. &quot;system-node-critical&quot;및 &quot;system-cluster-critical&quot;은 가장 높은 우선 순위를 나타내는 두 개의 특수 키워드이며 전자가 가장 높은 우선 순위입니다. 다른 이름은 해당 이름으로 PriorityClass 개체를 만들어 정의해야합니다. 지정되지 않은 경우 포드 우선 순위는 기본값이되고 기본값이 없으면 0이됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.runtimeClassName": "RuntimeClassName은 node.k8s.io 그룹의 RuntimeClass 객체를 참조하며이 pod를 실행하는 데 사용해야합니다. RuntimeClass 리소스가 명명 된 클래스와 일치하지 않으면 포드가 실행되지 않습니다. 설정되지 않거나 비어있는 경우 기본 런타임 핸들러를 사용하는 비어있는 정의가있는 암시 적 클래스 인 &quot;레거시&quot;RuntimeClass가 사용됩니다. 추가 정보 : https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md 이것은 Kubernetes v1.14의 베타 기능입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.schedulerName": "SchedulerName은 Pod를 디스패치하는 데 사용할 스케줄러를 지정합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext": "SecurityContext는 팟 (Pod) 레벨 보안 속성 및 공통 컨테이너 설정을 보유합니다. 옵션 : 기본값은 비어 있습니다. 각 필드의 기본값은 유형 설명을 참조하십시오.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.fsGroup": "포드의 모든 컨테이너에 적용되는 특수 보조 그룹입니다. 일부 볼륨 유형은 Kubelet이 포드가 소유 할 해당 볼륨의 소유권을 변경할 수 있도록 허용합니다. 1. 소유 GID는 FSGroup이됩니다. 2. setgid 비트가 설정됩니다 (볼륨에 생성 된 새 파일은 FSGroup이 소유 함) 3 권한 비트는 rw-rw ----와 OR로 연결됩니다. 설정되지 않은 경우 Kubelet은 볼륨의 소유권 및 권한을 수정하지 않습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.fsGroupChangePolicy": "fsGroupChangePolicy는 Pod 내부에 노출되기 전에 볼륨의 소유권 및 권한을 변경하는 동작을 정의합니다. 이 필드는 fsGroup 기반 소유권 (및 권한)을 지원하는 볼륨 유형에만 적용됩니다. secret, configmaps 및 emptydir과 같은 임시 볼륨 유형에는 영향을 미치지 않습니다. 유효한 값은 &quot;OnRootMismatch&quot;및 &quot;Always&quot;입니다. 지정하지 않으면 기본값은 &quot;항상&quot;입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.runAsGroup": "컨테이너 프로세스의 진입 점을 실행하기위한 GID입니다. 설정되지 않은 경우 런타임 기본값을 사용합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.runAsNonRoot": "컨테이너가 루트가 아닌 사용자로 실행되어야 함을 나타냅니다. true 인 경우 Kubelet은 런타임시 이미지가 UID 0 (루트)으로 실행되지 않는지 확인하고 실행중인 경우 컨테이너 시작에 실패하는지 확인합니다. 설정되지 않거나 거짓이면 이러한 유효성 검사가 수행되지 않습니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.runAsUser": "컨테이너 프로세스의 진입 점을 실행할 UID입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.seLinuxOptions": "모든 컨테이너에 적용 할 SELinux 컨텍스트입니다. 지정하지 않으면 컨테이너 런타임이 각 컨테이너에 대해 임의의 SELinux 컨텍스트를 할당합니다. SecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 해당 컨테이너에 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.seLinuxOptions.properties.level": "레벨은 컨테이너에 적용되는 SELinux 레벨 레이블입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.seLinuxOptions.properties.role": "역할은 컨테이너에 적용되는 SELinux 역할 레이블입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.seLinuxOptions.properties.type": "Type은 컨테이너에 적용되는 SELinux 유형 레이블입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.seLinuxOptions.properties.user": "User는 컨테이너에 적용되는 SELinux 사용자 레이블입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.supplementalGroups": "컨테이너의 기본 GID 외에도 각 컨테이너에서 실행되는 첫 번째 프로세스에 적용된 그룹 목록입니다. 지정하지 않으면 컨테이너에 그룹이 추가되지 않습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.sysctls": "Sysctls에는 포드에 사용되는 네임 스페이스가 지정된 sysctls 목록이 있습니다. 컨테이너 런타임에 의해 지원되지 않는 sysctls가있는 포드는 시작되지 않을 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.sysctls.items": "Sysctl은 설정할 커널 매개 변수를 정의합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.sysctls.items.properties.name": "설정할 속성의 이름",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.sysctls.items.properties.value": "설정할 속성 값",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.windowsOptions": "모든 컨테이너에 적용되는 Windows 특정 설정입니다. 지정하지 않으면 컨테이너의 SecurityContext 내의 옵션이 사용됩니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpec": "GMSACredentialSpec은 GMSA 승인 웹훅 (https://github.com/kubernetes-sigs/windows-gmsa)이 GMSACredentialSpecName 필드에 명명 된 GMSA 자격 증명 사양의 콘텐츠를 인라인하는 곳입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.windowsOptions.properties.gmsaCredentialSpecName": "GMSACredentialSpecName은 사용할 GMSA 자격 증명 사양의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.securityContext.properties.windowsOptions.properties.runAsUserName": "컨테이너 프로세스의 진입 점을 실행하기위한 Windows의 UserName입니다. 지정되지 않은 경우 기본값은 이미지 메타 데이터에 지정된 사용자입니다. PodSecurityContext에서도 설정할 수 있습니다. SecurityContext 및 PodSecurityContext 모두에 설정된 경우 SecurityContext에 지정된 값이 우선합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.tolerations": "지정된 경우 포드의 허용 오차입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.tolerations.items": "이 Toleration이 연결된 포드는 트리플과 일치하는 모든 오염을 견뎌냅니다.<key,value,effect> 일치 연산자 사용<operator> .",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.tolerations.items.properties.effect": "효과는 일치시킬 오염 효과를 나타냅니다. 비어 있음은 모든 오염 효과와 일치 함을 의미합니다. 지정된 경우 허용되는 값은 NoSchedule, PreferNoSchedule 및 NoExecute입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.tolerations.items.properties.key": "키는 관용이 적용되는 오염 키입니다. 비어 있음은 모든 오염 키와 일치 함을 의미합니다. 키가 비어 있으면 연산자가 존재해야합니다. 이 조합은 모든 값과 모든 키와 일치 함을 의미합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.tolerations.items.properties.operator": "연산자는 값에 대한 키의 관계를 나타냅니다. 유효한 연산자는 Exists 및 Equal입니다. 기본값은 Equal입니다. Exists는 값에 대한 와일드 카드와 동일하므로 포드가 특정 카테고리의 모든 taint를 허용 할 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.tolerations.items.properties.tolerationSeconds": "TolerationSeconds는 허용 범위 (NoExecute가 유효해야하며 그렇지 않으면이 필드는 무시 됨)가 taint를 허용하는 기간을 나타냅니다. 기본적으로 설정되어 있지 않으므로 오염을 영원히 견딜 수 있습니다 (제거하지 마십시오). 0 및 음수 값은 시스템에서 0 (즉시 제거)으로 처리됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.tolerations.items.properties.value": "Value는 허용치가 일치하는 오염 값입니다. 연산자가 Exists이면 값은 비어 있어야하고 그렇지 않으면 일반 문자열이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes": "포드에 속한 컨테이너로 마운트 할 수있는 볼륨 목록입니다. 자세한 정보 : https://kubernetes.io/docs/concepts/storage/volumes",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items": "볼륨은 포드의 모든 컨테이너에서 액세스 할 수있는 포드의 명명 된 볼륨을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.awsElasticBlockStore": "AWSElasticBlockStore는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 AWS 디스크 리소스를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.awsElasticBlockStore.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO : 파일 시스템의 오류가 시스템을 손상시키지 않도록 방지하는 방법",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.awsElasticBlockStore.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다).",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.awsElasticBlockStore.properties.readOnly": "VolumeMounts의 ReadOnly 속성을 &quot;true&quot;로 강제 설정하려면 &quot;true&quot;를 지정합니다. 생략하면 기본값은 &quot;false&quot;입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.awsElasticBlockStore.properties.volumeID": "AWS에있는 영구 디스크 리소스의 고유 ID (Amazon EBS 볼륨). 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.azureDisk": "AzureDisk는 호스트의 Azure 데이터 디스크 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.azureDisk.properties.cachingMode": "호스트 캐싱 모드 : 없음, 읽기 전용, 읽기 쓰기.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.azureDisk.properties.diskName": "Blob 저장소에있는 데이터 디스크의 이름",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.azureDisk.properties.diskURI": "Blob 저장소의 데이터 디스크 URI",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.azureDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.azureDisk.properties.kind": "예상 값 공유 : 스토리지 계정 당 여러 Blob 디스크 전용 : 스토리지 계정 당 단일 Blob 디스크 관리 : Azure 관리 데이터 디스크 (관리되는 가용성 집합에서만). 기본적으로 공유 됨",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.azureDisk.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.azureFile": "AzureFile은 호스트의 Azure 파일 서비스 탑재를 나타내며 탑재를 포드에 바인딩합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.azureFile.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.azureFile.properties.secretName": "Azure Storage 계정 이름 및 키가 포함 된 비밀의 이름",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.azureFile.properties.shareName": "이름 공유",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.cephfs": "CephFS는 포드의 수명을 공유하는 호스트의 Ceph FS 마운트를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.cephfs.properties.monitors": "필수 : Monitors는 Ceph 모니터 모음입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.cephfs.properties.path": "선택 사항 : 전체 Ceph 트리가 아닌 마운트 된 루트로 사용되며 기본값은 /입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.cephfs.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.cephfs.properties.secretFile": "선택 사항 : SecretFile은 사용자의 키 링 경로이며 기본값은 /etc/ceph/user.secret입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.cephfs.properties.secretRef": "선택 사항 : SecretRef는 사용자의 인증 시크릿에 대한 참조이며 기본값은 비어 있습니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.cephfs.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.cephfs.properties.user": "선택 사항 : 사용자는 rados 사용자 이름, 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.cinder": "Cinder는 kubelets 호스트 머신에 연결되고 마운트 된 cinder 볼륨을 나타냅니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.cinder.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.cinder.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.cinder.properties.secretRef": "선택 사항 : OpenStack에 연결하는 데 사용되는 매개 변수가 포함 된 비밀 개체를 가리 킵니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.cinder.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.cinder.properties.volumeID": "cinder에서 볼륨을 식별하는 데 사용되는 볼륨 ID입니다. 추가 정보 : https://examples.k8s.io/mysql-cinder-pd/README.md",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.configMap": "ConfigMap은이 볼륨을 채워야하는 configMap을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.configMap.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 사용할 모드 비트. 0에서 0777 사이의 값이어야합니다. 기본값은 0644입니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에서 사용할 모드 비트는 0에서 0777 사이의 값이어야합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.csi": "CSI (Container Storage Interface)는 외부 CSI 드라이버 (알파 기능)에서 처리하는 스토리지를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.csi.properties.driver": "Driver는이 볼륨을 처리하는 CSI 드라이버의 이름입니다. 클러스터에 등록 된 올바른 이름은 관리자에게 문의하십시오.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.csi.properties.fsType": "마운트 할 파일 시스템 유형입니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 제공되지 않으면 적용 할 기본 파일 시스템을 결정하는 관련 CSI 드라이버에 빈 값이 전달됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.csi.properties.nodePublishSecretRef": "NodePublishSecretRef는 CSI NodePublishVolume 및 NodeUnpublishVolume 호출을 완료하기 위해 CSI 드라이버에 전달할 민감한 정보가 포함 된 비밀 개체에 대한 참조입니다. 이 필드는 선택 사항이며 비밀이 필요하지 않은 경우 비어있을 수 있습니다. 비밀 개체에 둘 이상의 비밀이 포함 된 경우 모든 비밀 참조가 전달됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.csi.properties.nodePublishSecretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.csi.properties.readOnly": "볼륨에 대한 읽기 전용 구성을 지정합니다. 기본값은 false (읽기 / 쓰기)입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.csi.properties.volumeAttributes": "VolumeAttributes는 CSI 드라이버에 전달되는 드라이버 별 속성을 저장합니다. 지원되는 값은 드라이버 설명서를 참조하십시오.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.downwardAPI": "DownwardAPI는이 볼륨을 채워야하는 포드에 대한 하향 API를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.downwardAPI.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 사용할 모드 비트. 0에서 0777 사이의 값이어야합니다. 기본값은 0644입니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.downwardAPI.properties.items": "항목은 하향 API 볼륨 파일 목록입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에서 사용할 모드 비트는 0에서 0777 사이의 값이어야합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.emptyDir": "EmptyDir는 포드의 수명을 공유하는 임시 디렉터리를 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.emptyDir.properties.medium": "이 디렉토리를 백업해야하는 저장 매체 유형입니다. 기본값은 노드의 기본 매체를 사용함을 의미하는 &quot;&quot;입니다. 빈 문자열 (기본값) 또는 메모리 여야합니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.emptyDir.properties.sizeLimit": "이 EmptyDir 볼륨에 필요한 총 로컬 스토리지 양입니다. 크기 제한은 메모리 매체에도 적용됩니다. 메모리 매체 EmptyDir의 최대 사용량은 여기에 지정된 SizeLimit과 팟 (Pod)에있는 모든 컨테이너의 메모리 한계 합계 사이의 최소값입니다. 기본값은 제한이 정의되지 않았 음을 의미하는 nil입니다. 추가 정보 : http://kubernetes.io/docs/user-guide/volumes#emptydir",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.fc": "FC는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 파이버 채널 리소스를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.fc.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. TODO : 파일 시스템의 오류가 시스템을 손상시키지 않도록 방지하는 방법",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.fc.properties.lun": "선택 사항 : FC 대상 LUN 번호",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.fc.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.fc.properties.targetWWNs": "선택 사항 : FC 대상 월드 와이드 이름 (WWN)",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.fc.properties.wwids": "옵션 : FC 볼륨 월드 와이드 식별자 (wwids) wwids 또는 targetWWN과 lun의 조합을 설정해야하지만 둘 다 동시에 설정할 수는 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.flexVolume": "FlexVolume은 exec 기반 플러그인을 사용하여 프로비저닝 / 연결된 일반 볼륨 리소스를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.flexVolume.properties.driver": "Driver는이 볼륨에 사용할 드라이버의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.flexVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본 파일 시스템은 FlexVolume 스크립트에 따라 다릅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.flexVolume.properties.options": "옵션 : 추가 명령 옵션 (있는 경우).",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.flexVolume.properties.readOnly": "옵션 : 기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.flexVolume.properties.secretRef": "선택 사항 : SecretRef는 플러그인 스크립트에 전달할 민감한 정보를 포함하는 비밀 오브젝트에 대한 참조입니다. 비밀 개체가 지정되지 않은 경우 비어있을 수 있습니다. 비밀 개체에 둘 이상의 비밀이 포함 된 경우 모든 비밀이 플러그인 스크립트에 전달됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.flexVolume.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.flocker": "Flocker는 kubelet의 호스트 머신에 연결된 Flocker 볼륨을 나타냅니다. 이것은 실행중인 Flocker 제어 서비스에 따라 다릅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.flocker.properties.datasetName": "메타 데이터로 저장된 데이터 세트의 이름-&gt; Flocker 용 데이터 세트의 이름은 더 이상 사용되지 않는 것으로 간주되어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.flocker.properties.datasetUUID": "데이터 세트의 UUID입니다. 이것은 Flocker 데이터 세트의 고유 식별자입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.gcePersistentDisk": "GCEPersistentDisk는 kubelet의 호스트 머신에 연결된 후 포드에 노출되는 GCE 디스크 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.gcePersistentDisk.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO : 파일 시스템의 오류가 시스템을 손상시키는 것을 방지하는 방법",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.gcePersistentDisk.properties.partition": "마운트 할 볼륨의 파티션입니다. 생략하면 기본값은 볼륨 이름으로 마운트하는 것입니다. 예 : 볼륨 / dev / sda1의 경우 파티션을 &quot;1&quot;로 지정합니다. 마찬가지로 / dev / sda의 볼륨 파티션은 &quot;0&quot;입니다 (또는 속성을 비워 둘 수 있습니다). 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.gcePersistentDisk.properties.pdName": "GCE에있는 PD 리소스의 고유 한 이름입니다. GCE에서 디스크를 식별하는 데 사용됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.gcePersistentDisk.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.gitRepo": "GitRepo는 특정 개정판의 git 저장소를 나타냅니다. DEPRECATED : GitRepo는 더 이상 사용되지 않습니다. git 저장소로 컨테이너를 프로비저닝하려면 git을 사용하여 저장소를 복제하는 InitContainer에 EmptyDir을 마운트 한 다음 Pod의 컨테이너에 EmptyDir을 마운트합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.gitRepo.properties.directory": "대상 디렉토리 이름. &#39;..&#39;을 포함하거나 시작하지 않아야합니다. 만약 &#39;.&#39; 제공되면 볼륨 디렉토리는 git 저장소가됩니다. 그렇지 않으면 지정된 경우 볼륨은 지정된 이름의 하위 디렉토리에 git 저장소를 포함합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.gitRepo.properties.repository": "저장소 URL",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.gitRepo.properties.revision": "지정된 개정에 대한 커밋 해시입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.glusterfs": "Glusterfs는 포드의 수명을 공유하는 호스트의 Glusterfs 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.glusterfs.properties.endpoints": "EndpointsName은 Glusterfs 토폴로지를 자세히 설명하는 엔드 포인트 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.glusterfs.properties.path": "Path는 Glusterfs 볼륨 경로입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.glusterfs.properties.readOnly": "여기서 ReadOnly는 Glusterfs 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.hostPath": "HostPath는 컨테이너에 직접 노출되는 호스트 시스템의 기존 파일 또는 디렉터리를 나타냅니다. 이것은 일반적으로 호스트 시스템을 볼 수있는 시스템 에이전트 또는 기타 권한있는 항목에 사용됩니다. 대부분의 컨테이너에는 이것이 필요하지 않습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO (jonesdl) 호스트 디렉토리 마운트를 사용할 수있는 사람과 호스트 디렉토리를 읽기 / 쓰기로 마운트 할 수있는 사람을 제한해야합니다. .",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.hostPath.properties.path": "호스트의 디렉토리 경로입니다. 경로가 심볼릭 링크이면 실제 경로에 대한 링크를 따릅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.hostPath.properties.type": "HostPath 볼륨의 유형 기본값은 &quot;&quot;입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.iscsi": "ISCSI는 kubelet의 호스트 머신에 연결된 다음 포드에 노출되는 ISCSI 디스크 리소스를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/iscsi/README.md",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.iscsi.properties.chapAuthDiscovery": "iSCSI 검색 CHAP 인증 지원 여부",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.iscsi.properties.chapAuthSession": "iSCSI 세션 CHAP 인증 지원 여부",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.iscsi.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO : 파일 시스템의 오류가 시스템을 손상시키지 않도록 방지하는 방법",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.iscsi.properties.initiatorName": "사용자 지정 iSCSI 이니시에이터 이름. initiatorName이 iscsiInterface와 동시에 지정되면 새로운 iSCSI 인터페이스<target portal> :<volume name> 연결을 위해 생성됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.iscsi.properties.iqn": "대상 iSCSI 정규화 이름.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.iscsi.properties.iscsiInterface": "iSCSI 전송을 사용하는 iSCSI 인터페이스 이름입니다. 기본값은 &#39;default&#39;(tcp)입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.iscsi.properties.lun": "iSCSI 대상 LUN 번호.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.iscsi.properties.portals": "iSCSI 대상 포털 목록. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.iscsi.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.iscsi.properties.secretRef": "iSCSI 대상 및 이니시에이터 인증을위한 CHAP 암호",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.iscsi.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.iscsi.properties.targetPortal": "iSCSI 대상 포털. 포트가 기본값 (일반적으로 TCP 포트 860 및 3260)이 아닌 경우 포털은 IP 또는 ip_addr : port입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.name": "볼륨의 이름. DNS_LABEL이어야하며 포드 내에서 고유해야합니다. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.nfs": "NFS는 포드의 수명을 공유하는 호스트의 NFS 마운트를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.nfs.properties.path": "NFS 서버에서 내 보낸 경로입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.nfs.properties.readOnly": "여기서 ReadOnly는 읽기 전용 권한으로 NFS 내보내기를 강제로 마운트합니다. 기본값은 false입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.nfs.properties.server": "Server는 NFS 서버의 호스트 이름 또는 IP 주소입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.persistentVolumeClaim": "PersistentVolumeClaimVolumeSource는 동일한 네임 스페이스에있는 PersistentVolumeClaim에 대한 참조를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.persistentVolumeClaim.properties.claimName": "ClaimName은이 볼륨을 사용하는 pod와 동일한 네임 스페이스에있는 PersistentVolumeClaim의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.persistentVolumeClaim.properties.readOnly": "VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.photonPersistentDisk": "PhotonPersistentDisk는 kubelets 호스트 머신에 연결되고 마운트 된 PhotonController 영구 디스크를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.photonPersistentDisk.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.photonPersistentDisk.properties.pdID": "Photon Controller 영구 디스크를 식별하는 ID",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.portworxVolume": "PortworxVolume은 kubelets 호스트 머신에 연결되고 마운트 된 portworx 볼륨을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.portworxVolume.properties.fsType": "FSType은 마운트 할 파일 시스템 유형을 나타냅니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.portworxVolume.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.portworxVolume.properties.volumeID": "VolumeID는 Portworx 볼륨을 고유하게 식별합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected": "하나의 리소스 비밀, 구성 맵 및 하향 API에 대한 항목",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.defaultMode": "기본적으로 생성 된 파일에 사용할 모드 비트입니다. 0에서 0777 사이의 값이어야합니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources": "볼륨 예측 목록",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items": "지원되는 다른 볼륨 유형과 함께 투영 될 수있는 투영",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap": "프로젝트 할 configMap 데이터에 대한 정보",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에서 사용할 모드 비트는 0에서 0777 사이의 값이어야합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI": "프로젝트 할 downwardAPI 데이터에 대한 정보",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items": "Items는 DownwardAPIVolume 파일 목록입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items": "DownwardAPIVolumeFile은 포드 필드를 포함하는 파일을 만들기위한 정보를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef": "필수 : pod의 필드를 선택합니다. 주석, 레이블, 이름 및 네임 스페이스 만 지원됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.apiVersion": "FieldPath가 작성되는 스키마 버전이며 기본값은 &quot;v1&quot;입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.fieldRef.properties.fieldPath": "지정된 API 버전에서 선택할 필드의 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.mode": "선택 사항 :이 파일에서 사용할 모드 비트는 0에서 0777 사이의 값이어야합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.path": "필수 : 경로는 만들 파일의 상대 경로 이름입니다. 절대 경로이거나 &#39;..&#39;경로를 포함하지 않아야합니다. utf-8로 인코딩되어야합니다. 상대 경로의 첫 번째 항목은 &#39;..&#39;로 시작하면 안됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef": "컨테이너의 리소스를 선택합니다. 현재 리소스 제한 및 요청 (limits.cpu, limits.memory, requests.cpu 및 requests.memory) 만 지원됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.containerName": "컨테이너 이름 : 볼륨에는 필수, 환경 변수에는 선택 사항",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.divisor": "노출 된 자원의 출력 형식을 지정합니다. 기본값은 &quot;1&quot;입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.downwardAPI.properties.items.items.properties.resourceFieldRef.properties.resource": "필수 : 선택할 리소스",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.secret": "프로젝트 할 비밀 데이터에 대한 정보",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에서 사용할 모드 비트는 0에서 0777 사이의 값이어야합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken": "프로젝트 할 serviceAccountToken 데이터에 대한 정보",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.audience": "청중은 토큰의 의도 된 청중입니다. 토큰 수신자는 토큰 대상에 지정된 식별자로 자신을 식별해야하며 그렇지 않으면 토큰을 거부해야합니다. 대상은 기본적으로 apiserver의 식별자입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.expirationSeconds": "ExpirationSeconds는 서비스 계정 토큰의 요청 된 유효 기간입니다. 토큰이 만료에 가까워지면 kubelet 볼륨 플러그인이 사전에 서비스 계정 토큰을 교체합니다. 토큰이 수명의 80 % 이상이거나 토큰이 24 시간 이상인 경우 kubelet은 토큰 회전을 시도합니다. 기본값은 1 시간이며 최소 10 분이어야합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.projected.properties.sources.items.properties.serviceAccountToken.properties.path": "경로는 토큰을 투영 할 파일의 마운트 지점에 상대적인 경로입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.quobyte": "Quobyte는 포드의 수명을 공유하는 호스트의 Quobyte 마운트를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.quobyte.properties.group": "볼륨 액세스를 매핑 할 그룹 기본값은 그룹 없음입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.quobyte.properties.readOnly": "여기서 ReadOnly는 Quobyte 볼륨이 읽기 전용 권한으로 마운트되도록합니다. 기본값은 false입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.quobyte.properties.registry": "레지스트리는 볼륨의 중앙 레지스트리 역할을하는 호스트 : 포트 쌍 (여러 항목은 쉼표로 구분됨)으로 문자열로 지정된 단일 또는 다중 Quobyte Registry 서비스를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.quobyte.properties.tenant": "백엔드에서 주어진 Quobyte 볼륨을 소유하는 테넌트는 동적으로 프로비저닝 된 Quobyte 볼륨과 함께 사용되며 값은 플러그인에 의해 설정됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.quobyte.properties.user": "볼륨 액세스를 기본값에 매핑하는 사용자를 serivceaccount 사용자에게",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.quobyte.properties.volume": "Volume은 이미 생성 된 Quobyte 볼륨을 이름으로 참조하는 문자열입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.rbd": "RBD는 포드의 수명을 공유하는 호스트의 Rados 블록 장치 마운트를 나타냅니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.rbd.properties.fsType": "마운트 할 볼륨의 파일 시스템 유형입니다. 팁 : 파일 시스템 유형이 호스트 운영 체제에서 지원되는지 확인하십시오. 예 : &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO : 파일 시스템의 오류가 시스템을 손상시키지 않도록 방지하는 방법",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.rbd.properties.image": "라도 스 이미지 이름입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.rbd.properties.keyring": "키링은 RBDUser의 키링 경로입니다. 기본값은 / etc / ceph / keyring입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.rbd.properties.monitors": "Ceph 모니터 모음. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.rbd.properties.pool": "라도 스 풀 이름. 기본값은 rbd입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.rbd.properties.readOnly": "여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.rbd.properties.secretRef": "SecretRef는 RBDUser에 대한 인증 암호의 이름입니다. 제공된 경우 키링을 재정의합니다. 기본값은 nil입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.rbd.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.rbd.properties.user": "rados 사용자 이름입니다. 기본값은 admin입니다. 추가 정보 : https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.scaleIO": "ScaleIO는 Kubernetes 노드에 연결 및 탑재 된 ScaleIO 영구 볼륨을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.scaleIO.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 기본값은 &quot;xfs&quot;입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.scaleIO.properties.gateway": "ScaleIO API 게이트웨이의 호스트 주소입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.scaleIO.properties.protectionDomain": "구성된 스토리지에 대한 ScaleIO 보호 도메인의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.scaleIO.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.scaleIO.properties.secretRef": "SecretRef는 ScaleIO 사용자 및 기타 중요한 정보에 대한 암호를 참조합니다. 이것이 제공되지 않으면 로그인 작업이 실패합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.scaleIO.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.scaleIO.properties.sslEnabled": "게이트웨이와의 SSL 통신을 활성화 / 비활성화하는 플래그, 기본값은 false",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.scaleIO.properties.storageMode": "볼륨의 스토리지가 ThickProvisioned인지 ThinProvisioned인지 여부를 나타냅니다. 기본값은 ThinProvisioned입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.scaleIO.properties.storagePool": "보호 도메인과 연결된 ScaleIO 스토리지 풀입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.scaleIO.properties.system": "ScaleIO에 구성된 스토리지 시스템의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.scaleIO.properties.volumeName": "이 볼륨 소스와 연결된 ScaleIO 시스템에 이미 생성 된 볼륨의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.secret": "Secret은이 볼륨을 채워야하는 비밀을 나타냅니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.secret.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 사용할 모드 비트. 0에서 0777 사이의 값이어야합니다. 기본값은 0644입니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에서 사용할 모드 비트는 0에서 0777 사이의 값이어야합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.secret.properties.secretName": "사용할 팟 (Pod) 네임 스페이스의 시크릿 이름입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.storageos": "StorageOS는 Kubernetes 노드에 연결되고 마운트 된 StorageOS 볼륨을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.storageos.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.storageos.properties.readOnly": "기본값은 false (읽기 / 쓰기)입니다. 여기서 ReadOnly는 VolumeMounts에서 ReadOnly 설정을 강제합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.storageos.properties.secretRef": "SecretRef는 StorageOS API 자격 증명을 얻는 데 사용할 암호를 지정합니다. 지정하지 않으면 기본값이 시도됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.storageos.properties.secretRef.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.storageos.properties.volumeName": "VolumeName은 사람이 읽을 수있는 StorageOS 볼륨의 이름입니다. 볼륨 이름은 네임 스페이스 내에서만 고유합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.storageos.properties.volumeNamespace": "VolumeNamespace는 StorageOS 내의 볼륨 범위를 지정합니다. 네임 스페이스를 지정하지 않으면 Pod의 네임 스페이스가 사용됩니다. 이를 통해보다 긴밀한 통합을 위해 Kubernetes 이름 범위를 StorageOS 내에서 미러링 할 수 있습니다. 기본 동작을 재정의하려면 VolumeName을 임의의 이름으로 설정합니다. StorageOS 내에서 네임 스페이스를 사용하지 않는 경우 &quot;default&quot;로 설정하십시오. StorageOS 내에 존재하지 않는 네임 스페이스가 생성됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.vsphereVolume": "VsphereVolume은 kubelets 호스트 시스템에 연결되고 마운트 된 vSphere 볼륨을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.vsphereVolume.properties.fsType": "마운트 할 파일 시스템 유형입니다. 호스트 운영 체제에서 지원하는 파일 시스템 유형이어야합니다. 전의. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. 지정되지 않은 경우 암시 적으로 &quot;ext4&quot;로 추론됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyID": "StoragePolicyName과 연결된 SPBM (스토리지 정책 기반 관리) 프로필 ID입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.vsphereVolume.properties.storagePolicyName": "SPBM (스토리지 정책 기반 관리) 프로필 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.podTemplate.properties.volumes.items.properties.vsphereVolume.properties.volumePath": "vSphere 볼륨 vmdk를 식별하는 경로",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.secrets": "비밀은 서비스 계정에 포함 된 비밀 이름 목록입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.secrets.items": "LocalObjectReference에는 동일한 네임 스페이스 내에서 참조 된 개체를 찾을 수있는 충분한 정보가 포함되어 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.secrets.items.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces": "작업 공간 목록",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items": "WorkspaceBinding은 태스크의 선언 된 작업 공간을 볼륨에 매핑합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.configMap": "ConfigMap은이 작업 공간을 채워야하는 configMap을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.configMap.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 사용할 모드 비트. 0에서 0777 사이의 값이어야합니다. 기본값은 0644입니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.configMap.properties.items": "지정하지 않으면 참조 된 ConfigMap의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. ConfigMap에없는 키를 지정하면 선택 사항으로 표시되지 않는 한 볼륨 설정에서 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.configMap.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.configMap.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.configMap.properties.items.items.properties.mode": "선택 사항 :이 파일에서 사용할 모드 비트는 0에서 0777 사이의 값이어야합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.configMap.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.configMap.properties.name": "대상자의 이름. 추가 정보 : https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO : 다른 유용한 필드를 추가하십시오. apiVersion, 종류, uid?",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.configMap.properties.optional": "ConfigMap 또는 해당 키를 정의해야하는지 여부를 지정하십시오.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.emptyDir": "EmptyDir은 Task의 수명을 공유하는 임시 디렉토리를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir 이것 또는 PersistentVolumeClaim을 사용할 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.emptyDir.properties.medium": "이 디렉토리를 백업해야하는 저장 매체 유형입니다. 기본값은 노드의 기본 매체를 사용함을 의미하는 &quot;&quot;입니다. 빈 문자열 (기본값) 또는 메모리 여야합니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.emptyDir.properties.sizeLimit": "이 EmptyDir 볼륨에 필요한 총 로컬 스토리지 양입니다. 크기 제한은 메모리 매체에도 적용됩니다. 메모리 매체 EmptyDir의 최대 사용량은 여기에 지정된 SizeLimit과 팟 (Pod)에있는 모든 컨테이너의 메모리 한계 합계 사이의 최소값입니다. 기본값은 제한이 정의되지 않았 음을 의미하는 nil입니다. 추가 정보 : http://kubernetes.io/docs/user-guide/volumes#emptydir",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.name": "Name은 볼륨으로 채워진 작업 공간의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.persistentVolumeClaim": "PersistentVolumeClaimVolumeSource는 동일한 네임 스페이스에있는 PersistentVolumeClaim에 대한 참조를 나타냅니다. 이 OR EmptyDir 중 하나를 사용할 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.persistentVolumeClaim.properties.claimName": "ClaimName은이 볼륨을 사용하는 pod와 동일한 네임 스페이스에있는 PersistentVolumeClaim의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.persistentVolumeClaim.properties.readOnly": "VolumeMounts에서 ReadOnly 설정을 강제합니다. 기본값은 false입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.secret": "Secret은이 작업 공간을 채워야하는 비밀을 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.secret.properties.defaultMode": "선택 사항 : 기본적으로 생성 된 파일에 사용할 모드 비트. 0에서 0777 사이의 값이어야합니다. 기본값은 0644입니다. 경로 내의 디렉토리는이 설정의 영향을받지 않습니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.secret.properties.items": "지정하지 않으면 참조 된 보안 비밀의 데이터 필드에있는 각 키-값 쌍이 이름이 키이고 내용이 값인 파일로 볼륨에 프로젝션됩니다. 지정하면 나열된 키가 지정된 경로로 프로젝션되고 나열되지 않은 키는 표시되지 않습니다. Secret에없는 키를 지정하면 옵션으로 표시되지 않는 한 볼륨 설정에 오류가 발생합니다. 경로는 상대 경로 여야하며 &#39;..&#39;경로를 포함하거나 &#39;..&#39;로 시작할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.secret.properties.items.items": "문자열 키를 볼륨 내의 경로에 매핑합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.secret.properties.items.items.properties.key": "프로젝트의 열쇠.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.secret.properties.items.items.properties.mode": "선택 사항 :이 파일에서 사용할 모드 비트는 0에서 0777 사이의 값이어야합니다. 지정하지 않으면 볼륨 defaultMode가 사용됩니다. 이는 fsGroup과 같이 파일 모드에 영향을 미치는 다른 옵션과 충돌 할 수 있으며 결과는 다른 모드 비트 세트가 될 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.secret.properties.items.items.properties.path": "키를 매핑 할 파일의 상대 경로입니다. 절대 경로가 아닐 수 있습니다. 경로 요소 &#39;..&#39;를 포함 할 수 없습니다. &#39;..&#39;문자열로 시작할 수 없습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.secret.properties.optional": "비밀 또는 해당 키를 정의해야하는지 여부 지정",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.secret.properties.secretName": "사용할 팟 (Pod) 네임 스페이스의 시크릿 이름입니다. 더 많은 정보 : https://kubernetes.io/docs/concepts/storage/volumes#secret",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.subPath": "SubPath는 선택적으로이 바인딩에 사용해야하는 볼륨의 디렉토리입니다 (예 : 볼륨이이 하위 디렉토리에 마운트 됨).",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate": "VolumeClaimTemplate은 동일한 네임 스페이스에 생성 될 클레임에 대한 템플릿입니다. PipelineRun 컨트롤러는 PipelineRun의 각 인스턴스에 대해 고유 한 클레임을 생성합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.metadata": "표준 개체의 메타 데이터. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec": "Spec은 포드 작성자가 요청한 볼륨의 원하는 특성을 정의합니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.accessModes": "AccessModes에는 볼륨에 필요한 액세스 모드가 포함되어 있습니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.dataSource": "이 필드는 다음 중 하나를 지정하는 데 사용할 수 있습니다. * 기존 VolumeSnapshot 객체 (snapshot.storage.k8s.io/VolumeSnapshot-베타) * 기존 PVC (PersistentVolumeClaim) * 데이터 채우기 (알파)를 순서대로 구현하는 기존 사용자 지정 리소스 / 객체 VolumeSnapshot 객체 유형을 사용하려면 적절한 기능 게이트를 활성화해야합니다 (VolumeSnapshotDataSource 또는 AnyVolumeDataSource) 프로비저닝 도구 또는 외부 컨트롤러가 지정된 데이터 소스를 지원할 수있는 경우 지정된 데이터 소스의 내용을 기반으로 새 볼륨을 생성합니다. 지정된 데이터 소스가 지원되지 않는 경우 볼륨이 생성되지 않고 오류가 이벤트로보고됩니다. 앞으로 더 많은 데이터 소스 유형을 지원할 계획이며 제공자의 동작이 변경 될 수 있습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.apiGroup": "APIGroup은 참조되는 리소스에 대한 그룹입니다. APIGroup이 지정되지 않은 경우 지정된 종류가 코어 API 그룹에 있어야합니다. 다른 타사 유형의 경우 APIGroup이 필요합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.kind": "Kind는 참조되는 리소스 유형입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.dataSource.properties.name": "이름은 참조되는 리소스의 이름입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.resources": "리소스는 볼륨에 있어야하는 최소 리소스를 나타냅니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.limits": "제한은 허용되는 최대 컴퓨팅 리소스 양을 설명합니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.resources.properties.requests": "요청은 필요한 최소 컴퓨팅 리소스 양을 설명합니다. 컨테이너에 대해 Requests가 생략 된 경우 명시 적으로 지정된 경우 기본적으로 Limits로 지정되고 그렇지 않으면 구현 정의 값으로 지정됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.selector": "바인딩을 고려할 볼륨에 대한 레이블 쿼리입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions": "matchExpressions는 레이블 선택기 요구 사항 목록입니다. 요구 사항은 AND입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items": "레이블 선택기 요구 사항은 값, 키 및 키와 값을 관련시키는 연산자를 포함하는 선택기입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.key": "key는 선택기가 적용되는 레이블 키입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.operator": "연산자는 값 집합에 대한 키의 관계를 나타냅니다. 유효한 연산자는 In, NotIn, Exists 및 DoesNotExist입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchExpressions.items.properties.values": "값은 문자열 값의 배열입니다. 연산자가 In 또는 NotIn 인 경우 값 배열은 비어 있지 않아야합니다. 연산자가 Exists 또는 DoesNotExist 인 경우 값 배열은 비어 있어야합니다. 이 어레이는 전략적 병합 패치 중에 교체됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.selector.properties.matchLabels": "matchLabels는 {key, value} 쌍의 맵입니다. matchLabels 맵의 단일 {key, value}는 키 필드가 &quot;key&quot;이고 연산자가 &quot;In&quot;이고 값 배열에 &quot;value&quot;만 포함 된 matchExpressions의 요소와 동일합니다. 요구 사항은 AND입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.storageClassName": "클레임에 필요한 StorageClass의 이름입니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.volumeMode": "volumeMode는 클레임에 필요한 볼륨 유형을 정의합니다. 클레임 사양에 포함되지 않은 경우 파일 시스템의 가치가 암시됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.spec.properties.volumeName": "VolumeName은이 클레임을 뒷받침하는 PersistentVolume에 대한 바인딩 참조입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.status": "상태는 영구 볼륨 클레임의 현재 정보 / 상태를 나타냅니다. 읽기 전용. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.status.properties.accessModes": "AccessModes에는 PVC를 지원하는 볼륨에있는 실제 액세스 모드가 포함됩니다. 추가 정보 : https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.status.properties.capacity": "기본 볼륨의 실제 리소스를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.status.properties.conditions": "지속적 볼륨 청구의 현재 상태. 기본 영구 볼륨의 크기가 조정되는 경우 조건이 &#39;ResizeStarted&#39;로 설정됩니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.status.properties.conditions.items": "PersistentVolumeClaimCondition은 pvc 상태에 대한 세부 정보를 포함합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.status.properties.conditions.items.properties.lastProbeTime": "지난번에 우리는 조건을 조사했습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.status.properties.conditions.items.properties.lastTransitionTime": "마지막으로 조건이 한 상태에서 다른 상태로 전환 된 시간입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.status.properties.conditions.items.properties.message": "마지막 전환에 대한 세부 정보를 나타내는 사람이 읽을 수있는 메시지입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.status.properties.conditions.items.properties.reason": "고유합니다. 이것은 조건의 마지막 전환 이유를 제공하는 짧고 기계가 이해할 수있는 문자열이어야합니다. &quot;ResizeStarted&quot;가보고되면 기본 영구 볼륨의 크기가 조정되고 있음을 의미합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.status.properties.conditions.items.properties.type": "PersistentVolumeClaimConditionType은 PersistentVolumeClaimCondition.Type의 유효한 값입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.spec.properties.workspaces.items.properties.volumeClaimTemplate.properties.status.properties.phase": "Phase는 PersistentVolumeClaim의 현재 단계를 나타냅니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.status": "IntegrationConfigStatus는 IntegrationConfig의 관찰 된 상태를 정의합니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.conditions": "IntegrationConfig의 조건",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.conditions.items": "조건은 물체의 상태에 대한 관찰을 나타냅니다. 조건은 관찰의 세부 사항이 사전에 알려지지 않았거나 주어진 종류의 모든 인스턴스에 적용되지 않을 때 사용하기위한 확장 메커니즘입니다. 사용자와 구성 요소가 다른 관찰에서 유추 할 필요가없는 속성을 명시 적으로 전달하려면 조건을 추가해야합니다. 일단 정의되면 Condition의 의미를 임의로 변경할 수 없습니다. 이는 API의 일부가되며 API의 다른 부분과 동일한 역방향 및 순방향 호환성 문제를 갖습니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.conditions.items.properties.reason": "ConditionReason은 현재 상태의 원인 범주를 한 단어로 CamelCase로 표현하기위한 것입니다. 한 줄의 kubectl get 출력과 같은 간결한 출력 및 원인 발생 요약에 사용하기위한 것입니다.",
    "%cicd.tmax.io_integrationconfigs.yaml.spec.versions.schema.openAPIV3Schema.properties.status.properties.conditions.items.properties.type": "ConditionType은 조건의 유형이며 일반적으로 CamelCased 단어 또는 짧은 구문입니다. 조건 유형은 &quot;비정상 참&quot;극성의 상태를 나타내야합니다. 예를 들어 조건이 정책이 유효하지 않은 경우를 나타내는 경우 &quot;유효 함&quot;케이스가 표준 일 수 있으므로 조건을 &quot;유효하지 않음&quot;이라고해야합니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema": "RoleBindingClaim은 rolebindingclaims API의 스키마입니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.resourceName": "rolebindingName은 생성 될 역할 바인딩의 이름입니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.roleRef": "RoleRef에는 사용중인 역할을 가리키는 정보가 포함됩니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.roleRef.properties.apiGroup": "APIGroup은 참조되는 리소스에 대한 그룹입니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.roleRef.properties.kind": "Kind는 참조되는 리소스 유형입니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.roleRef.properties.name": "이름은 참조되는 리소스의 이름입니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.status": "Status는 RoleBindingClaim의 현재 상태를 보여줍니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.lastTransitionTime": "LastTransitionTime은 상태가 마지막으로 변경된 시간을 보여줍니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.message": "메시지는 마지막으로 상태가 변경되었을 때 로그를 보여줍니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.reason": "이유는 상태가 마지막에 변경된 이유를 보여줍니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.status": "Status는 NamespaceClaim의 현재 상태를 보여줍니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.subjects": "주제에는 역할 바인딩이 적용되는 개체 또는 사용자 ID에 대한 참조가 포함됩니다. 이는 직접 API 개체 참조 또는 사용자 및 그룹 이름과 같은 비 개체에 대한 값을 보유 할 수 있습니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.subjects.items": "제목에는 역할 바인딩이 적용되는 개체 또는 사용자 ID에 대한 참조가 포함됩니다. 이는 직접 API 개체 참조 또는 사용자 및 그룹 이름과 같은 비 개체에 대한 값을 보유 할 수 있습니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.subjects.items.properties.apiGroup": "APIGroup은 참조 된 주제의 API 그룹을 보유합니다. ServiceAccount 주제에 대한 기본값은 &quot;&quot;입니다. 사용자 및 그룹 주제에 대한 기본값은 &quot;rbac.authorization.k8s.io&quot;입니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.subjects.items.properties.kind": "참조되는 개체의 종류입니다. 이 API 그룹에서 정의한 값은 &quot;User&quot;, &quot;Group&quot;및 &quot;ServiceAccount&quot;입니다. Authorizer가 종류 값을 인식하지 못하는 경우 Authorizer는 오류를보고해야합니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.subjects.items.properties.name": "참조되는 개체의 이름입니다.",
    "%rolebindingclaims.yaml.spec.validation.openAPIV3Schema.properties.subjects.items.properties.namespace": "참조 된 개체의 네임 스페이스입니다. 개체 종류가 &quot;사용자&quot;또는 &quot;그룹&quot;과 같은 비 네임 스페이스이고이 값이 비어 있지 않으면 권한 부여자가 오류를보고해야합니다.",
    "%clusterclaims.yaml.spec.validation.openAPIV3Schema": "ClusterClaim은 clusterclaims API의 스키마입니다.",
    "%clusterclaims.yaml.spec.validation.openAPIV3Schema.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%clusterclaims.yaml.spec.validation.openAPIV3Schema.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%clusterclaims.yaml.spec.validation.openAPIV3Schema.properties.spec": "ClusterClaimSpec은 원하는 ClusterClaim 상태를 정의합니다.",
    "%clusterclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.clusterName": "생성 할 클러스터의 이름",
    "%clusterclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.masterNum": "마스터 노드 수",
    "%clusterclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.masterType": "마스터 노드의 VM 유형",
    "%clusterclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.provider": "VM이 생성 된 클라우드 제공 업체의 이름",
    "%clusterclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.region": "VM이 작동하는 지역",
    "%clusterclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.sshKey": "VM에 액세스하기위한 SSH 키 정보",
    "%clusterclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.version": "Kubernetes 버전",
    "%clusterclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.workerNum": "작업자 노드 수",
    "%clusterclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.workerType": "작업자 노드의 VM 유형",
    "%clusterclaims.yaml.spec.validation.openAPIV3Schema.properties.status": "ClusterClaimStatus는 ClusterClaim의 관찰 된 상태를 정의합니다.",
    "%namespaceclaims.yaml.spec.validation.openAPIV3Schema": "NamespaceClaim은 namespaceclaims API의 스키마입니다.",
    "%namespaceclaims.yaml.spec.validation.openAPIV3Schema.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%namespaceclaims.yaml.spec.validation.openAPIV3Schema.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%namespaceclaims.yaml.spec.validation.openAPIV3Schema.properties.resourceName": "namespaceName은 생성 될 네임 스페이스의 이름입니다.",
    "%namespaceclaims.yaml.spec.validation.openAPIV3Schema.properties.spec": "Spec은 NamespaceClaim의 ResourceQuotaSpec입니다.",
    "%namespaceclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.hard": "hard는 명명 된 각 리소스에 대해 원하는 하드 제한 집합입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/resource-quotas/",
    "%namespaceclaims.yaml.spec.validation.openAPIV3Schema.properties.specLimit": "SpecLimit는 CPU 및 메모리의 가치를 제한합니다.",
    "%namespaceclaims.yaml.spec.validation.openAPIV3Schema.properties.specLimit.properties.limitCpu": "LimitCpu는 CPU의 가치를 제한합니다.",
    "%namespaceclaims.yaml.spec.validation.openAPIV3Schema.properties.specLimit.properties.limitMemory": "LimitCpu는 메모리의 가치를 제한합니다.",
    "%namespaceclaims.yaml.spec.validation.openAPIV3Schema.properties.status": "Status는 NamespaceClaim의 현재 상태를 보여줍니다.",
    "%namespaceclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.lastTransitionTime": "LastTransitionTime은 상태가 마지막으로 변경된 시간을 보여줍니다.",
    "%namespaceclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.message": "메시지는 마지막으로 상태가 변경되었을 때 로그를 보여줍니다.",
    "%namespaceclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.reason": "이유는 상태가 마지막에 변경된 이유를 보여줍니다.",
    "%namespaceclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.status": "Status는 NamespaceClaim의 현재 상태를 보여줍니다.",
    "%resourcequotaclaims.yaml.spec.validation.openAPIV3Schema": "ResourceQuotaClaim은 resourcequotaclaims API의 스키마입니다.",
    "%resourcequotaclaims.yaml.spec.validation.openAPIV3Schema.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%resourcequotaclaims.yaml.spec.validation.openAPIV3Schema.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%resourcequotaclaims.yaml.spec.validation.openAPIV3Schema.properties.resourceName": "resourcequotaName은 생성 될 리소스 할당량의 이름입니다.",
    "%resourcequotaclaims.yaml.spec.validation.openAPIV3Schema.properties.spec": "Spec은 NamespaceClaim의 ResourceQuotaSpec입니다.",
    "%resourcequotaclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.hard": "hard는 명명 된 각 리소스에 대해 원하는 하드 제한 집합입니다. 추가 정보 : https://kubernetes.io/docs/concepts/policy/resource-quotas/",
    "%resourcequotaclaims.yaml.spec.validation.openAPIV3Schema.properties.specLimit": "SpecLimit는 CPU 및 메모리의 가치를 제한합니다.",
    "%resourcequotaclaims.yaml.spec.validation.openAPIV3Schema.properties.specLimit.properties.limitCpu": "LimitCpu는 CPU의 가치를 제한합니다.",
    "%resourcequotaclaims.yaml.spec.validation.openAPIV3Schema.properties.specLimit.properties.limitMemory": "LimitCpu는 메모리의 가치를 제한합니다.",
    "%resourcequotaclaims.yaml.spec.validation.openAPIV3Schema.properties.status": "Status는 ResourceQuotaClaim의 현재 상태를 보여줍니다.",
    "%resourcequotaclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.lastTransitionTime": "LastTransitionTime은 상태가 마지막으로 변경된 시간을 보여줍니다.",
    "%resourcequotaclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.message": "메시지는 마지막으로 상태가 변경되었을 때 로그를 보여줍니다.",
    "%resourcequotaclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.reason": "이유는 상태가 마지막에 변경된 이유를 보여줍니다.",
    "%resourcequotaclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.status": "Status는 NamespaceClaim의 현재 상태를 보여줍니다.",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema": "TFApplyClaim은 tfapplyclaims API의 스키마입니다.",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.spec": "TFApplyClaimSpec은 TFApplyClaim의 원하는 상태를 정의합니다.",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.branch": "Git 브랜치",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.destroy": "&quot;테라 폼 디 스토리&quot;수행 여부",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.secret": "Git 자격 증명의 비밀 이름",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.type": "Git 저장소 유형 (공개, 개인)",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.url": "Git URL (HCL 코드)",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.variable": "Terraform 변수",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.spec.properties.version": "Terraform CLI 버전",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.status": "TFApplyClaimStatus는 TFApplyClaim의 관찰 된 상태를 정의합니다.",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.action": "작업은 관리자가 적용하는 작업을 정의합니다.",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.apply": "Apply는 &quot;terraform apply&quot;에 대한 정보를 정의합니다.",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.commit": "Commit은 적용 또는 제거시 최신 커밋 ID를 정의합니다.",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.destroy": "Destroy는 &quot;terraform destroy&quot;에 대한 정보를 정의합니다.",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.log": "State는 terraform cmd에 대한 stdout-stderr 로그의 내용을 정의합니다.",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.phase": "단계는 Terraform 클레임의 현재 단계를 정의합니다.",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.plans": "계획은 &quot;테라 폼 계획&quot;에 대한 정보를 정의합니다.",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.plans.items.properties.commit": "&quot;terraform plan&quot;이 수행 한 최신 Commid ID",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.plans.items.properties.lastexectiontime": "&quot;테라 폼 계획&quot;이 마지막으로 수행 된 시간입니다.",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.plans.items.properties.log": "계획 Cmd에 대한 Stdout-StdErr 로그",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.resource": "리소스는 Cloud Platform에서 추가, 업데이트 또는 삭제 된 리소스의 수를 정의합니다.",
    "%tfapplyclaims.yaml.spec.validation.openAPIV3Schema.properties.status.properties.state": "State는 Terraform 상태 파일의 내용을 정의합니다.",
    "%Role.json": "역할은 RoleBinding에서 하나의 단위로 참조 할 수있는 PolicyRules의 네임 스페이스, 논리적 그룹입니다.",
    "%Role.json.properties.apiVersion": "APIVersion은이 객체 표현의 버전이 지정된 스키마를 정의합니다. 서버는 인식 된 스키마를 최신 내부 값으로 변환해야하며 인식되지 않은 값을 거부 할 수 있습니다. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "%Role.json.properties.kind": "Kind는이 개체가 나타내는 REST 리소스를 나타내는 문자열 값입니다. 서버는 클라이언트가 요청을 제출하는 엔드 포인트에서이를 추론 할 수 있습니다. 업데이트 할 수 없습니다. CamelCase에서. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%Role.json.properties.metadata": "ObjectMeta는 사용자가 만들어야하는 모든 개체를 포함하는 모든 지속 형 리소스에 있어야하는 메타 데이터입니다.",
    "%Role.json.properties.metadata.properties.annotations": "주석은 임의의 메타 데이터를 저장하고 검색하기 위해 외부 도구에서 설정할 수있는 리소스와 함께 저장된 구조화되지 않은 키 값 맵입니다. 쿼리 할 수 없으며 개체를 수정할 때 보존해야합니다. 추가 정보 : http://kubernetes.io/docs/user-guide/annotations",
    "%Role.json.properties.metadata.properties.clusterName": "개체가 속한 클러스터의 이름입니다. 이는 서로 다른 클러스터에서 이름과 네임 스페이스가 동일한 리소스를 구별하는 데 사용됩니다. 이 필드는 현재 어디에도 설정되어 있지 않으며 apiserver는 생성 또는 업데이트 요청에 설정된 경우이를 무시합니다.",
    "%Role.json.properties.metadata.properties.creationTimestamp": "시간은 YAML 및 JSON에 대한 올바른 마샬링을 지원하는 시간에 대한 래퍼입니다. 시간 패키지가 제공하는 많은 팩토리 메소드에 대해 래퍼가 제공됩니다.",
    "%Role.json.properties.metadata.properties.deletionGracePeriodSeconds": "이 개체가 시스템에서 제거되기 전에 정상적으로 종료되는 데 허용되는 시간 (초)입니다. deleteTimestamp도 설정된 경우에만 설정됩니다. 단축 만 가능합니다. 읽기 전용.",
    "%Role.json.properties.metadata.properties.deletionTimestamp": "시간은 YAML 및 JSON에 대한 올바른 마샬링을 지원하는 시간에 대한 래퍼입니다. 시간 패키지가 제공하는 많은 팩토리 메소드에 대해 래퍼가 제공됩니다.",
    "%Role.json.properties.metadata.properties.finalizers": "개체가 레지스트리에서 삭제되기 전에 비어 있어야합니다. 각 항목은 목록에서 항목을 제거 할 담당 구성 요소의 식별자입니다. 객체의 deleteTimestamp가 nil이 아닌 경우이 목록의 항목 만 제거 할 수 있습니다. 종료자는 임의의 순서로 처리 및 제거 될 수 있습니다. 주문은 종료자가 멈출 위험이 높기 때문에 시행되지 않습니다. finalizers는 공유 필드이며 권한이있는 모든 액터는 재정렬 할 수 있습니다. 종료 자 목록이 순서대로 처리되면 목록에서 첫 번째 종료자를 담당하는 구성 요소가 다음을 담당하는 구성 요소가 생성 한 신호 (필드 값, 외부 시스템 또는 기타)를 기다리는 상황이 발생할 수 있습니다. 종료자가 목록의 뒷부분에 있으므로 교착 상태가 발생합니다. 강제로 주문하지 않으면 종료자는 서로 자유롭게 주문할 수 있으며 목록의 주문 변경에 취약하지 않습니다.",
    "%Role.json.properties.metadata.properties.generateName": "GenerateName은 이름 필드가 제공되지 않은 경우에만 고유 한 이름을 생성하기 위해 서버에서 사용하는 선택적 접두사입니다. 이 필드를 사용하면 클라이언트에 반환되는 이름이 전달 된 이름과 다릅니다. 이 값은 고유 한 접미사와 결합됩니다. 제공된 값은 이름 필드와 동일한 유효성 검사 규칙을 가지며 서버에서 값을 고유하게 만드는 데 필요한 접미사 길이만큼 잘릴 수 있습니다. 이 필드가 지정되고 생성 된 이름이 존재하는 경우 서버는 409를 반환하지 않습니다. 대신 할당 된 시간에 고유 이름을 찾을 수 없음을 나타내는 Reason ServerTimeout과 함께 201 Created 또는 500을 반환하고 클라이언트는 다시 시도해야합니다. (선택적으로 Retry-After 헤더에 표시된 시간 이후). Name이 지정되지 않은 경우에만 적용됩니다. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
    "%Role.json.properties.metadata.properties.generation": "원하는 상태의 특정 세대를 나타내는 시퀀스 번호입니다. 시스템에 의해 채워집니다. 읽기 전용.",
    "%Role.json.properties.metadata.properties.labels": "개체를 구성 및 분류 (범위 지정 및 선택)하는 데 사용할 수있는 문자열 키 및 값의 맵입니다. 복제 컨트롤러 및 서비스의 선택자와 일치 할 수 있습니다. 더 많은 정보 : http://kubernetes.io/docs/user-guide/labels",
    "%Role.json.properties.metadata.properties.managedFields": "ManagedFields는 워크 플로 ID 및 버전을 해당 워크 플로에서 관리하는 필드 집합에 매핑합니다. 이는 대부분 내부 관리를위한 것이며 사용자는 일반적으로이 필드를 설정하거나 이해할 필요가 없습니다. 워크 플로는 사용자 이름, 컨트롤러 이름 또는 &quot;ci-cd&quot;와 같은 특정 적용 경로의 이름이 될 수 있습니다. 필드 집합은 항상 개체를 수정할 때 워크 플로에서 사용한 버전입니다.",
    "%Role.json.properties.metadata.properties.managedFields.items": "ManagedFieldsEntry는 워크 플로 ID, FieldSet 및 fieldset이 적용되는 리소스의 그룹 버전입니다.",
    "%Role.json.properties.metadata.properties.managedFields.items.properties.apiVersion": "APIVersion은이 필드 집합이 적용되는이 리소스의 버전을 정의합니다. 형식은 최상위 APIVersion 필드와 마찬가지로 &quot;그룹 / 버전&quot;입니다. 필드 세트는 자동으로 변환 될 수 없으므로 버전을 추적해야합니다.",
    "%Role.json.properties.metadata.properties.managedFields.items.properties.fieldsType": "FieldsType은 다양한 필드 형식 및 버전에 대한 판별 자입니다. 현재 가능한 값은 &quot;FieldsV1&quot;하나뿐입니다.",
    "%Role.json.properties.metadata.properties.managedFields.items.properties.fieldsV1": "FieldsV1은 Trie와 같은 데이터 구조에 JSON 형식으로 필드 세트를 저장합니다. 각 키는 &#39;.&#39;입니다. 필드 자체를 나타내며 항상 빈 세트 또는 하위 필드 또는 항목을 나타내는 문자열에 매핑됩니다. 문자열은 다음 네 가지 형식 중 하나를 따릅니다. &#39;f :<name> &#39;, 어디<name> 구조체의 필드 이름이거나 맵 &#39;v :<value> &#39;, 어디<value> 목록 항목 &#39;i :&#39;의 정확한 json 형식 값입니다.<index> &#39;, 어디<index> 목록에서 항목의 위치 &#39;k :<keys> &#39;, 어디<keys> 목록 항목의 키 필드를 고유 한 값으로 매핑합니다. 키가 빈 필드 값에 매핑되는 경우 키가 나타내는 필드는 집합의 일부입니다. 정확한 형식은 sigs.k8s.io/structured-merge-diff에 정의되어 있습니다.",
    "%Role.json.properties.metadata.properties.managedFields.items.properties.manager": "관리자는 이러한 필드를 관리하는 워크 플로의 식별자입니다.",
    "%Role.json.properties.metadata.properties.managedFields.items.properties.operation": "Operation은이 ManagedFieldsEntry가 생성되도록하는 작업 유형입니다. 이 필드에 유효한 유일한 값은 &#39;적용&#39;및 &#39;업데이트&#39;입니다.",
    "%Role.json.properties.metadata.properties.managedFields.items.properties.time": "시간은 YAML 및 JSON에 대한 올바른 마샬링을 지원하는 시간에 대한 래퍼입니다. 시간 패키지가 제공하는 많은 팩토리 메소드에 대해 래퍼가 제공됩니다.",
    "%Role.json.properties.metadata.properties.name": "이름은 네임 스페이스 내에서 고유해야합니다. 일부 리소스를 사용하면 클라이언트가 적절한 이름 생성을 자동으로 요청할 수 있지만 리소스를 만들 때 필요합니다. 이름은 주로 생성 멱등 및 구성 정의를위한 것입니다. 업데이트 할 수 없습니다. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Role.json.properties.metadata.properties.namespace": "네임 스페이스는 각 이름 내의 공간이 고유해야 함을 정의합니다. 빈 네임 스페이스는 &quot;기본&quot;네임 스페이스와 동일하지만 &quot;기본값&quot;은 표준 표현입니다. 모든 개체의 범위를 네임 스페이스로 지정할 필요는 없습니다. 이러한 개체에 대한이 필드의 값은 비어 있습니다. DNS_LABEL이어야합니다. 업데이트 할 수 없습니다. 자세한 정보 : http://kubernetes.io/docs/user-guide/namespaces",
    "%Role.json.properties.metadata.properties.ownerReferences": "이 개체에 종속 된 개체 목록입니다. 목록의 모든 개체가 삭제 된 경우이 개체는 가비지 수집됩니다. 이 개체가 컨트롤러에 의해 관리되는 경우이 목록의 항목은 컨트롤러 필드가 true로 설정된이 컨트롤러를 가리 킵니다. 관리 컨트롤러는 둘 이상있을 수 없습니다.",
    "%Role.json.properties.metadata.properties.ownerReferences.items": "OwnerReference에는 소유 객체를 식별 할 수있는 충분한 정보가 포함되어 있습니다. 소유 개체는 종속 개체와 동일한 네임 스페이스에 있거나 클러스터 범위 여야하므로 네임 스페이스 필드가 없습니다.",
    "%Role.json.properties.metadata.properties.ownerReferences.items.properties.apiVersion": "리퍼 런트의 API 버전입니다.",
    "%Role.json.properties.metadata.properties.ownerReferences.items.properties.blockOwnerDeletion": "true이고 소유자에게 &quot;foregroundDeletion&quot;종료자가 있으면이 참조가 제거 될 때까지 소유자를 키-값 저장소에서 삭제할 수 없습니다. 기본값은 false입니다. 이 필드를 설정하려면 사용자에게 소유자의 &quot;삭제&quot;권한이 필요합니다. 그렇지 않으면 422 (Unprocessable Entity)가 반환됩니다.",
    "%Role.json.properties.metadata.properties.ownerReferences.items.properties.controller": "true 인 경우이 참조는 관리 컨트롤러를 가리 킵니다.",
    "%Role.json.properties.metadata.properties.ownerReferences.items.properties.kind": "지시 대상의 종류. 자세한 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "%Role.json.properties.metadata.properties.ownerReferences.items.properties.name": "대상자의 이름. 추가 정보 : http://kubernetes.io/docs/user-guide/identifiers#names",
    "%Role.json.properties.metadata.properties.ownerReferences.items.properties.uid": "리퍼 런트의 UID. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%Role.json.properties.metadata.properties.resourceVersion": "개체가 변경된시기를 확인하기 위해 클라이언트에서 사용할 수있는이 개체의 내부 버전을 나타내는 불투명 값입니다. 낙관적 동시성, 변경 감지 및 리소스 또는 리소스 집합에 대한 감시 작업에 사용할 수 있습니다. 클라이언트는 이러한 값을 불투명하게 처리하고 수정되지 않은 상태로 서버에 다시 전달해야합니다. 특정 리소스 또는 리소스 집합에 대해서만 유효 할 수 있습니다. 시스템에 의해 채워집니다. 읽기 전용. 값은 클라이언트 및. 추가 정보 : https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
    "%Role.json.properties.metadata.properties.selfLink": "SelfLink는이 개체를 나타내는 URL입니다. 시스템에 의해 채워집니다. 읽기 전용. DEPRECATED Kubernetes는 1.20 릴리스에서이 필드 전파를 중지하며 필드는 1.21 릴리스에서 제거 될 예정입니다.",
    "%Role.json.properties.metadata.properties.uid": "UID는이 개체의 시간 및 공간 값에서 고유합니다. 일반적으로 리소스가 성공적으로 생성되면 서버에서 생성되며 PUT 작업에서 변경할 수 없습니다. 시스템에 의해 채워집니다. 읽기 전용. 더 많은 정보 : http://kubernetes.io/docs/user-guide/identifiers#uids",
    "%Role.json.properties.rules": "규칙은이 역할에 대한 모든 PolicyRule을 보유합니다.",
    "%Role.json.properties.rules.items": "PolicyRule은 정책 규칙을 설명하는 정보를 보유하지만 규칙이 적용되는 사람 또는 규칙이 적용되는 네임 스페이스에 대한 정보는 포함하지 않습니다.",
    "%Role.json.properties.rules.items.properties.apiGroups": "APIGroups는 리소스가 포함 된 APIGroup의 이름입니다. 여러 API 그룹이 지정된 경우 API 그룹의 열거 된 리소스 중 하나에 대해 요청 된 모든 작업이 허용됩니다.",
    "%Role.json.properties.rules.items.properties.nonResourceURLs": "NonResourceURLs는 사용자가 액세스 할 수 있어야하는 부분 URL 집합입니다. * s는 허용되지만 경로의 전체 최종 단계로만 가능합니다. 리소스가 아닌 URL은 네임 스페이스가 지정되지 않으므로이 필드는 ClusterRoleBinding에서 참조되는 ClusterRoles에만 적용됩니다. 규칙은 API 리소스 (예 : &quot;pods&quot;또는 &quot;secrets&quot;) 또는 비리 소스 URL 경로 (예 : &quot;/ api&quot;)에 적용 할 수 있지만 둘 다 적용 할 수는 없습니다.",
    "%Role.json.properties.rules.items.properties.resourceNames": "ResourceNames는 규칙이 적용되는 선택적 화이트리스트입니다. 빈 세트는 모든 것이 허용됨을 의미합니다.",
    "%Role.json.properties.rules.items.properties.resources": "리소스는이 규칙이 적용되는 리소스 목록입니다. ResourceAll은 모든 리소스를 나타냅니다.",
    "%Role.json.properties.rules.items.properties.verbs": "Verbs는이 규칙에 포함 된 모든 ResourceKinds 및 AttributeRestrictions에 적용되는 동사 목록입니다. VerbAll은 모든 종류를 나타냅니다."
  }
}