## init stage -- create ns, rq, sa, cr ,crb 

apiVersion: v1
kind: Namespace
metadata:
  name: @@NAME_NS@@

---

apiVersion: v1
kind: ResourceQuota
metadata:
  name: @@NAME_NS@@-quota
  namespace: @@NAME_NS@@
spec:
  hard:
    limits.cpu: "2"
    limits.memory: "5Gi"
    requests.storage: "10Gi"

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: @@NAME_NS@@-admin
  namespace: @@NAME_NS@@

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: @@NAME_NS@@-admin
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]

---
  
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: @@NAME_NS@@-admin
subjects:
  - kind: ServiceAccount
    name: @@NAME_NS@@-admin
    namespace: @@NAME_NS@@
roleRef:
  kind: ClusterRole
  name: @@NAME_NS@@-admin
  apiGroup: rbac.authorization.k8s.io

--- 

# tls certification stage = use job to create  tls certification
apiVersion: batch/v1
kind: Job
metadata:
  name: console-https-secret-create
  namespace: @@NAME_NS@@
spec:
  template:
    metadata:
      name: console-https-secret-create
    spec:
      containers:
        - name: create
          image: docker.io/jettech/kube-webhook-certgen:v1.3.0
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=console,console.$(POD_NAMESPACE).svc
            - --namespace=$(POD_NAMESPACE)
            - --secret-name=console-https-secret
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          resources:
            limits:
              cpu: '300m'
              memory: '100Mi'                  
      restartPolicy: OnFailure
      serviceAccountName: @@NAME_NS@@-admin
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000

---

# service stage - NodeBalancer
apiVersion: v1
kind: Service
metadata:
  name: console
  namespace: @@NAME_NS@@
spec:
  externalTrafficPolicy: Local
  type: LoadBalancer
  ports:
  - name: "https-lb"
    port: 443
    targetPort: 6443
  selector:
    app: console   
    hypercloud: ui

---
# service stage - NodePort
apiVersion: v1
kind: Service
metadata:
  name: console-np
  namespace: @@NAME_NS@@
spec:
  externalTrafficPolicy: Local
  type: NodePort
  ports:
  - name: "https"
    port: 6433
    targetPort: 6443
    # nodePort: @@NODE_PORT@@
  selector:
    app: console   
    hypercloud: ui

---

# storage stage - dynamic-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: console-pvc
  namespace: @@NAME_NS@@ 
spec:
  storageClassName: csi-cephfs-sc 
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---

# deployment stage 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: console
  namespace: @@NAME_NS@@
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      hypercloud: ui
      app: console
  template:
    metadata:
      name: hypercloud-ui
      labels:
        hypercloud: ui
        app: console
    spec:
      serviceAccountName: @@NAME_NS@@-admin
      containers:
      - command:
        - /opt/bridge/bin/bridge
        - --public-dir=/opt/bridge/static
        - --listen=https://0.0.0.0:6443
        - --base-address=https://0.0.0.0:6443
        - --tls-cert-file=/var/https-cert/cert
        - --tls-key-file=/var/https-cert/key
        - --keycloak-realm=@@REALM@@ 
        - --keycloak-auth-url=https://@@KEYCLOAK@@/auth
        - --keycloak-client-id=@@CLIENTID@@         
        - --grafana-endpoint=http://grafana.monitoring.svc:3000/api/grafana/
        - --kiali-endpoint=https://0.0.0.0/api/kiali/
        - --webhook-endpoint=https://hypercloud-webhook-svc.hypercloud5-system.svc/api/webhook/
        - --mc-mode=true 
        image: tmaxcloudck/hypercloud-console:@@VER@@
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - mountPath: /var/https-cert
          name: https-cert
          readOnly: true
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        - mountPath: /etc/timezone
          name: timezone
          readOnly: true
        - mountPath: /opt/bridge/configs 
          name: dynamic-config
        name: console
        ports:
        - containerPort: 6443
          protocol: TCP
        resources:
          limits:
            cpu: '400m'
            memory: '500Mi'
          requests:
            cpu: '400m'
            memory: '500Mi'            
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
      - name: https-cert
        secret:
          defaultMode: 288
          secretName: console-https-secret
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: timezone
        hostPath:
          path: /etc/timezone
      - name: dynamic-config
        persistentVolumeClaim:
          claimName: console-pvc

# console crd stage

---

apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
  creationTimestamp: null
  name: consoles.hypercloud.tmaxcloud.com
spec:
  group: hypercloud.tmaxcloud.com
  names:
    kind: Console
    listKind: ConsoleList
    plural: consoles
    singular: console
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.number
      name: READY
      type: integer
    - jsonPath: .status.routers
      name: ROUTERS
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: Console is the Schema for the consoles API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ConsoleSpec defines the desired state of Console
            properties:
              configuration:
                description: 'INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
                  Important: Run "make" to regenerate code after modifying this file'
                properties:
                  routers:
                    additionalProperties:
                      description: Router holds the router configuration.
                      properties:
                        path:
                          description: If want to remove url path when proxy server
                            request backend
                          type: string
                        rule:
                          description: Reverse proxy rule
                          type: string
                        server:
                          description: Backend Server Name
                          type: string
                      type: object
                    type: object
                type: object
            required:
            - configuration
            type: object
          status:
            description: ConsoleStatus defines the observed state of Console
            properties:
              number:
                description: Show the number of backend proxy
                type: integer
              routers:
                description: Config information
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
# console-operator stage 

apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: @@NAME_NS@@
  labels:
    control-plane: controller-manager
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - command:
        - /manager
        args:
        - --pwd=/var/tmp/configs/
        - --namespace=console-system
        image: jinsnow/watch-operator:0.0.7
        name: manager
        resources:
          limits:
            cpu: 100m
            memory: 30Mi
          requests:
            cpu: 100m
            memory: 20Mi
        volumeMounts:
        - mountPath: /var/tmp/configs
          name: dynamic-config
      terminationGracePeriodSeconds: 10
      volumes:
      - name: dynamic-config 
        persistentVolumeClaim:
          claimName: console-pvc
